FLATPAK_BRANCH:variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_STRICT: '--no-strict'
  BST_TRACK_TAGS: 'False'
  BST_NO_PUSH: "bst $BST_STRICT --log-file logs/build.log --colors"
  BST: "bst $BST_STRICT --config build.conf --log-file logs/build.log --colors"
  FLATPAK_BRANCH: master

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_IMAGE_ID: "e60e2dccd1ac4e928d62472676762d8e3e4a1406"
  DOCKER_AMD64: "${DOCKER_REGISTRY}/bst14/amd64:${DOCKER_IMAGE_ID}"
  DOCKER_AARCH64: "${DOCKER_REGISTRY}/bst14/arm64:${DOCKER_IMAGE_ID}"

stages:
- track
- build
- prepare_flatpak
- flatpak
- finish_flatpak

default:
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
        - url: https://m1-xlarge-x86.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

  - |
    case "$FLATPAK_BRANCH" in
      master)
        if [ -n "$NIGHTLY_REPO_TOKEN" ]; then
          export REPO_TOKEN=$NIGHTLY_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://nightly.gnome.org/
          export FLAT_MANAGER_REPO=nightly
        fi
      ;;
      *beta)
        if [ -n "$FLATHUB_BETA_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_BETA_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=beta
        fi
      ;;
      *)
        if [ -n "$FLATHUB_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=stable
        fi
      ;;
    esac
#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  dependencies: [track]
  interruptible: true
  script:
  - ${BST} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst platform-manifest.bst sdk-manifest.bst
  - |
    # Only run this build for x86_64, instead of building it somewhere else
    if [ "${ARCH}" == "x86_64" ]; then
        ${BST} build openh264-extension.bst:flatpak-repo.bst
    fi

  # Store all the downloaded git repos and tarballs in the cache.
  # This saves us fetching them on every build
  cache: &bst-cache
    key: bst-$FLATPAK_BRANCH
    paths:
    - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '1 week'

.flatpak-template:
  stage: flatpak
  dependencies: [track, flatpak-prepare]
  script:
  - ostree init --repo repo/ --mode archive

  - ${BST} -o arch "${ARCH}" pull flatpak-runtimes.bst
  - ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst checkout-repo/
  - flatpak build-commit-from --src-repo=checkout-repo/ repo/
  - rm -rf checkout-repo/

  - |
    if test $FLAT_MANAGER_REPO == nightly; then
        ${BST} -o arch "${ARCH}" pull flatpak-platform-extensions.bst
        ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-platform-extensions.bst checkout-repo/
        flatpak build-commit-from --src-repo=checkout-repo/ repo/
        rm -rf checkout-repo/
    fi

  - |
    if test $FLAT_MANAGER_REPO == nightly -a $ARCH == x86_64; then
        ${BST} pull openh264-extension.bst:flatpak-repo.bst
        ${BST} checkout --hardlinks openh264-extension.bst:flatpak-repo.bst checkout-repo/
        flatpak build-commit-from --src-repo=checkout-repo/ repo/
        rm -rf checkout-repo/
    fi

  - flatpak build-update-repo --generate-static-deltas repo/

  - flat-manager-client push $(cat build.txt) repo/
  rules: &flatpak-publish-rules
  - if: $EMERGENCY || $BST_TRACK_TAGS != "False"
    when: never
  - if: $CI_COMMIT_REF_NAME == "barthalion/gottagofast" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/

#
# Architecture specific settings
#

.x86_64: &x86_64
  image: "${DOCKER_AMD64}"
  tags:
  - x86_64
  - gnome-build-meta
  variables:
    ARCH: x86_64

.i686: &i686
  image: "${DOCKER_AMD64}"
  tags:
  - x86_64
  - gnome-build-meta
  variables:
    ARCH: i686

.aarch64: &aarch64
  image: "${DOCKER_AARCH64}"
  tags:
  - aarch64
  - gnome-build-meta
  variables:
    ARCH: aarch64

.arm: &arm
  image: "${DOCKER_AARCH64}"
  tags:
  - armhf
  - gnome-build-meta
  variables:
    ARCH: arm

#
# "Real" CI jobs
#

track:
  <<: *x86_64
  stage: track
  interruptible: true
  script:
  - 'sed -i "s/track-tags: False/track-tags: ${BST_TRACK_TAGS}/" project.conf'
  - ${BST} track --deps all core.bst flatpak-runtimes.bst vm/image.bst boards/pinebook-pro/image.bst boards/rock64/image.bst boards/raspberrypi-4/image.bst
  retry: 2
  # only run on branches targeting master
  rules:
  - if: $FLATPAK_BRANCH == 'master' && $CI_MERGE_REQUEST_ID == null
  cache: *bst-cache
  artifacts:
    paths:
    - project.refs


build-gnome-core-x86_64:
  extends: .build-template
  <<: *x86_64

flatpak-prepare:
  stage: prepare_flatpak
  dependencies: []
  script:
  - flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO > build.txt
  artifacts:
    paths:
    - build.txt
  rules: *flatpak-publish-rules
  <<: *x86_64


flatpak-x86_64:
  extends: .flatpak-template
  <<: *x86_64

flatpak-i386:
  extends: .flatpak-template
  <<: *i686

flatpak-aarch64:
  extends: .flatpak-template
  <<: *aarch64

flatpak-arm:
  extends: .flatpak-template
  <<: *arm


flatpak-finish:
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager-client commit --wait $(cat build.txt)
  - flat-manager-client publish --wait $(cat build.txt)
  - flat-manager-client purge $(cat build.txt)
  rules: *flatpak-publish-rules
  <<: *x86_64

flatpak-finish-failed:
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager-client purge $(cat build.txt)
  rules:
  - if: $EMERGENCY || $BST_TRACK_TAGS != "False"
    when: never
  - if: $CI_COMMIT_REF_NAME == "barthalion/gottagofast" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/
    when: on_failure
  <<: *x86_64
