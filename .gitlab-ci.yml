variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_STRICT: '--strict'
  BST_TRACK_TAGS: 'False'
  BST: "bst $BST_STRICT --config build.conf --log-file logs/build.log --colors"
  BST_SHA: '1.4.0-0-gf8ca130adb632614ebff8453fd91d4c96e87221d'
  BST_EXTERNAL_SHA: '0.18.0-0-g755206670c87a2999132025d24b0d0aacc611ef2'
  DOCKER_IMAGE_ID: '1a534a96f9144ca8ee87cee1fef97faa7c396533'
  FLATPAK_BRANCH: '3.34'

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_AMD64: "${DOCKER_REGISTRY}/bst14/amd64:${DOCKER_IMAGE_ID}"
  DOCKER_AARCH64: "${DOCKER_REGISTRY}/bst14/arm64:${DOCKER_IMAGE_ID}"

stages:
- track
- build
- prepare_flatpak
- flatpak
- finish_flatpak
- reports

default:
  before_script:
  # Use specific version of BuildStream
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream/ checkout $BST_SHA
  - pip3 install buildstream/

  # install bst-external nedded for the flatpak_image plugin
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external/ checkout $BST_EXTERNAL_SHA
  - pip3 install bst-external/

  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
          url: https://cache.gitlab.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

# flat-manager-client to push to flathub
  - git clone https://github.com/flatpak/flat-manager

  - |
    case "$FLATPAK_BRANCH" in
      master)
        if [ -n "$NIGHTLY_REPO_TOKEN" ]; then
          export REPO_TOKEN=$NIGHTLY_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://nightly.gnome.org/
          export FLAT_MANAGER_REPO=nightly
        fi
      ;;
      *beta)
        if [ -n "$FLATHUB_BETA_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_BETA_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=beta
        fi
      ;;
      *)
        if [ -n "$FLATHUB_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=stable
        fi
      ;;
    esac
#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  dependencies: [track]
  script:
  - ${BST} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build core.bst flatpak-runtimes.bst
    flatpak-platform-extensions.bst platform-manifest.bst sdk-manifest.bst
  # Store all the downloaded git repos and tarballs in the cache.
  # This saves us fetching them on every build
  cache: &bst-cache
    key: bst-$FLATPAK_BRANCH
    paths:
    - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    - project.refs

.flatpak-template:
  stage: flatpak
  dependencies: [track, flatpak-prepare]
  script:
  - ostree init --repo repo/ --mode archive

  - ${BST} -o arch "${ARCH}" pull flatpak-runtimes.bst
  - ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst checkout-repo/
  - flatpak build-commit-from --src-repo=checkout-repo/ repo/
  - rm -rf checkout-repo/

  - |
    if test $FLAT_MANAGER_REPO == nightly; then
        ${BST} -o arch "${ARCH}" pull flatpak-platform-extensions.bst
        ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-platform-extensions.bst checkout-repo/
        flatpak build-commit-from --src-repo=checkout-repo/ repo/
        rm -rf checkout-repo/
    fi

  - flatpak build-update-repo --generate-static-deltas repo/

  - flat-manager/flat-manager-client push $(cat build.txt) repo/
  only:
  - master
  - /^gnome-\d-\d\d$/
  except:
    variables:
    - $EMERGENCY
    - $BST_TRACK_TAGS != "False"
    refs:
    - schedules

#
# Architecture specific settings
#

.x86_64: &x86_64
  image: "${DOCKER_AMD64}"
  tags:
  - x86_64
  - gnome-build-meta
  variables:
    ARCH: x86_64

.i686: &i686
  image: "${DOCKER_AMD64}"
  tags:
  - x86_64
  - gnome-build-meta
  variables:
    ARCH: i686

.aarch64: &aarch64
  image: "${DOCKER_AARCH64}"
  tags:
  - aarch64
  - gnome-build-meta
  variables:
    ARCH: aarch64

.arm: &arm
  image: "${DOCKER_AARCH64}"
  tags:
  - armhf
  - gnome-build-meta
  variables:
    ARCH: arm

#
# "Real" CI jobs
#

track:
  <<: *x86_64
  stage: track
  script:
  - 'sed -i "s/track-tags: False/track-tags: ${BST_TRACK_TAGS}/" project.conf'
  - ${BST} track --deps all core.bst flatpak-runtimes.bst
  retry: 2
  # only run on branches targeting master
  only:
    variables:
    - $FLATPAK_BRANCH == 'master'
  cache: *bst-cache
  artifacts:
    when: always
    paths:
    - logs
    - project.refs


build-gnome-core-x86_64:
  <<: *x86_64
  extends: .build-template

build-gnome-core-i386:
  <<: *i686
  extends: .build-template

build-gnome-core-aarch64:
  <<: *aarch64
  extends: .build-template

build-gnome-core-arm:
  <<: *arm
  extends: .build-template


flatpak-prepare:
  <<: *x86_64
  stage: prepare_flatpak
  dependencies: []
  script:
  - flat-manager/flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO
    > build.txt
  artifacts:
    paths:
    - build.txt
  only:
  - master
  - /^gnome-\d-\d\d$/
  except:
    variables:
    - $EMERGENCY
    - $BST_TRACK_TAGS != "False"
    refs:
    - schedules


flatpak-x86_64:
  <<: *x86_64
  extends: .flatpak-template

flatpak-i386:
  <<: *i686
  extends: .flatpak-template

flatpak-aarch64:
  <<: *aarch64
  extends: .flatpak-template

flatpak-arm:
  <<: *arm
  extends: .flatpak-template


flatpak-finish:
  <<: *x86_64
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager/flat-manager-client commit --wait $(cat build.txt)
  - flat-manager/flat-manager-client publish --wait $(cat build.txt)
  - flat-manager/flat-manager-client purge $(cat build.txt)
  only:
  - master
  - /^gnome-\d-\d\d$/
  except:
    variables:
    - $EMERGENCY
    - $BST_TRACK_TAGS != "False"
    refs:
    - schedules

flatpak-finish-failed:
  <<: *x86_64
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager/flat-manager-client purge $(cat build.txt)
  when: on_failure
  only:
  - master
  - /^gnome-\d-\d\d$/
  except:
    variables:
    - $EMERGENCY
    - $BST_TRACK_TAGS != "False"
    refs:
    - schedules


cve_report:
  <<: *x86_64
  stage: reports
  dependencies: [track]
  script:
  - ${BST} pull platform-manifest.bst sdk-manifest.bst

  - ${BST} checkout platform-manifest.bst platform-manifest/
  - ${BST} checkout sdk-manifest.bst sdk-manifest/

  - mkdir -p cve
  - cd cve
  - ../utils/update-local-cve-database.py

  - mkdir -p ../cve-reports
  - ../utils/generate-cve-report.py ../sdk-manifest/usr/manifest.json ../cve-reports/sdk.html
  - ../utils/generate-cve-report.py ../platform-manifest/usr/manifest.json ../cve-reports/platform.html
  cache:
    key: cve
    paths:
    - cve
  artifacts:
    paths:
    - cve-reports
  only:
  - master
  - /^gnome-\d-\d\d$/
