variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST: "bst --config build.conf --log-file logs/build.log --colors"
  BST_SHA: '1.2.4-3-g79bbefe26a3fcd13d3de558aed6b5b4d5bc1235a'
  BST_EXTERNAL_SHA: '0.13.0-0-g6121d1909f80379776e7cff21faaf91adfc779e2'
  FLATPAK_BRANCH: '3.32'

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_AMD64: "${DOCKER_REGISTRY}/amd64:e132e7bf9180b30c6ad0f4b057442cc2f2a0aa86"
  DOCKER_AARCH64: "${DOCKER_REGISTRY}/aarch64:e132e7bf9180b30c6ad0f4b057442cc2f2a0aa86"

stages:
  - track
  - build
  - prepare_flatpak
  - flatpak
  - finish_flatpak
  - reports


# Store all the downloaded git and ostree repos in the cache.
# This saves us fetching them on every build
cache:
  key: bst
  paths:
    - "${XDG_CACHE_HOME}/buildstream/sources/"


before_script:
  # Use specific version of BuildStream
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream/ checkout $BST_SHA
  - pip3 install buildstream/

  # install bst-external nedded for the flatpak_image plugin
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external/ checkout $BST_EXTERNAL_SHA
  - pip3 install bst-external/

  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
          url: https://cache.gitlab.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

  # and ssh key for pushing to the flatpak repo
  - |
    if [ -n "$GITLAB_SSH_KEY" ]; then
        mkdir -p ~/.ssh

        echo "$GITLAB_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        cat >> ~/.ssh/config << EOF
    Host gbm-builder.gnome.org
        User gbm
        ProxyJump bastion.gnome.org
        Hostname vpn.gbm-builder.gnome.org

    Host bastion.gnome.org
        User gbm
    EOF

        # Trust the host key of the jump host and release server
        cat > ~/.ssh/known_hosts << EOF
    |1|Ec1eaTSoDQshjIpoIPouJCw40R4=|wG59JbBlwNW2K3kznnH7OUZYEhA= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAz8HWpA/W/0c/jV9+nU9zyZVUjw8flLksl6BNkcM3s12AMJXTG6qLJ+qVeQwI20eDkTioLLQYgOmMsmmFsO68vlivuxHYfAvjFHui6TkDVGXJS3lPGyOCqVwRmpyG0GnrfRWdsdgrYEo6sGbParkRb/ZfXxOuUXg3wWXMmeMyWXhkb09b1uYZTUjuruJpJTQ9kIC3CH8bdl7oiq2ffd+KdAykTkzkq+kFNizNRe0uBKtkcDgYpAZGOPCEJjpjwvDrWinXoE7rvE8zMfAv2/CP5AM4D+8yHrFgWz9tOexJyNsfJAZmQjg5rWuoeYow9tTVNWVloRU3tvF8OvVprgwPAw==
    |1|DdY9PAqPg4LrkwIatwAUs3JLOXU=|fJqmuz18y1bJLarIIqckB1dH/ts= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAGixpYwAfvRyHOlqpKnrpo3iG5zPjQNL0hcay90SlNMfZ4W6+QUoFTZ/rQXDQFbBrOgTXzFDEQxKxxo350n6dw=
    EOF

    fi

  # flat-manager-client to push to flathub
  - git clone https://github.com/flatpak/flat-manager

  - |
    if [ -n "$FLATHUB_REPO_TOKEN" ]; then
      export REPO_TOKEN=$FLATHUB_REPO_TOKEN
      export FLAT_MANAGER_SERVER=https://hub.flathub.org/
    fi

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  script:
    - ${BST} -o arch "${ARCH}" build core.bst flatpak-runtimes.bst
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
      - logs
      - project.refs

.flatpak-template:
  stage: flatpak
  script:
    - ${BST} -o arch "${ARCH}" build flatpak-runtimes.bst
    - bst -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst repo/

    # Push the resulting runtimes to gbm.gnome.org
    # Assume there will be no branch name collisions,
    # the ssh key is available only on protected branches
    - rsync -a repo/ gbm-builder.gnome.org:incoming/repo-${CI_JOB_ID}
    - ssh gbm-builder.gnome.org gbm-flatpak-scripts/import-commits -c "${CONFIG_FILE}" incoming/repo-${CI_JOB_ID}

.flatpak-nightly-template:
  extends: .flatpak-template
  environment:
    name: nightly/${ARCH}
  variables:
    CONFIG_FILE: config/nightly.json
  only:
    refs:
      - master
    variables:
      - $GITLAB_SSH_KEY
  except:
    variables:
      - $EMERGENCY

.flatpak-stable-template:
  stage: flatpak
  script:
    - ${BST} -o arch "${ARCH}" build flatpak-runtimes.bst

    - |
      if [ -n "$REPO_TOKEN" ]; then
        bst -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst repo/
        flatpak build-update-repo --generate-static-deltas repo/
        flat-manager/flat-manager-client push $(cat build.txt) repo/
      fi
  only:
    - /^gnome-\d-\d\d$/

.flatpak-emergency-template:
  extends: .flatpak-nightly-template
  when: manual
  only:
    variables:
      - $EMERGENCY
  except: []

#
# Architecture specific settings
#

.x86_64: &x86_64
  image: "${DOCKER_AMD64}"
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: x86_64

.i686: &i686
  image: "${DOCKER_AMD64}"
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: i686

.aarch64: &aarch64
  image: "${DOCKER_AARCH64}"
  tags:
    - aarch64
    - gnome-build-meta
  variables:
    ARCH: aarch64

.arm: &arm
  image: "${DOCKER_AARCH64}"
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm

#
# "Real" CI jobs
#

cve_report:
  <<: *x86_64
  stage: reports
  script:
    - pip3 install --user lxml

    - ${BST} track --deps all platform-manifest.bst sdk-manifest.bst
    - ${BST} build platform-manifest.bst
    - ${BST} build sdk-manifest.bst

    - ${BST} checkout platform-manifest.bst platform-manifest/
    - ${BST} checkout sdk-manifest.bst sdk-manifest/

    - mkdir -p "${XDG_CACHE_HOME}/cve"
    - cd "${XDG_CACHE_HOME}/cve"
    - python3 "${CI_PROJECT_DIR}/utils/update-local-cve-database.py"

    - mkdir -p "${CI_PROJECT_DIR}/cve-reports"
    - python3 "${CI_PROJECT_DIR}/utils/generate-cve-report.py" "${CI_PROJECT_DIR}/sdk-manifest/usr/manifest.json" "${CI_PROJECT_DIR}/cve-reports/sdk.html"
    - python3 "${CI_PROJECT_DIR}/utils/generate-cve-report.py" "${CI_PROJECT_DIR}/platform-manifest/usr/manifest.json" "${CI_PROJECT_DIR}/cve-reports/platform.html"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/cve-reports"
  only:
    - gnome-3-32

track:
  <<: *x86_64
  stage: track
  script:
    - ${BST} track --deps all core.bst flatpak-runtimes.bst
  retry: 2
  # only run on branches targeting master
  only:
    variables:
      - $FLATPAK_BRANCH == 'master'
  artifacts:
    when: always
    paths:
      - logs
      - project.refs


build-gnome-core-x86_64:
  extends: .build-template
  <<: *x86_64

build-gnome-core-i386:
  extends: .build-template
  <<: *i686

build-gnome-core-aarch64:
  extends: .build-template
  <<: *aarch64

build-gnome-core-arm:
  extends: .build-template
  <<: *arm


flathub-prepare:
  stage: prepare_flatpak
  script:
    - flat-manager/flat-manager-client create $FLAT_MANAGER_SERVER stable > build.txt
  artifacts:
    paths:
      - build.txt
  only:
    - /^gnome-\d-\d\d$/
  <<: *x86_64


flatpak-nightly-x86_64:
  extends: .flatpak-nightly-template
  <<: *x86_64

flatpak-nightly-i386:
  extends: .flatpak-nightly-template
  <<: *i686

flatpak-nightly-aarch64:
  extends: .flatpak-nightly-template
  <<: *aarch64

flatpak-nightly-arm:
  extends: .flatpak-nightly-template
  <<: *arm


flatpak-stable-x86_64:
  extends: .flatpak-stable-template
  <<: *x86_64

flatpak-stable-i386:
  extends: .flatpak-stable-template
  <<: *i686

flatpak-stable-aarch64:
  extends: .flatpak-stable-template
  <<: *aarch64

flatpak-stable-arm:
  extends: .flatpak-stable-template
  <<: *arm


flatpak-emergency-x86_64:
  extends: .flatpak-emergency-template
  <<: *x86_64

flatpak-emergency-i386:
  extends: .flatpak-emergency-template
  <<: *i686

flatpak-emergency-aarch64:
  extends: .flatpak-emergency-template
  <<: *aarch64

flatpak-emergency-arm:
  extends: .flatpak-emergency-template
  <<: *arm


flathub-finish:
  stage: finish_flatpak
  script:
    # the `|| true` is to work around instability in the flathub infrastructure
    # https://github.com/flatpak/flat-manager/issues/2
    - flat-manager/flat-manager-client commit --wait $(cat build.txt) || true
    - flat-manager/flat-manager-client publish --wait $(cat build.txt) || true
    - flat-manager/flat-manager-client purge $(cat build.txt)
  only:
    - /^gnome-\d-\d\d$/
  <<: *x86_64

flathub-finish-failed:
  stage: finish_flatpak
  script:
    - flat-manager/flat-manager-client purge $(cat build.txt)
  when: on_failure
  only:
    - /^gnome-\d-\d\d$/
  <<: *x86_64
