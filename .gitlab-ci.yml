variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST: "bst --config build.conf --log-file logs/build.log --colors"
  BST_SHA: '301a393cb6499b3f869d74827a9e8dc61b97d00e' #  1.1.7
  BST_EXTERNAL_SHA: '1622d57dfbde94f6cee84e1d8dfd430c86040251' # 0.3.1
  BST_RELEASES_SERVER_ADDRESS: 'gbm.gnome.org'
  FLATPAK_BRANCH: master

stages:
  - build
  - publish_x86_64
  - publish_i586
  - publish_aarch64
  - publish_arm


# Store all the downloaded git and ostree repos in the cache.
# This saves us fetching them on every build
cache:
  key: bst
  paths:
    - "${XDG_CACHE_HOME}/buildstream/sources/"


before_script:
  # Remove any installed buildstream binary
  - pip3 uninstall -y buildstream

  # Use specific version of BuildStream
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream/ checkout $BST_SHA
  - pip3 install buildstream/

  # install bst-external nedded for the flatpak_image plugin
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external/ checkout $BST_EXTERNAL_SHA
  - pip3 install bst-external/

  # and flatpak to export the flatpak runtimes
  - dnf install -y flatpak

  # install gpg to sign the ostree artifacts
  - dnf install -y gpg

  # Ensure the log directory exists
  - mkdir -p logs

  # Create ~/.ssh for storing keys
  - mkdir -p ~/.ssh

  # Private key stored as a protected variable that allows pushing to
  # gbm.gnome.org
  # FIXME: Protect the key
  - |
    if [ -z "${GITLAB_SSH_KEY" ]; then
        echo >&2 "Private key for gbm.gnome.org is not available."
    else
        echo "${GITLAB_SSH_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    fi

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
          url: https://cache.gitlab.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

.build-template: &build
  stage: build
  dependencies: []
  script:
    - ${BST} -o arch "${ARCH}" build --track-all core.bst flatpak-runtimes.bst

    # Clone the gbm OSTree repo locally
    - ostree init --repo=repo --mode=archive-z2
    - ostree remote add --repo=repo origin "https://${BST_RELEASES_SERVER_ADDRESS}/repo/" --no-gpg-verify
    - ostree pull --repo=repo origin --mirror

    # Build the runtimes
    - |
      mkdir runtimes

      for runtime in platform platform-locale sdk sdk-debug sdk-docs sdk-locale; do
        bst -o arch "${ARCH}" checkout --hardlinks "flatpak/${runtime}.bst" "runtimes/${runtime}"
        flatpak build-export --arch="${ARCH}" --files=files repo/ "runtimes/${runtime}" "${FLATPAK_BRANCH}"
      done

    # push the resulting runtimes to gbm.gnome.org
    # FIXME: Only push from protected branches
    - export OSTREE_PUSH_SHA='9aa82b67325786a810653155b952a17b7ccc436a'
    - git clone https://github.com/ssssam/ostree-push.git
    - git -C ostree-push/ checkout "${OSTREE_PUSH_SHA}"
    # Trust the host key of the release server.
    - ssh-keyscan "${BST_RELEASES_SERVER_ADDRESS}" >> ~/.ssh/known_hosts
    - ostree-push/ostree-push --repo=repo ssh://gbm@"${BST_RELEASES_SERVER_ADDRESS}"

  # Store all the downloaded git and ostree repos in the distributed cache.
  # This saves us fetching them from the different repos and further afield
  # on every build.
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
      - logs
      - project.refs

build-gnome-core-x86_64:
  image: buildstream/buildstream-fedora:master-113-499df6a5
  <<: *build
  tags:
    - do
  variables:
    ARCH: x86_64

build-gnome-core-i386:
  image: buildstream/buildstream-fedora:master-113-499df6a5
  <<: *build
  tags:
    - do
  variables:
    ARCH: i386
  allow_failure: true

build-gnome-core-aarch64:
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *build
  tags:
    - aarch64
  variables:
    ARCH: aarch64
  allow_failure: true

build-gnome-core-arm:
  image: buildstream/buildstream-fedora:aarch64-master-113-499df6a5
  <<: *build
  tags:
    - armhf
  variables:
    ARCH: arm
  allow_failure: true
