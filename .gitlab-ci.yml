include: .gitlab-ci/arch.yml

variables:
  GET_SOURCES_ATTEMPTS: 3
  BST_NO_PUSH: "bst --config $CI_PROJECT_DIR/.gitlab-ci/buildstream-nopush.conf --log-file $CI_PROJECT_DIR/logs/build.log --colors"

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_IMAGE_ID: "52cf1bc4bbb101392b550d9c64770ceedfd0ba21"

stages:
- build
- deploy

workflow:
  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedules" || $CI_PIPELINE_SOURCE == "web"'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
    when: never
  - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"'
  - if: '$CI_COMMIT_TAG'

default:
  image: "${DOCKER_REGISTRY}/bst2:${DOCKER_IMAGE_ID}"
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - echo "$CASD_CLIENT_CERT" > client.crt
  - echo "$CASD_CLIENT_KEY" > client.key
  - make -C files/boot-keys generate-keys IMPORT_MODE=snakeoil

  retry:
    max: 2
    when:
    - 'runner_system_failure'
    - 'stuck_or_timeout_failure'
    - 'scheduler_failure'
    - 'api_failure'

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  interruptible: true
  script:
  - TARGETS=(core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst flatpak-platform-extensions-extra.bst flatpak/platform-manifest.bst flatpak/sdk-manifest.bst oci/platform.bst oci/sdk.bst oci/core.bst)

  - |
    case "${ARCH}" in
      aarch64)
         TARGETS+=(vm/filesystem.bst vm/filesystem-devel.bst)
         ;;
      x86_64)
         TARGETS+=(vm/repo.bst vm/repo-devel.bst)
         ;;
      i686)
         TARGETS=(flatpak-runtimes.bst flatpak-platform-extensions.bst flatpak-platform-extensions-extra.bst)
         ;;
    esac

  - |
    case "${ARCH}" in
      aarch64|x86_64)
        TARGETS+=(vm-secure/build-non-images.bst)
        ;;
    esac

  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${TARGETS[@]}"

  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '2 days'

.manual-image-template:
  stage: deploy
  when: manual
  allow_failure: true
  script:
  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${IMAGE}"
  - ${BST_NO_PUSH} -o arch "${ARCH}" artifact checkout --hardlinks "${IMAGE}" --directory image
  artifacts:
    when: always
    paths:
    - image
    expire_in: '2 days'

.manual-sysupdate-image-template:
  stage: deploy
  when: manual
  allow_failure: true
  script:
  - ${BST_NO_PUSH} -o arch "${ARCH}" --max-jobs $(( $(nproc) / 4 )) -o secure_image_installer true  build vm-secure/image.bst vm-secure/update-images.bst iso/image.bst
  - ${BST_NO_PUSH} -o arch "${ARCH}" artifact checkout --hardlinks vm-secure/image.bst --directory image/
  - ${BST_NO_PUSH} -o arch "${ARCH}" artifact checkout --hardlinks vm-secure/update-images.bst --directory update-images/
  - ${BST_NO_PUSH} -o arch "${ARCH}" -o secure_image_installer true artifact checkout --hardlinks iso/image.bst --directory iso/
  artifacts:
    when: always
    paths:
    - image
    - update-images
    - iso
    expire_in: '2 days'

.manual-sysupdate-update-images-user-only-template:
  stage: deploy
  when: manual
  allow_failure: true
  script:
  - ${BST_NO_PUSH} -o arch "${ARCH}" --max-jobs $(( $(nproc) / 4 )) -o secure_image_installer true build vm-secure/update-images-user-only.bst
  - ${BST_NO_PUSH} -o arch "${ARCH}" artifact checkout --hardlinks vm-secure/update-images-user-only.bst --directory update-images/
  artifacts:
    when: always
    paths:
    - update-images
    expire_in: '2 days'

#
# Stage: build
#

build-x86_64:
  extends:
  - .build-template
  - .x86_64

#
# Stage: deploy
#

vm-image-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  needs:
  - job: 'build-x86_64'
    artifacts: false
  variables:
    IMAGE: vm/image.bst

iso-installer-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  variables:
    IMAGE: iso/image.bst
  needs:
  - job: 'build-x86_64'
    artifacts: false

sysupdate-image-x86_64:
  extends:
  - .manual-sysupdate-image-template
  - .x86_64
  when: always
  needs:
  - job: 'build-x86_64'
    artifacts: false

sysupdate-update-images-user-only-x86_64:
  extends:
  - .manual-sysupdate-update-images-user-only-template
  - .x86_64
  when: always
  needs:
  - job: 'build-x86_64'
    artifacts: false
