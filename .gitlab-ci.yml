include:
- local: ".gitlab-ci/arch.yml"
- component: "gitlab.gnome.org/GNOME/citemplates/release-service@master"
  inputs:
    job-stage: "deploy"
    dist-job-name: "make-git-archive"
    tarball-artifact-path: "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.xz"

variables:
  GET_SOURCES_ATTEMPTS: 3
  BST_NO_PUSH: "bst --config $CI_PROJECT_DIR/.gitlab-ci/buildstream-nopush.conf --log-file $CI_PROJECT_DIR/logs/build.log --colors"
  BST: "bst --config $CI_PROJECT_DIR/.gitlab-ci/buildstream.conf --log-file $CI_PROJECT_DIR/logs/build.log --colors"
  # This mirrors the project.conf
  # OCI_BRANCH is like branch and the tag that we use in the images
  # FLATPAK_BRANCH is branch+qualifier (ex. 46beta)
  OCI_BRANCH: master
  FLATPAK_BRANCH: master

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_IMAGE_ID: "4ca1a6d1845dbbf157446c9b2ac5197bd4d7fb73"

  # RUN_THIS_STAGE_ONLY: "track-refs"

stages:
- track-refs
- build
- deploy
- test
- reports

.stage-only-rules:
  rules:
    # Allow forcing a specific stage to run, useful for scheduled pipelines to save up runners.
    # Set this to the stage you want to trigger in a scheduled pipeline
    # Example: RUN_THIS_STAGE_ONLY="track-refs"
  - if: $RUN_THIS_STAGE_ONLY != null && $RUN_THIS_STAGE_ONLY != $CI_JOB_STAGE
    when: never
  - if: $RUN_THIS_STAGE_ONLY != null && $RUN_THIS_STAGE_ONLY == $CI_JOB_STAGE

# Rebuild only when elements changed.
.run_in_mr_build:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          # Buildstream
          - "elements/**/*"
          - "files/**/*"
          - "include/**/*"
          - "keys/**/*"
          - "patches/**/*"
          - "plugins/**/*"
          - "project.conf"
          - ".gitlab-ci.yml"

workflow:
  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedules" || $CI_PIPELINE_SOURCE == "web"'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
    when: never
  - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"'
  - if: '$CI_COMMIT_TAG'

default:
  image: "${DOCKER_REGISTRY}/bst2:${DOCKER_IMAGE_ID}"
  before_script:
  - |
    . "$CI_PROJECT_DIR/.gitlab-ci/scripts/global-before-script.sh"
  retry:
    max: 2
    when:
    - 'runner_system_failure'
    - 'stuck_or_timeout_failure'
    - 'scheduler_failure'
    - 'api_failure'

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  interruptible: true
  rules:
  - !reference [".stage-only-rules", "rules"]
  - !reference [".run_in_mr_build", "rules"]
  # We want still execute by default even if neither of the stage rules match.
  # If we add a when: always/on_success rule it has the chance of triggering when we don't
  # expect it due to how gitlab behaves, so use a variable that will always exist
  # as a fake: always kind of rule
  - if: "$CI_COMMIT_REF_NAME"
  script:
  - $CI_PROJECT_DIR/.gitlab-ci/scripts/build_elements.sh
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '1 week'

.manual-image-template:
  stage: deploy
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: "$CI_COMMIT_REF_NAME"
    when: manual
    allow_failure: true
  script:
  - ${BST_NO_PUSH} ${ARCH_OPT} build "${IMAGE}"
  - ${BST} ${ARCH_OPT} artifact checkout --hardlinks "${IMAGE}" --directory image
  artifacts:
    when: always
    paths:
    - image
    expire_in: '2 days'

.deploy-rules:
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/ && $CI_PIPELINE_SOURCE != "schedule"

.test-phone-image-template:
  extends:
  - .aarch64
  stage: test
  needs:
    artifacts: true
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: "$CI_COMMIT_REF_NAME"
    when: manual
    allow_failure: true
  before_script:
  - dd if=/dev/zero of=flash1.img bs=1M count=64
  - dd if=/dev/zero of=flash0.img bs=1M count=64
  - dd if=/usr/share/qemu/edk2-aarch64-code.fd of=flash0.img conv=notrunc

  - mv $(pwd)/image/disk.img.xz ./disk.img.xz
  - unxz -T$(nproc) disk.img.xz

.test-openqa-template:
  stage: test
  image:
    name: registry.opensuse.org/devel/openqa/containers15.6/openqa_worker:latest
    entrypoint: ["/bin/bash", "-c"]
  extends: ".x86_64"
  # Not all our build runners have the required KVM setup to also run openQA atm
  tags:
  - openqa
  # We also need to copy the tags from the arch template as they
  # don't get merged
  # And !reference doesn't work for tags
  # https://gitlab.com/gitlab-org/gitlab/-/issues/344455
  - x86_64
  - gnome-build-meta
  variables:
    # CI needs to be set so OPENQA_TEST_TIMEOUT_SCALE_CI has an effect.
    CI: 1
    OPENQA_HOST: https://openqa.gnome.org
    OPENQA_NEEDLES_BRANCH: master
    OPENQA_NEEDLES_GIT: https://gitlab.gnome.org/gnome/openqa-needles
    OPENQA_TEST_TIMEOUT_SCALE_CI: 4
    OPENQA_UTILS_BRANCH: main
    OPENQA_UTILS_GIT: https://gitlab.gnome.org/gnome/openqa-utils
  rules:
    - !reference [".stage-only-rules", "rules"]
    # Run the OpenQA tests against the image built
    - !reference [".run_in_mr_build", "rules"]
    # Run openQA tests against a prebuilt live image, if the
    # changes are only in openqa files.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      needs: []
      changes:
        paths:
          - ".gitlab-ci/scripts/openqa-prepare.sh"
          - ".gitlab-ci/scripts/openqa-script.sh"
          - "tests/openqa/**/*"
          - ".gitlab-ci.yml"
      variables:
        S3_DISK_IMAGE_URL: "https://os.gnome.org/download/latest/live_x86_64.iso"
  timeout: '90m'
  needs:
  - job: 's3-image'
    artifacts: false
  before_script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/openqa-prepare.sh"
  script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/openqa-script.sh"
  after_script:
  - |
    if [ ! -e /tmp/exit_code ]; then
        echo "Job creation failed, log below."
        cat openqa.log
    fi
  - tests/openqa/utils/openqa_junit_report.py $(cat /tmp/all_job_ids) > ./junit.xml
  artifacts:
    when: always
    paths:
    - junit.xml
    - openqa.log
    - worker.log
    reports:
      junit: junit.xml
    expire_in: '1 week'

#
# "Real" CI jobs
#

build-x86_64:
  extends:
  - .build-template
  - .x86_64

build-aarch64:
  extends:
  - .build-template
  - .aarch64

deploy-flatpak:
  extends: .x86_64
  stage: deploy
  needs:
  - job: 'build-x86_64'
    artifacts: false
  - job: 'build-aarch64'
    artifacts: false
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master"
    variables:
      FLAT_MANAGER_SERVER: https://flat-manager.gnome.org/
      ENVIRONMENT_NAME: flatpak-nightly
      FLAT_MANAGER_REPO: nightly
      SUPPORTED_ARCHES: "x86_64 aarch64"
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/ && $FLATPAK_BRANCH =~ /beta$/
    variables:
      FLAT_MANAGER_SERVER: https://hub.flathub.org/
      ENVIRONMENT_NAME: flathub/$FLATPAK_BRANCH
      FLAT_MANAGER_REPO: beta
      SUPPORTED_ARCHES: "x86_64 aarch64"
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/
    variables:
      FLAT_MANAGER_SERVER: https://hub.flathub.org/
      ENVIRONMENT_NAME: flathub/$FLATPAK_BRANCH
      FLAT_MANAGER_REPO: stable
      SUPPORTED_ARCHES: "x86_64 aarch64"
  variables:
    RUNNER_AFTER_SCRIPT_TIMEOUT: 20m
    TARGETS: flatpak-runtimes.bst
    TARGETS_nightly: 'flatpak-platform-extensions.bst'
    TARGETS_beta: ''
    TARGETS_stable: ''
  script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/deploy-flatpak.sh"
  after_script:
  - flat-manager-client --token-file "${REPO_TOKEN_FILE}" purge $(cat build.txt)
  environment:
    name: $ENVIRONMENT_NAME

deploy-oci:
  stage: deploy
  extends:
  - .x86_64
  rules:
  - !reference [.deploy-rules, rules]
  needs:
  - job: 'build-x86_64'
    artifacts: false
  # Sometimes podman push will timeout
  retry: 2
  script:
  - ${BST_NO_PUSH} ${ARCH_OPT} build oci/platform.bst oci/sdk.bst oci/core.bst
  - ${BST} ${ARCH_OPT} artifact checkout --tar - oci/platform.bst | podman load
  - ${BST} ${ARCH_OPT} artifact checkout --tar - oci/sdk.bst | podman load
  - ${BST} ${ARCH_OPT} artifact checkout --tar - oci/core.bst | podman load
  - |
    if [ -n "$OCI_REGISTRY_PASSWORD" ] && [ "${CI_COMMIT_REF_PROTECTED-}" = true ]; then
        ./.gitlab-ci/scripts/publish-oci-quay.sh
    fi

pinephone-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: "build-aarch64"
    artifacts: false
  variables:
    IMAGE: boards/pinephone/image.bst

pinephone-pro-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: "build-aarch64"
    artifacts: false
  variables:
    IMAGE: boards/pinephone-pro/image.bst

live-image-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  variables:
    IMAGE: gnomeos/live-image.bst
  needs:
  - job: 'build-x86_64'
    artifacts: false

live-image-aarch64:
  extends:
  - .manual-image-template
  - .aarch64
  variables:
    IMAGE: gnomeos/live-image.bst
  needs:
  - job: 'build-aarch64'
    artifacts: false

.s3-image:
  rules:
  - !reference [.deploy-rules, rules]
  - if: '$CI_COMMIT_TAG'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ARCH == "x86_64"'
  # Also allow to manually trigger it for normal branches
  - if: '$CI_COMMIT_REF_NAME'
    when: manual
    allow_failure: true
  stage: deploy
  script:
  - ${BST_NO_PUSH} ${ARCH_OPT} build gnomeos/live-image.bst gnomeos/update-images.bst

  - ${BST} ${ARCH_OPT} artifact checkout --hardlinks gnomeos/live-image.bst --directory live-image/
  - ${BST} ${ARCH_OPT} artifact checkout --hardlinks gnomeos/update-images.bst --directory update-images/

  - ./.gitlab-ci/scripts/publish-s3-image.sh
  - |
    if [ "${CI_COMMIT_REF_PROTECTED-}" = true ]; then
        ./.gitlab-ci/scripts/publish-sysupdate-to-s3.sh
    fi

s3-image:
  extends:
  - ".x86_64"
  - ".s3-image"
  needs:
  - job: 'build-x86_64'
    artifacts: false

s3-image-aarch64:
  extends:
  - ".aarch64"
  - ".s3-image"
  stage: deploy
  needs:
  - job: 'build-aarch64'
    artifacts: false

s3-image-static:
  extends: .arch-indep
  stage: reports
  needs:
  - job: s3-image
    artifacts: false
  - job: s3-image-aarch64
    artifacts: false
  - job: test-openqa-installer
    artifacts: false
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"
    when: manual
    needs:
    - job: s3-image
      artifacts: false
  - if: $CI_COMMIT_REF_NAME == "master"
    when: on_success
  script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/publish-s3-static.sh" "$CI_PIPELINE_ID"
  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/


s3-image-static-stable:
  extends: .arch-indep
  stage: reports
  needs:
  - job: s3-image
    artifacts: false
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_TAG
  script:
  # For 47.x tag use 47 branch
  - branch=$(echo $CI_COMMIT_TAG | cut -d . -f 1)

  - echo tag/$CI_COMMIT_TAG/live_${CI_COMMIT_TAG}-x86_64.iso > stable-$branch-x86_64-iso
  - echo tag/$CI_COMMIT_TAG/live_${CI_COMMIT_TAG}-aarch64.iso > stable-$branch-aarch64-iso

  - aws s3 cp --acl public-read stable-$branch-x86_64-iso s3://gnome-build-meta/stable-$branch-x86_64-iso
  - aws s3 cp --acl public-read stable-$branch-aarch64-iso s3://gnome-build-meta/stable-$branch-aarch64-iso
  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/


cve_report:
  extends: .aarch64
  stage: 'deploy'
  needs:
  - job: 'build-aarch64'
    artifacts: false
  script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/cve-report.sh"
  cache:
    key: cve
    paths:
    - cve
  artifacts:
    paths:
    - cve-reports
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/
  - if: $CI_COMMIT_REF_NAME != "master"
    when: "manual"
    allow_failure: true

test-openqa-installer:
  extends:
  - .test-openqa-template
  variables:
    TESTSUITES: "gnome_install"
  rules:
  - !reference [".test-openqa-template", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_TAG

test-openqa-desktop:
  extends:
  - .test-openqa-template
  variables:
    TESTSUITES: "gnome_apps gnome_accessibility gnome_mobile gnome_locales"
  rules:
  - !reference [".test-openqa-template", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_TAG
  allow_failure: true

test-pinephone-aarch64:
  extends:
  - .test-phone-image-template
  script:
  - python3 utils/test_phone_image.py test-pinephone-aarch64
  needs:
  - job: "pinephone-image"

test-pinephone-pro-aarch64:
  extends:
  - .test-phone-image-template
  script:
  - python3 utils/test_phone_image.py test-pinephone-pro-aarch64
  needs:
  - job: "pinephone-pro-image"

.bot-ssh:
  variables:
    SSH_SERVER_HOSTKEYS: "ssh.gitlab.gnome.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHG6b3deoYMPwKEu9Sj+y6MBHYYUKQiAnta/go3aNv7R"
  after_script:
  - rm -rf ~/.ssh

update_refs:
  extends:
  - .x86_64
  - .bot-ssh
  stage: "track-refs"
  timeout: '90m'
  rules:
  - !reference [".stage-only-rules", "rules"]
  script:
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/ci-bot-track-refs.sh"
  # Fetch the sources and push them into the source cache
  - ${BST} source push --deps all flatpak-runtimes.bst gnomeos/build-non-images.bst gnomeos/live-image.bst


update_mimeapps:
  extends:
  - .x86_64
  - .bot-ssh
  stage: deploy
  rules:
  - !reference [".stage-only-rules", "rules"]
  # Ideally we'd also be updating the stable branches of gnome-session,
  # But until then, only have the job run for nightly.
  # Use FLATPAK_BRANCH as a shortcut to figure out what branch we
  # are targetting atm, since we don't expose the branch from project.conf
  - if: $FLATPAK_BRANCH == "master"
  needs:
  - job: 'build-x86_64'
    artifacts: false
  script:
  - ${BST_NO_PUSH} ${ARCH_OPT} build gnomeos-deps/gnome-mimeapps.bst
  - ${BST} ${ARCH_OPT} artifact checkout --directory out gnomeos-deps/gnome-mimeapps.bst
  - mv out/usr/share/applications/gnome-mimeapps.list ./gnome-mimeapps.list
  - bash "$CI_PROJECT_DIR/.gitlab-ci/scripts/ci-bot-update-mimeapps.sh"

pages:
  stage: 'reports'
  needs:
  - job: 'cve_report'
    artifacts: true
  script:
  - mkdir -p public/master/
  - mv cve-reports/ public/master/
  - python3 .gitlab-ci/scripts/download_cve_reports.py
  - python3 .gitlab-ci/scripts/generate_release_contents.py
  artifacts:
    paths:
    - 'public'
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_REF_NAME == "master"

make-git-archive:
  stage: "deploy"
  needs:
  - job: 'build-x86_64'
    artifacts: false
  - job: 'build-aarch64'
    artifacts: false
  before_script: []
  script:
  - version=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
  - git archive --prefix gnome-$version/ -o ${CI_PROJECT_NAME}-$version.tar $version
  - xz ${CI_PROJECT_NAME}-$version.tar
  rules:
  - !reference [".stage-only-rules", "rules"]
  - if: $CI_COMMIT_TAG
  - if: $CI_COMMIT_SHORT_SHA
    when: "manual"
    allow_failure: true
  artifacts:
    expire_in: "2 days"
    paths:
    - "*.tar.xz"
