include: .gitlab-ci/arch.yml

variables:
  GET_SOURCES_ATTEMPTS: 3
  BST_NO_PUSH: "bst --config .gitlab-ci/buildstream-nopush.conf --log-file logs/build.log --colors"
  BST: "bst --config .gitlab-ci/buildstream.conf --log-file logs/build.log --colors"
  FLATPAK_BRANCH: '44'
  OPENQA_HOST: https://openqa.gnome.org
  OPENQA_TESTS_GIT: https://gitlab.gnome.org/gnome/openqa-tests
  OPENQA_TESTS_BRANCH: master
  OPENQA_NEEDLES_GIT: https://gitlab.gnome.org/gnome/openqa-needles
  OPENQA_NEEDLES_BRANCH: master

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_IMAGE_ID: "2e5978e92d15e501923042d5d56d7da72eb26564"

stages:
- track
- build
- deploy-config
- deploy
- test
- reports

workflow:
  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedules" || $CI_PIPELINE_SOURCE == "web"'
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
    when: never
  - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"'
  - if: '$CI_COMMIT_TAG'

default:
  image: "${DOCKER_REGISTRY}/bst16:${DOCKER_IMAGE_ID}"
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - echo "$CASD_CLIENT_CERT" > client.crt
  - echo "$CASD_CLIENT_KEY" > client.key

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  interruptible: true
  script:
  - TARGETS=(core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst flatpak-platform-extensions-extra.bst flatpak/platform-manifest.bst flatpak/sdk-manifest.bst oci/debug.bst oci/platform.bst oci/sdk.bst)

  - |
    case "${ARCH}" in
      aarch64)
         TARGETS+=(vm/filesystem.bst vm/filesystem-devel.bst)
         ;;
      x86_64)
         TARGETS+=(vm/repo.bst vm/repo-devel.bst)
         ;;
      i686)
         TARGETS=(flatpak-runtimes.bst flatpak-platform-extensions.bst flatpak-platform-extensions-extra.bst)
         ;;
    esac

  - ${BST} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${TARGETS[@]}"

  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '1 week'

.manual-image-template:
  stage: deploy
  when: manual
  allow_failure: true
  script:
  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${IMAGE}"
  - ${BST} -o arch "${ARCH}" checkout --hardlinks "${IMAGE}" image
  artifacts:
    when: always
    paths:
    - image
    expire_in: '2 days'

.deploy-rules:
  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/ && $CI_PIPELINE_SOURCE != "schedule"

.ostree-template:
  extends: .deploy-rules
  stage: deploy
  script:
  - |
    export FLAT_MANAGER_SERVER=https://flat-manager-ostree.gnome.org/
    export FLAT_MANAGER_REPO=gnomeos
    export REPO_TOKEN=$OSTREE_REPO_TOKEN

  - ostree init --repo repo/ --mode archive

  - ${BST} -o arch "${ARCH}" pull vm/repo.bst vm/repo-devel.bst

  - |
    for element in vm/repo.bst vm/repo-devel.bst; do
        ${BST} -o arch "${ARCH}" checkout --hardlinks $element checkout-repo/
        ostree pull-local --repo=repo/ checkout-repo/
        rm -rf checkout-repo/
    done

  - BUILD_ID=$(flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO)
  - flat-manager-client push --commit --publish --wait $BUILD_ID repo/ $(ostree --repo=repo/ refs) || result=$?
  - flat-manager-client purge $BUILD_ID
  - exit $result

.test-phone-image-template:
  stage: test
  when: manual
  needs:
    artifacts: true
  before_script:
  - dd if=/dev/zero of=flash1.img bs=1M count=64
  - dd if=/dev/zero of=flash0.img bs=1M count=64
  - dd if=/usr/share/qemu/edk2-aarch64-code.fd of=flash0.img conv=notrunc

  - mv $(pwd)/image/disk.img.xz ./disk.img.xz
  - unxz -T$(nproc) disk.img.xz
  tags:
  - aarch64
  - gnome-build-meta

#
# "Real" CI jobs
#

build-x86_64:
  extends:
  - .build-template
  - .x86_64

build-i386:
  extends:
  - .build-template
  - .i686

build-aarch64:
  extends:
  - .build-template
  - .aarch64


generate-deploy-config:
  extends:
  - .arch-indep
  needs:
  - job: 'build-x86_64'
    artifacts: false
  - job: 'build-i386'
    artifacts: false
  - job: 'build-aarch64'
    artifacts: false
  stage: deploy-config
  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
    variables:
      FLAT_MANAGER_SERVER: https://flat-manager.gnome.org/
      ENVIRONMENT_NAME: flatpak-nightly
      FLAT_MANAGER_REPO: nightly
      SUPPORTED_ARCHES: "x86_64 i686 aarch64"
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/ && $FLATPAK_BRANCH =~ /beta^/
    variables:
      FLAT_MANAGER_SERVER: https://hub.flathub.org/
      ENVIRONMENT_NAME: flathub/$FLATPAK_BRANCH
      FLAT_MANAGER_REPO: beta
      SUPPORTED_ARCHES: "x86_64 i686 aarch64"
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/
    variables:
      FLAT_MANAGER_SERVER: https://hub.flathub.org/
      ENVIRONMENT_NAME: flathub/$FLATPAK_BRANCH
      FLAT_MANAGER_REPO: beta
      SUPPORTED_ARCHES: "x86_64 i686 aarch64"
  script:
  - |
    cat > flatpak-variables.yml << END
    variables:
      BST: '$BST'
      FLAT_MANAGER_SERVER: '$FLAT_MANAGER_SERVER'
      FLAT_MANAGER_REPO: '$FLAT_MANAGER_REPO'
      TARGETS: flatpak-runtimes.bst
      TARGETS_nightly: 'flatpak-platform-extensions.bst flatpak-platform-extensions-extra.bst'
      ENVIRONMENT_NAME: '$ENVIRONMENT_NAME'
      DOCKER_REGISTRY: '$DOCKER_REGISTRY'
      DOCKER_IMAGE_ID: '$DOCKER_IMAGE_ID'
      SUPPORTED_ARCHES: '$SUPPORTED_ARCHES'

    END
  - cat flatpak-variables.yml .gitlab-ci/flat-manager.yml > flatpak-deploy.yml

  artifacts:
    paths:
    - flatpak-deploy.yml

deploy-flatpak:
  extends: .deploy-rules
  stage: deploy
  trigger:
    strategy: depend
    include:
    - artifact: flatpak-deploy.yml
      job: generate-deploy-config

vm-image-aarch64:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: vm/image.bst

vm-image-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  needs:
  - job: 'build-x86_64'
    artifacts: false
  variables:
    IMAGE: vm/image.bst

pinebook-pro-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/pinebook-pro/image.bst

pinephone-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: "build-aarch64"
    artifacts: false
  variables:
    IMAGE: boards/pinephone/image.bst

pinephone-pro-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: "build-aarch64"
    artifacts: false
  variables:
    IMAGE: boards/pinephone-pro/image.bst

rock64-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/rock64/image.bst

raspberrypi-4-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/raspberrypi-4/image.bst

iso-installer-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  variables:
    IMAGE: iso/image.bst
  needs:
  - job: 'build-x86_64'
    artifacts: false

s3-image:
  extends: .x86_64
  stage: deploy
  needs:
  - job: 'build-x86_64'
    artifacts: false
  script:
  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build vm/image.bst iso/image.bst
  - ${BST} -o arch "${ARCH}" checkout --hardlinks vm/image.bst image
  - ${BST} -o arch "${ARCH}" checkout --hardlinks iso/image.bst iso

  - |
    if [ -n "$CI_COMMIT_TAG" ]; then
        aws s3 cp --acl public-read iso/installer.iso \
            s3://gnome-build-meta/tag/$CI_COMMIT_TAG/gnome_os_installer_$CI_COMMIT_TAG.iso
    else
        aws s3 cp --acl public-read image/disk.img.xz \
            s3://gnome-build-meta/nightly/$CI_PIPELINE_ID/disk_$CI_PIPELINE_ID.img.xz
        aws s3 cp --acl public-read iso/installer.iso \
            s3://gnome-build-meta/nightly/$CI_PIPELINE_ID/gnome_os_installer_$CI_PIPELINE_ID.iso
    fi

  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/

  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_TAG

openh264-x86_64:
  extends:
  - .x86_64
  stage: deploy
  needs: []
  allow_failure: true
  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
    when: manual
  script:
  - git clone https://gitlab.com/freedesktop-sdk/openh264-extension.git
  - cd openh264-extension
  - bst build flatpak-repo.bst
  - bst checkout flatpak-repo.bst repo
  - BUILD_ID=$(flat-manager-client create https://nightly.gnome.org/ nightly)
  - flat-manager-client push --commit --publish --wait $BUILD_ID repo/ $(ostree --repo=repo/ refs) || result=$?
  - flat-manager-client purge $BUILD_ID
  - exit $result


s3-image-static:
  extends: .arch-indep
  stage: reports
  needs:
  - job: s3-image
    artifacts: false
  allow_failure: true
  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
    when: manual
  script:
  - |
    echo nightly/$CI_PIPELINE_ID/gnome_os_installer_$CI_PIPELINE_ID.iso > latest-iso
    echo nightly/$CI_PIPELINE_ID/disk_$CI_PIPELINE_ID.img.xz > latest-disk
  - |
    aws s3 cp --acl public-read latest-iso s3://gnome-build-meta/latest-iso
    aws s3 cp --acl public-read latest-disk s3://gnome-build-meta/latest-disk

  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/

ostree-x86_64:
  extends:
  - .ostree-template
  - .x86_64
  needs:
  - job: 'build-x86_64'
    artifacts: false


cve_report:
  extends: .x86_64
  stage: 'deploy'
  needs:
  - job: 'build-x86_64'
    artifacts: false
  script:
  - ${BST} pull flatpak/platform-manifest.bst flatpak/sdk-manifest.bst

  - ${BST} checkout flatpak/platform-manifest.bst platform-manifest/
  - ${BST} checkout flatpak/sdk-manifest.bst sdk-manifest/

  - mkdir -p cve
  - cd cve
  - ../utils/update-local-cve-database.py

  - mkdir -p ../cve-reports
  - python3 ../utils/generate-cve-report.py ../sdk-manifest/usr/manifest.json ../cve-reports/sdk.html
  - python3 ../utils/generate-cve-report.py ../platform-manifest/usr/manifest.json ../cve-reports/platform.html
  cache:
    key: cve
    paths:
    - cve
  artifacts:
    paths:
    - cve-reports
  rules:
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/


test-s3-image:
  stage: test
  image:
    name: registry.opensuse.org/devel/openqa/containers15.4/openqa_worker:latest
    entrypoint: ["/bin/bash", "-c"]
  variables:
    IMAGE: iso/image.bst
    # CI needs to be set so OPENQA_TEST_TIMEOUT_SCALE_CI has an effect.
    CI: 1
    OPENQA_TEST_TIMEOUT_SCALE_CI: 4
  needs:
  - job: 's3-image'
    artifacts: false
  script:
  - |
    git clone "$OPENQA_TESTS_GIT" --branch "$OPENQA_TESTS_BRANCH" ./openqa
    echo "Checked out $OPENQA_TESTS_GIT commit $(git -C ./openqa rev-parse HEAD)"
  - |
    if [ -n "$CI_COMMIT_TAG" ]; then
        curl --location https://os.gnome.org/download/${CI_COMMIT_TAG}/gnome_os_installer_${CI_COMMIT_TAG}.iso -o installer.iso
    else
        curl --location https://os.gnome.org/download/${CI_PIPELINE_ID}/gnome_os_installer_${CI_PIPELINE_ID}.iso -o installer.iso
    fi
    sha256sum ./installer.iso
  - |
    mkdir -p /data/factory/iso/
    ln -s $(pwd)/installer.iso /data/factory/iso/installer.iso
  - |
    rm /etc/openqa/*
    cat >/etc/openqa/client.conf <<EOF
    [openqa.gnome.org]
    key = $OPENQA_API_KEY
    secret = $OPENQA_API_SECRET
    EOF
  - |
    worker_class=qemu_x86_64-${CI_JOB_ID}
    openqa/utils/setup_worker.sh ${worker_class}
    /run_openqa_worker.sh &> worker.log &
  - |
    openqa/utils/start_job.sh ${worker_class} master "$(pwd)/openqa" > /tmp/job_id
    echo "Test job has been started, visit $OPENQA_HOST/tests/$(cat /tmp/job_id) to see the progress"
  - openqa/utils/wait_for_job.sh $(cat /tmp/job_id) > /tmp/exit_code
  - exit $(cat /tmp/exit_code)
  after_script:
  - |
    if [ ! -e /tmp/exit_code ]; then
        echo "Job creation failed, log below."
        cat openqa.log
  - fi
  artifacts:
    when: always
    paths:
    - openqa.log
    - worker.log
    expire_in: '1 week'
  tags:
  - x86_64
  - gnome-build-meta
  rules:
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_TAG
  allow_failure: true

test-pinephone-aarch64:
  extends:
  - .test-phone-image-template
  script:
  - python3 utils/test_phone_image.py test-pinephone-aarch64
  needs:
  - job: "pinephone-image"

test-pinephone-pro-aarch64:
  extends:
  - .test-phone-image-template
  script:
  - python3 utils/test_phone_image.py test-pinephone-pro-aarch64
  needs:
  - job: "pinephone-pro-image"

pages:
  stage: 'reports'
  needs:
  - job: 'cve_report'
    artifacts: true
  script:
  - 'mv cve-reports/ public/'
  artifacts:
    paths:
    - 'public'
  rules:
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/
