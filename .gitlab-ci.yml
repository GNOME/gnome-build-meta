variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST: "bst --config build.conf --log-file logs/build.log --colors"
  BST_SHA: '1.4.1-9-gc12c7f596f15842028a46fff0ad062b3b4e2988f'
  BST_EXTERNAL_SHA: '0.19.1-0-ge39a140f7a2cf128e382ffe9318580d3e8664976'
  FLAT_MANAGER_SHA: '0.3.5-0-g754f9aa3b539191da395a53b710df1051772eda1'
  FLATPAK_BRANCH: "3.30"
  FLATPAK_SERVER_ADDRESS: 'gbm.gnome.org'

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_IMAGE_ID: '1a534a96f9144ca8ee87cee1fef97faa7c396533'
  DOCKER_AMD64: "${DOCKER_REGISTRY}/bst14/amd64:${DOCKER_IMAGE_ID}"
  DOCKER_AARCH64: "${DOCKER_REGISTRY}/bst14/arm64:${DOCKER_IMAGE_ID}"

stages:
  - prepare_flatpak
  - flatpak
  - finish_flatpak
  - build


# Store all the downloaded git and ostree repos in the cache.
# This saves us fetching them on every build
cache:
  key: bst
  paths:
    - "${XDG_CACHE_HOME}/buildstream/sources/"


before_script:
  # Use specific version of BuildStream
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream/ checkout $BST_SHA
  - pip3 install buildstream/

  # install bst-external nedded for the flatpak_image plugin
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external/ checkout $BST_EXTERNAL_SHA
  - pip3 install bst-external/

  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
          url: https://cache.gitlab.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

  # flat-manager-client to push to flathub
  - git clone https://github.com/flatpak/flat-manager
  - git -C flat-manager/ checkout $FLAT_MANAGER_SHA

flathub-prepare:
  stage: prepare_flatpak
  script:
    - flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" create https://hub.flathub.org/ stable > build.txt
  artifacts:
    paths:
      - build.txt
  only:
    variables:
      - $FLATHUB_REPO_TOKEN
  image: $DOCKER_AARCH64
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm

flathub-finish:
  stage: finish_flatpak
  script:
    # the `|| true` is to work around instability in the flathub infrastructure
    - flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" commit --end-of-life="GNOME 3.30 runtime is no longer supported as of 27th January 2020. Please ask your application developer to migrate to a supported platform." --wait $(cat build.txt) || true
    - flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" publish --wait $(cat build.txt) || true
    - flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" purge $(cat build.txt)
  only:
    variables:
      - $FLATHUB_REPO_TOKEN
  image: $DOCKER_AARCH64
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm

flathub-finish-failed:
  stage: finish_flatpak
  script:
    - flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" purge $(cat build.txt)
  when: on_failure
  only:
    variables:
      - $FLATHUB_REPO_TOKEN
  image: $DOCKER_AARCH64
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm

.flatpak-template: &flatpak
  stage: flatpak
  script:
    - ${BST} -o arch "${ARCH}" build flatpak-runtimes.bst

    # checkout the runtimes
    - |
      for runtime in platform platform-locale sdk sdk-debug sdk-docs sdk-locale; do
        bst -o arch "${ARCH}" checkout --hardlinks "flatpak/${runtime}.bst" "runtimes/${runtime}"
        flatpak build-export --arch="${FLATPAK_ARCH}" --no-update-summary --files=files repo/ "runtimes/${runtime}" "${FLATPAK_BRANCH}"
      done

    - |
      if [ -n "$FLATHUB_REPO_TOKEN" ]; then
        flatpak build-update-repo --generate-static-deltas repo/
        flat-manager/flat-manager-client --token "$FLATHUB_REPO_TOKEN" push $(cat build.txt) repo/
      fi

  # Store all the downloaded git and ostree repos in the distributed cache.
  # This saves us fetching them from the different repos and further afield
  # on every build.
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
      - logs
      - project.refs

build-flatpak-runtimes-x86_64:
  image: $DOCKER_AMD64
  <<: *flatpak
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: x86_64
    FLATPAK_ARCH: x86_64

build-flatpak-runtimes-i386:
  image: $DOCKER_AMD64
  <<: *flatpak
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: i686
    FLATPAK_ARCH: i386

build-flatpak-runtimes-aarch64:
  image: $DOCKER_AARCH64
  <<: *flatpak
  tags:
    - aarch64
    - gnome-build-meta
  variables:
    ARCH: aarch64
    FLATPAK_ARCH: aarch64

build-flatpak-runtimes-arm:
  image: $DOCKER_AARCH64
  <<: *flatpak
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm
    FLATPAK_ARCH: arm

.build-template: &build
  stage: build
  dependencies: []
  script:
    - ${BST} -o arch "${ARCH}" build core.bst

  # Store all the downloaded git and ostree repos in the distributed cache.
  # This saves us fetching them from the different repos and further afield
  # on every build.
  cache:
    key: bst
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
      - logs
      - project.refs

build-gnome-core-x86_64:
  image: $DOCKER_AMD64
  <<: *build
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: x86_64

build-gnome-core-i386:
  image: $DOCKER_AMD64
  <<: *build
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: i686
  allow_failure: true

build-gnome-core-aarch64:
  image: $DOCKER_AARCH64
  <<: *build
  tags:
    - aarch64
    - gnome-build-meta
  variables:
    ARCH: aarch64
  allow_failure: true

build-gnome-core-arm:
  image: $DOCKER_AARCH64
  <<: *build
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm
  allow_failure: true
