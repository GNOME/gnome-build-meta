include: .gitlab-ci/arch.yml

variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_STRICT: '--no-strict'
  BST_TRACK_TAGS: 'False'
  BST_NO_PUSH: "bst $BST_STRICT --log-file logs/build.log --colors"
  BST: "bst $BST_STRICT --config build.conf --log-file logs/build.log --colors"
  FLATPAK_BRANCH: master

stages:
- track
- build
- image
- prepare_flatpak
- flatpak
- finish_flatpak
- ostree
- reports

default:
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
        - url: https://m1-xlarge-x86.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true

    sourcedir: /cache/buildstream/sources
    EOF

  - |
    case "$FLATPAK_BRANCH" in
      master)
        if [ -n "$NIGHTLY_REPO_TOKEN" ]; then
          export REPO_TOKEN=$NIGHTLY_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://nightly.gnome.org/
          export FLAT_MANAGER_REPO=nightly
        fi
      ;;
      *beta)
        if [ -n "$FLATHUB_BETA_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_BETA_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=beta
        fi
      ;;
      *)
        if [ -n "$FLATHUB_REPO_TOKEN" ]; then
          export REPO_TOKEN=$FLATHUB_REPO_TOKEN
          export FLAT_MANAGER_SERVER=https://hub.flathub.org/
          export FLAT_MANAGER_REPO=stable
        fi
      ;;
    esac

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  dependencies: [track]
  interruptible: true
  script:
  - TARGETS=(core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst platform-manifest.bst sdk-manifest.bst)

  - |
    case "${ARCH}" in
      aarch64)
         TARGETS+=(vm/filesystem.bst vm/filesystem-devel.bst)
         ;;
      x86_64)
         TARGETS+=(vm/filesystem.bst vm/filesystem-devel.bst)
         TARGETS+=(openh264-extension.bst:flatpak-repo.bst)
         ;;
    esac

  - ${BST} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${TARGETS[@]}"

  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '1 week'

.vm-image-template:
  stage: image
  interruptible: true
  script:
    - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build vm/image.bst
    - ${BST_NO_PUSH} -o arch "${ARCH}" checkout --hardlinks vm/image.bst image
  rules:
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/
    when: on_success
  - if: $CI_MERGE_REQUEST_ID == null
    when: manual
    allow_failure: true
  artifacts:
    when: always
    paths:
    - logs
    - image
    expire_in: '2 days'

.flatpak-template:
  stage: flatpak
  dependencies: [track, flatpak-prepare]
  script:
  - ostree init --repo repo/ --mode archive

  - ${BST} -o arch "${ARCH}" pull flatpak-runtimes.bst
  - ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst checkout-repo/
  - flatpak build-commit-from --src-repo=checkout-repo/ repo/
  - rm -rf checkout-repo/

  - |
    if test $FLAT_MANAGER_REPO == nightly; then
        ${BST} -o arch "${ARCH}" pull flatpak-platform-extensions.bst
        ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-platform-extensions.bst checkout-repo/
        flatpak build-commit-from --src-repo=checkout-repo/ repo/
        rm -rf checkout-repo/
    fi

  - |
    if test $FLAT_MANAGER_REPO == nightly -a $ARCH == x86_64; then
        ${BST} pull openh264-extension.bst:flatpak-repo.bst
        ${BST} checkout --hardlinks openh264-extension.bst:flatpak-repo.bst checkout-repo/
        flatpak build-commit-from --src-repo=checkout-repo/ repo/
        rm -rf checkout-repo/
    fi

  - flatpak build-update-repo --generate-static-deltas repo/

  - flat-manager-client push $(cat build.txt) repo/
  rules: &flatpak-publish-rules
  - if: $EMERGENCY || $BST_TRACK_TAGS != "False"
    when: never
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/

.ostree-template:
  stage: ostree
  dependencies: [track]
  script:
  - |
    export FLAT_MANAGER_SERVER=https://flatmgr-ostree.openshift.gnome.org/
    export FLAT_MANAGER_REPO=gnomeos
    export REPO_TOKEN=$OSTREE_REPO_TOKEN

  - ostree init --repo repo/ --mode archive

  - ${BST_NO_PUSH} -o arch "${ARCH}" build vm/repo.bst vm/repo-devel.bst

  - |
    for element in vm/repo.bst vm/repo-devel.bst; do
        ${BST} -o arch "${ARCH}" checkout --hardlinks $element checkout-repo/
        ostree pull-local --repo=repo/ checkout-repo/
        rm -rf checkout-repo/
    done

  - BUILD_ID=$(flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO)
  - flat-manager-client push --commit --publish --wait $BUILD_ID repo/ $(ostree --repo=repo/ refs) || result=$?
  - flat-manager-client purge $BUILD_ID
  rules: *flatpak-publish-rules


#
# "Real" CI jobs
#

track:
  extends: .x86_64
  stage: track
  interruptible: true
  script:
  - 'sed -i "s/track-tags: False/track-tags: ${BST_TRACK_TAGS}/" project.conf'
  - ${BST} track --deps all core.bst flatpak-runtimes.bst vm/image.bst boards/pinebook-pro/image.bst boards/rock64/image.bst boards/raspberrypi-4/image.bst vm/repo-devel.bst
  retry: 2
  # only run on branches targeting master
  rules:
  - if: $FLATPAK_BRANCH == 'master' && $CI_MERGE_REQUEST_ID == null
  artifacts:
    paths:
    - project.refs


build-x86_64:
  extends:
  - .build-template
  - .x86_64

build-i386:
  extends:
  - .build-template
  - .i686

build-aarch64:
  extends:
  - .build-template
  - .aarch64

build-arm:
  extends:
  - .build-template
  - .arm

build-ppc64le:
  extends:
  - .build-template
  - .ppc64le


vm-image-x86_64:
  extends:
  - .vm-image-template
  - .x86_64
  # run as soon as the x86_64 build job is done, don't wait for other arches
  needs:
  - track
  - job: build-x86_64
    artifacts: false

pinebook-pro-image:
  extends: .aarch64
  stage: image
  script:
    - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build boards/pinebook-pro/image.bst
    - ${BST_NO_PUSH} -o arch "${ARCH}" checkout --hardlinks boards/pinebook-pro/image.bst pinebook-pro-image
  when: manual
  allow_failure: true
  artifacts:
    when: always
    paths:
    - logs
    - pinebook-pro-image
    expire_in: '2 days'
  needs:
  - track
  - job: build-aarch64
    artifacts: false

rock64-image:
  extends: .aarch64
  stage: image
  script:
    - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build boards/rock64/image.bst
    - ${BST_NO_PUSH} -o arch "${ARCH}" checkout --hardlinks boards/rock64/image.bst rock64
  when: manual
  allow_failure: true
  artifacts:
    when: always
    paths:
    - logs
    - rock64
    expire_in: '2 days'
  needs:
  - track
  - job: build-aarch64
    artifacts: false

raspberrypi-4-image:
  extends: .aarch64
  stage: image
  script:
    - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build boards/raspberrypi-4/image.bst
    - ${BST_NO_PUSH} -o arch "${ARCH}" checkout --hardlinks boards/raspberrypi-4/image.bst raspberrypi-4-image
  when: manual
  allow_failure: true
  artifacts:
    when: always
    paths:
    - logs
    - raspberrypi-4-image
    expire_in: '2 days'
  needs:
  - track
  - job: build-aarch64
    artifacts: false


flatpak-prepare:
  extends: .x86_64
  stage: prepare_flatpak
  dependencies: []
  script:
  - flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO > build.txt
  artifacts:
    paths:
    - build.txt
  rules: *flatpak-publish-rules

flatpak-x86_64:
  extends:
  - .flatpak-template
  - .x86_64

flatpak-i386:
  extends:
  - .flatpak-template
  - .i686

flatpak-aarch64:
  extends:
  - .flatpak-template
  - .aarch64

flatpak-arm:
  extends:
  - .flatpak-template
  - .arm

flatpak-ppc64le:
  extends:
  - .flatpak-template
  - .ppc64le

flatpak-finish:
  extends: .x86_64
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager-client commit --wait $(cat build.txt)
  - flat-manager-client publish --wait $(cat build.txt)
  - flat-manager-client purge $(cat build.txt)
  rules: *flatpak-publish-rules

flatpak-finish-failed:
  extends: .x86_64
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
  - flat-manager-client purge $(cat build.txt)
  rules: &flatpak-failed-rules
  - if: $EMERGENCY || $BST_TRACK_TAGS != "False"
    when: never
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/
    when: on_failure

ostree-x86_64:
  extends:
  - .ostree-template
  - .x86_64

cve_report:
  extends: .x86_64
  stage: reports
  dependencies: [track]
  script:
  - ${BST} pull platform-manifest.bst sdk-manifest.bst

  - ${BST} checkout platform-manifest.bst platform-manifest/
  - ${BST} checkout sdk-manifest.bst sdk-manifest/

  - mkdir -p cve
  - cd cve
  - ../utils/update-local-cve-database.py

  - mkdir -p ../cve-reports
  - ../utils/generate-cve-report.py ../sdk-manifest/usr/manifest.json ../cve-reports/sdk.html
  - ../utils/generate-cve-report.py ../platform-manifest/usr/manifest.json ../cve-reports/platform.html
  cache:
    key: cve
    paths:
    - cve
  artifacts:
    paths:
    - cve-reports
  rules:
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d-\d\d$/
