include: .gitlab-ci/arch.yml

variables:
  GET_SOURCES_ATTEMPTS: 3
  BST_STRICT: '--strict'
  BST_TRACK_TAGS: 'false'
  BST_NO_PUSH: "bst $BST_STRICT --config .gitlab-ci/buildstream-nopush.conf --log-file logs/build.log --colors"
  BST: "bst $BST_STRICT --config .gitlab-ci/buildstream.conf --log-file logs/build.log --colors"
  FLATPAK_BRANCH: 41alpha

stages:
- track
- build
- deploy-config
- deploy
- reports

default:
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - echo "$GITLAB_CAS_PUSH_CERT" > client.crt
  - echo "$GITLAB_CAS_PUSH_KEY" > client.key

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  needs:
  - job: 'track'
    optional: true
  interruptible: true
  script:
  - TARGETS=(core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst flatpak/platform-manifest.bst flatpak/sdk-manifest.bst)

  - |
    case "${ARCH}" in
      aarch64)
         TARGETS+=(vm/filesystem.bst vm/filesystem-devel.bst)
         ;;
      x86_64)
         TARGETS+=(vm/repo.bst vm/repo-devel.bst)
         TARGETS+=(openh264-extension.bst:flatpak-repo.bst)
         ;;
    esac

  - ${BST} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${TARGETS[@]}"

  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
    - logs
    expire_in: '1 week'

.manual-image-template:
  stage: deploy
  needs:
  - job: 'track'
    optional: true
  when: manual
  allow_failure: true
  script:
  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build "${IMAGE}"
  - ${BST} -o arch "${ARCH}" checkout --hardlinks "${IMAGE}" image
  artifacts:
    when: always
    paths:
    - image
    expire_in: '2 days'

.deploy-rules:
  rules:
  - if: $EMERGENCY || $BST_TRACK_TAGS != "false"
    when: never
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/ && $CI_PIPELINE_SOURCE != "schedule"

.ostree-template:
  extends: .deploy-rules
  stage: deploy
  needs:
  - job: 'track'
    optional: true
  script:
  - |
    export FLAT_MANAGER_SERVER=https://flatmgr-ostree.openshift.gnome.org/
    export FLAT_MANAGER_REPO=gnomeos
    export REPO_TOKEN=$OSTREE_REPO_TOKEN

  - ostree init --repo repo/ --mode archive

  - ${BST} -o arch "${ARCH}" pull vm/repo.bst vm/repo-devel.bst

  - |
    for element in vm/repo.bst vm/repo-devel.bst; do
        ${BST} -o arch "${ARCH}" checkout --hardlinks $element checkout-repo/
        ostree pull-local --repo=repo/ checkout-repo/
        rm -rf checkout-repo/
    done

  - BUILD_ID=$(flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO)
  - flat-manager-client push --commit --publish --wait $BUILD_ID repo/ $(ostree --repo=repo/ refs) || result=$?
  - flat-manager-client purge $BUILD_ID
  - exit $result

#
# "Real" CI jobs
#

track:
  extends: .x86_64
  stage: track
  interruptible: true
  script:
  - 'sed -i "s/track-tags: false/track-tags: ${BST_TRACK_TAGS}/" project.conf'
  # FIXME: pbp image breaks the build https://gitlab.gnome.org/GNOME/gnome-build-meta/-/issues/371
  # - ${BST} track --deps all core.bst flatpak-runtimes.bst vm/image.bst boards/pinebook-pro/image.bst boards/rock64/image.bst boards/raspberrypi-4/image.bst vm/repo-devel.bst iso/image.bst
  - ${BST} track --deps all core.bst flatpak-runtimes.bst vm/image.bst boards/rock64/image.bst boards/raspberrypi-4/image.bst vm/repo-devel.bst iso/image.bst
  - echo $CI_JOB_ID > track-job.id
  retry: 2
  # only run on branches targeting master
  rules:
  - if: $FLATPAK_BRANCH == 'master' && $CI_MERGE_REQUEST_ID == null
  artifacts:
    paths:
    - project.refs
    - track-job.id


build-x86_64:
  extends:
  - .build-template
  - .x86_64

build-i386:
  extends:
  - .build-template
  - .i686

build-aarch64:
  extends:
  - .build-template
  - .aarch64

build-ppc64le:
  extends:
  - .build-template
  - .ppc64le


generate-deploy-config:
  extends:
  - .x86_64
  - .deploy-rules
  needs:
  - job: 'track'
    optional: true
  - job: 'build-x86_64'
    artifacts: false
  - job: 'build-i386'
    artifacts: false
  - job: 'build-aarch64'
    artifacts: false
  - job: 'build-ppc64le'
    artifacts: false
  stage: deploy-config
  script:
  - test -f track-job.id && TRACK_JOB_ID=$(cat track-job.id)
  - |
    case "$FLATPAK_BRANCH" in
      master)
        FLAT_MANAGER_SERVER=https://nightly.gnome.org/
        ENVIRONMENT_NAME=flatpak-nightly
        FLAT_MANAGER_REPO=nightly
        SUPPORTED_ARCHES="x86_64 i686 aarch64 ppc64le"
      ;;
      *beta)
        FLAT_MANAGER_SERVER=https://hub.flathub.org/
        ENVIRONMENT_NAME=flathub/$FLATPAK_BRANCH
        FLAT_MANAGER_REPO=beta
        SUPPORTED_ARCHES="x86_64 i686 aarch64"
      ;;
      *)
        FLAT_MANAGER_SERVER=https://hub.flathub.org/
        ENVIRONMENT_NAME=flathub/$FLATPAK_BRANCH
        FLAT_MANAGER_REPO=stable
        SUPPORTED_ARCHES="x86_64 i686 aarch64"
      ;;
    esac

  - |
    cat > flatpak-variables.yml << END
    variables:
      BST: '$BST'
      TRACK_JOB_ID: '$TRACK_JOB_ID'
      FLAT_MANAGER_SERVER: '$FLAT_MANAGER_SERVER'
      FLAT_MANAGER_REPO: '$FLAT_MANAGER_REPO'
      TARGETS: flatpak-runtimes.bst
      TARGETS_nightly: flatpak-platform-extensions.bst
      TARGETS_nightly_x86_64: openh264-extension.bst:flatpak-repo.bst
      ENVIRONMENT_NAME: '$ENVIRONMENT_NAME'

    END
  - cat flatpak-variables.yml .gitlab-ci/flat-manager.yml > flatpak-deploy.yml

  - |
    for ARCH in $SUPPORTED_ARCHES; do
    cat >> flatpak-deploy.yml << END

    flatmgr-$ARCH:
      extends:
      - .flatmgr-template
      - .$ARCH
    END
    done

  artifacts:
    paths:
    - flatpak-deploy.yml

deploy-flatpak:
  extends: .deploy-rules
  stage: deploy
  trigger:
    strategy: depend
    include:
    - artifact: flatpak-deploy.yml
      job: generate-deploy-config

vm-image-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  needs:
  - job: 'track'
    optional: true
  - job: 'build-x86_64'
    artifacts: false
  variables:
    IMAGE: vm/image.bst

.pinebook-pro-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'track'
    optional: true
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/pinebook-pro/image.bst

rock64-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'track'
    optional: true
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/rock64/image.bst

raspberrypi-4-image:
  extends:
  - .manual-image-template
  - .aarch64
  needs:
  - job: 'track'
    optional: true
  - job: 'build-aarch64'
    artifacts: false
  variables:
    IMAGE: boards/raspberrypi-4/image.bst

iso-installer-x86_64:
  extends:
  - .manual-image-template
  - .x86_64
  variables:
    IMAGE: iso/image.bst
  needs:
  - job: 'track'
    optional: true
  - job: 'build-x86_64'
    artifacts: false

s3-image:
  extends: .x86_64
  stage: deploy
  needs:
  - job: 'track'
    optional: true
  - job: 'build-x86_64'
    artifacts: false
  script:
  - ${BST_NO_PUSH} --max-jobs $(( $(nproc) / 4 )) -o arch "${ARCH}" build vm/image.bst iso/image.bst
  - ${BST} -o arch "${ARCH}" checkout --hardlinks vm/image.bst image
  - ${BST} -o arch "${ARCH}" checkout --hardlinks iso/image.bst iso

  - |
    if [ -n "$CI_COMMIT_TAG" ]; then
        aws s3 cp --acl public-read iso/installer.iso \
            s3://gnome-build-meta/tag/$CI_COMMIT_TAG/gnome_os_installer_$CI_COMMIT_TAG.iso
    else
        aws s3 cp --acl public-read image/disk.img.xz \
            s3://gnome-build-meta/nightly/$CI_PIPELINE_ID/disk_$CI_PIPELINE_ID.img.xz
        aws s3 cp --acl public-read iso/installer.iso \
            s3://gnome-build-meta/nightly/$CI_PIPELINE_ID/gnome_os_installer_$CI_PIPELINE_ID.iso
    fi

  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/

  rules:
  - if: $EMERGENCY || $BST_TRACK_TAGS != "false"
    when: never
  - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "schedule"
  - if: $CI_COMMIT_TAG

s3-image-static:
  extends: .x86_64
  stage: reports
  needs:
  - job: s3-image
    artifacts: false
  allow_failure: true
  rules:
  - if: $EMERGENCY || $BST_TRACK_TAGS != "false"
    when: never
  - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "schedule"
    when: manual
  script:
  - |
    echo nightly/$CI_PIPELINE_ID/gnome_os_installer_$CI_PIPELINE_ID.iso > latest-iso
    echo nightly/$CI_PIPELINE_ID/disk_$CI_PIPELINE_ID.img.xz > latest-disk
  - |
    aws s3 cp --acl public-read latest-iso s3://gnome-build-meta/nightly/latest-iso
    aws s3 cp --acl public-read latest-disk s3://gnome-build-meta/nightly/latest-disk

  - aws s3 ls --recursive --human-readable s3://gnome-build-meta/

ostree-x86_64:
  extends:
  - .ostree-template
  - .x86_64

cve_report:
  extends: .x86_64
  stage: reports
  needs:
  - job: 'track'
    optional: true
  - job: 'vm-image-x86_64'
    artifacts: false
  script:
  - ${BST} pull flatpak/platform-manifest.bst flatpak/sdk-manifest.bst

  - ${BST} checkout flatpak/platform-manifest.bst platform-manifest/
  - ${BST} checkout flatpak/sdk-manifest.bst sdk-manifest/

  - mkdir -p cve
  - cd cve
  - ../utils/update-local-cve-database.py

  - mkdir -p ../cve-reports
  - ../utils/generate-cve-report.py ../sdk-manifest/usr/manifest.json ../cve-reports/sdk.html
  - ../utils/generate-cve-report.py ../platform-manifest/usr/manifest.json ../cve-reports/platform.html
  cache:
    key: cve
    paths:
    - cve
  artifacts:
    paths:
    - cve-reports
  rules:
  - if: $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^gnome-\d\d$/
