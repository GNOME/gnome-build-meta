variables:
  # Store all the bst stuff under the "${CI_PROJECT_DIR}" directory.
  # Note that GitLab CI will only cache stuff inside the "${CI_PROJECT_DIR}" folder.
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/cache"
  GET_SOURCES_ATTEMPTS: 3
  BST_STRICT: '--no-strict'
  BST_TRACK_TAGS: 'False'
  BST: "bst $BST_STRICT --config build.conf --log-file logs/build.log --colors"
  BST_SHA: '1.2.7-0-g08d1694545d1d62295c7beba1fea65a21b93a723'
  BST_EXTERNAL_SHA: '0.14.0-0-g003f1f1e7ead60627ef4242a6d785704ede44358'
  FLATPAK_BRANCH: master

  # Docker Images
  DOCKER_REGISTRY: "registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images"
  DOCKER_AMD64: "${DOCKER_REGISTRY}/amd64:e132e7bf9180b30c6ad0f4b057442cc2f2a0aa86"
  DOCKER_AARCH64: "${DOCKER_REGISTRY}/aarch64:e132e7bf9180b30c6ad0f4b057442cc2f2a0aa86"

stages:
  - track
  - build
  - prepare_flatpak
  - flatpak
  - finish_flatpak
  - reports

default:
  before_script:
  # Use specific version of BuildStream
  - git clone https://gitlab.com/BuildStream/buildstream.git
  - git -C buildstream/ checkout $BST_SHA
  - pip3 install buildstream/

  # install bst-external nedded for the flatpak_image plugin
  - git clone https://gitlab.com/BuildStream/bst-external.git
  - git -C bst-external/ checkout $BST_EXTERNAL_SHA
  - pip3 install bst-external/

  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
          url: https://cache.gitlab.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true
    EOF

  # flat-manager-client to push to flathub
  - git clone https://github.com/flatpak/flat-manager

  - |
    if [ "$FLATPAK_BRANCH" = master ] && [ -n "$NIGHTLY_REPO_TOKEN" ]; then
      export REPO_TOKEN=$NIGHTLY_REPO_TOKEN
      export FLAT_MANAGER_SERVER=https://gbm.gnome.org/
      export FLAT_MANAGER_REPO=nightly
    elif [ "$FLATPAK_BRANCH" != master ] && [ -n "$FLATHUB_REPO_TOKEN" ]; then
      export REPO_TOKEN=$FLATHUB_REPO_TOKEN
      export FLAT_MANAGER_SERVER=https://hub.flathub.org/
      export FLAT_MANAGER_REPO=stable
    fi

#
# Templates shared by multiple jobs
#

.build-template:
  stage: build
  dependencies: [track]
  script:
    - ${BST} -o arch "${ARCH}" build core.bst flatpak-runtimes.bst flatpak-platform-extensions.bst
      platform-manifest.bst sdk-manifest.bst
  # Store all the downloaded git repos and tarballs in the cache.
  # This saves us fetching them on every build
  cache: &bst-cache
    key: bst-$FLATPAK_BRANCH
    paths:
      - "${XDG_CACHE_HOME}/buildstream/sources/"
  # Store artifacts so we can inspect build failures
  artifacts:
    when: always
    paths:
      - logs
      - project.refs

.flatpak-template:
  stage: flatpak
  dependencies: [track, flatpak-prepare]
  script:
    - ostree init --repo repo/ --mode archive

    - ${BST} -o arch "${ARCH}" pull flatpak-runtimes.bst
    - ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-runtimes.bst checkout-repo/
    - flatpak build-commit-from --src-repo=checkout-repo/ repo/
    - rm -rf checkout-repo/

    - |
      if test $FLAT_MANAGER_REPO == nightly; then
          ${BST} -o arch "${ARCH}" pull flatpak-platform-extensions.bst
          ${BST} -o arch "${ARCH}" checkout --hardlinks flatpak-platform-extensions.bst checkout-repo/
          flatpak build-commit-from --src-repo=checkout-repo/ repo/
          rm -rf checkout-repo/
      fi

    - flatpak build-update-repo --generate-static-deltas repo/

    - flat-manager/flat-manager-client push $(cat build.txt) repo/
  only:
    - master
    - /^gnome-\d-\d\d$/
  except:
    variables:
      - $EMERGENCY
      - $BST_TRACK_TAGS != "False"

#
# Architecture specific settings
#

.x86_64: &x86_64
  image: "${DOCKER_AMD64}"
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: x86_64

.i686: &i686
  image: "${DOCKER_AMD64}"
  tags:
    - x86_64
    - gnome-build-meta
  variables:
    ARCH: i686

.aarch64: &aarch64
  image: "${DOCKER_AARCH64}"
  tags:
    - aarch64
    - gnome-build-meta
  variables:
    ARCH: aarch64

.arm: &arm
  image: "${DOCKER_AARCH64}"
  tags:
    - armhf
    - gnome-build-meta
  variables:
    ARCH: arm

#
# "Real" CI jobs
#

track:
  <<: *x86_64
  stage: track
  script:
    - 'sed -i "s/track-tags: False/track-tags: ${BST_TRACK_TAGS}/" project.conf'
    - ${BST} track --deps all core.bst flatpak-runtimes.bst
  retry: 2
  # only run on branches targeting master
  only:
    variables:
      - $FLATPAK_BRANCH == 'master'
  cache: *bst-cache
  artifacts:
    when: always
    paths:
      - logs
      - project.refs


build-gnome-core-x86_64:
  extends: .build-template
  <<: *x86_64

build-gnome-core-i386:
  extends: .build-template
  <<: *i686

build-gnome-core-aarch64:
  extends: .build-template
  <<: *aarch64

build-gnome-core-arm:
  extends: .build-template
  <<: *arm


flatpak-prepare:
  stage: prepare_flatpak
  dependencies: []
  script:
    - flat-manager/flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO > build.txt
  artifacts:
    paths:
      - build.txt
  only:
    - master
    - /^gnome-\d-\d\d$/
  except:
    variables:
      - $EMERGENCY
      - $BST_TRACK_TAGS != "False"
  <<: *x86_64


flatpak-x86_64:
  extends: .flatpak-template
  <<: *x86_64

flatpak-i386:
  extends: .flatpak-template
  <<: *i686

flatpak-aarch64:
  extends: .flatpak-template
  <<: *aarch64

flatpak-arm:
  extends: .flatpak-template
  <<: *arm


flatpak-finish:
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
    - flat-manager/flat-manager-client commit --wait $(cat build.txt)
    - flat-manager/flat-manager-client publish --wait $(cat build.txt)
    - flat-manager/flat-manager-client purge $(cat build.txt)
  only:
    - master
    - /^gnome-\d-\d\d$/
  except:
    variables:
      - $EMERGENCY
      - $BST_TRACK_TAGS != "False"
  <<: *x86_64

flatpak-finish-failed:
  stage: finish_flatpak
  dependencies: [flatpak-prepare]
  script:
    - flat-manager/flat-manager-client purge $(cat build.txt)
  when: on_failure
  only:
    - master
    - /^gnome-\d-\d\d$/
  except:
    variables:
      - $EMERGENCY
      - $BST_TRACK_TAGS != "False"
  <<: *x86_64


cve_report:
  <<: *x86_64
  stage: reports
  dependencies: [track]
  script:
    - pip3 install --user lxml

    - ${BST} pull platform-manifest.bst sdk-manifest.bst

    - ${BST} checkout platform-manifest.bst platform-manifest/
    - ${BST} checkout sdk-manifest.bst sdk-manifest/

    - mkdir -p cve
    - cd cve
    - ../utils/update-local-cve-database.py

    - mkdir -p ../cve-reports
    - ../utils/generate-cve-report.py ../sdk-manifest/usr/manifest.json ../cve-reports/sdk.html
    - ../utils/generate-cve-report.py ../platform-manifest/usr/manifest.json ../cve-reports/platform.html
  cache:
    key: cve
    paths:
      - cve
  artifacts:
    paths:
      - cve-reports
  only:
    - master
    - /^gnome-\d-\d\d$/
