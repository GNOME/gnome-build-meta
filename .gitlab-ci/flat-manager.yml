
include: .gitlab-ci/arch.yml

stages:
- prepare
- deploy
- finish

default:
  before_script:
  # Ensure the log directory exists
  - mkdir -p logs

  # Setup certificate for pushing to the cache
  - |
    if [ -n "$GITLAB_CAS_PUSH_CERT" ]; then
       echo "$GITLAB_CAS_PUSH_CERT" > client.crt
       echo "$GITLAB_CAS_PUSH_KEY" > client.key
    fi

    cat >> build.conf << EOF

    projects:
      gnome:
        artifacts:
        - url: https://m1-xlarge-x86.gnome.org:11002
          client-key: client.key
          client-cert: client.crt
          push: true

    sourcedir: /cache/buildstream/sources
    EOF

.flatmgr-template:
  stage: deploy
  dependencies: [flatmgr-prepare]
  script:
  - ostree init --repo repo/ --mode archive

  - |
    for ARCH in $SUPPORTED_ARCHES; do
      TARGETS_ARCH=TARGETS_${ARCH}
      TARGETS="$TARGETS ${!TARGETS_ARCH}"

      $BST -o arch $ARCH pull $TARGETS

      for target in $TARGETS; do
        $BST -o arch $ARCH checkout --hardlinks $target checkout-repo/
        ostree pull-local --repo repo/ checkout-repo/
        rm -rf checkout-repo/
      done
    done

  - ostree fsck --repo repo/ --all
  - flatpak build-update-repo --generate-static-deltas repo/

  - mkdir -p testrepo
  - ostree --repo=testrepo init --mode=bare-user-only
  - ostree --repo=repo refs | grep '^runtime/' | xargs ostree --repo=testrepo pull-local --require-static-deltas --untrusted --disable-fsync repo

  - flat-manager-client push $(cat build.txt) repo/
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare


flatmgr-prepare:
  extends: .x86_64
  stage: prepare
  script:
  - curl -O $CI_PROJECT_URL/-/jobs/$TRACK_JOB_ID/artifacts/raw/project.refs
  - flat-manager-client create $FLAT_MANAGER_SERVER $FLAT_MANAGER_REPO > build.txt
  artifacts:
    paths:
    - build.txt
    - project.refs
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare

flatmgr-finish:
  extends: .x86_64
  stage: finish
  dependencies: [flatmgr-prepare]
  script:
  - flat-manager-client commit --wait $(cat build.txt)
  - flat-manager-client publish --wait $(cat build.txt)
  after_script:
  - flat-manager-client purge $(cat build.txt)
  environment:
    name: $ENVIRONMENT_NAME

flatmgr-finish-failed:
  extends: .x86_64
  stage: finish
  dependencies: [flatmgr-prepare]
  script:
  - flat-manager-client purge $(cat build.txt)
  when: on_failure

