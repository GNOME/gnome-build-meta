From a5d83668bfd93e7bf2e9ef0b9ae96894fcca76d9 Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <cgarcia@igalia.com>
Date: Thu, 9 Feb 2023 10:52:13 +0100
Subject: [PATCH 01/10] Use new WebKit API for JavaScript execution

---
 embed/ephy-find-toolbar.c                     |   4 +-
 embed/ephy-reader-handler.c                   |  24 +++--
 embed/ephy-web-view.c                         | 101 ++++++++++--------
 lib/sync/README                               |   2 +-
 src/ephy-firefox-sync-dialog.c                |   2 +-
 src/webextension/api/tabs.c                   |  19 ++--
 src/webextension/ephy-web-extension-manager.c |  69 ++++++------
 7 files changed, 128 insertions(+), 93 deletions(-)

diff --git a/embed/ephy-find-toolbar.c b/embed/ephy-find-toolbar.c
index 42dbb8735..49c1989eb 100644
--- a/embed/ephy-find-toolbar.c
+++ b/embed/ephy-find-toolbar.c
@@ -448,7 +448,7 @@ ephy_find_toolbar_selection_async (GObject      *source_object,
   g_autoptr (WebKitJavascriptResult) js_result = NULL;
   JSCValue *value = NULL;
 
-  js_result = webkit_web_view_run_javascript_finish (web_view, res, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (web_view, res, &error);
   if (!js_result) {
     g_warning ("Error running javascript: %s", error->message);
     return;
@@ -475,7 +475,7 @@ ephy_find_toolbar_open (EphyFindToolbar *toolbar)
 {
   g_assert (toolbar->web_view != NULL);
 
-  webkit_web_view_run_javascript (toolbar->web_view, "window.getSelection().toString();", toolbar->cancellable, ephy_find_toolbar_selection_async, toolbar);
+  webkit_web_view_evaluate_javascript (toolbar->web_view, "window.getSelection().toString();", -1, NULL, NULL, toolbar->cancellable, ephy_find_toolbar_selection_async, toolbar);
 
   gtk_editable_select_region (GTK_EDITABLE (toolbar->entry), 0, -1);
 
diff --git a/embed/ephy-reader-handler.c b/embed/ephy-reader-handler.c
index 0ab0562a6..4e95463f6 100644
--- a/embed/ephy-reader-handler.c
+++ b/embed/ephy-reader-handler.c
@@ -168,7 +168,7 @@ readability_js_finish_cb (GObject      *object,
   const gchar *color_scheme;
   AdwStyleManager *style_manager;
 
-  js_result = webkit_web_view_run_javascript_finish (web_view, result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (web_view, result, &error);
   if (!js_result) {
     if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       g_warning ("Error running javascript: %s", error->message);
@@ -241,11 +241,23 @@ static void
 ephy_reader_request_begin_get_source_from_web_view (EphyReaderRequest *request,
                                                     WebKitWebView     *web_view)
 {
-  webkit_web_view_run_javascript_from_gresource (web_view,
-                                                 "/org/gnome/epiphany/readability/Readability.js",
-                                                 request->cancellable,
-                                                 readability_js_finish_cb,
-                                                 request);
+  gsize length;
+  const char *script;
+  g_autoptr (GError) error = NULL;
+  g_autoptr (GBytes) bytes = g_resources_lookup_data("/org/gnome/epiphany/readability/Readability.js",
+                                                     G_RESOURCE_LOOKUP_FLAGS_NONE, &error);
+
+  if (!bytes) {
+    g_critical ("Failed to get Readability.js from resources: %s", error->message);
+    return;
+  }
+
+  script = (const char *)g_bytes_get_data (bytes, &length);
+  webkit_web_view_evaluate_javascript (web_view, script, length, NULL,
+                                       "resource:///org/gnome/epiphany/readability/Readability.js",
+                                       request->cancellable,
+                                       readability_js_finish_cb,
+                                       request);
 }
 
 static void
diff --git a/embed/ephy-web-view.c b/embed/ephy-web-view.c
index 72e39d5c6..0442b3f30 100644
--- a/embed/ephy-web-view.c
+++ b/embed/ephy-web-view.c
@@ -632,7 +632,7 @@ readability_js_finish_cb (GObject      *object,
   g_autoptr (GError) error = NULL;
   JSCValue *jsc_value;
 
-  js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
   if (!js_result) {
     if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       g_warning ("Error running javascript: %s", error->message);
@@ -656,11 +656,23 @@ run_readability_js_if_needed (gpointer data)
 
   /* Internal pages should never receive reader mode. */
   if (!ephy_embed_utils_is_no_show_address (web_view->address)) {
-    webkit_web_view_run_javascript_from_gresource (WEBKIT_WEB_VIEW (web_view),
-                                                   "/org/gnome/epiphany/readability/Readability-readerable.js",
-                                                   web_view->cancellable,
-                                                   readability_js_finish_cb,
-                                                   web_view);
+    g_autoptr (GError) error = NULL;
+    g_autoptr (GBytes) bytes = g_resources_lookup_data("/org/gnome/epiphany/readability/Readability-readerable.js",
+                                                       G_RESOURCE_LOOKUP_FLAGS_NONE, &error);
+
+    if (bytes) {
+      gsize length;
+      const char *script;
+
+      script = (const char *)g_bytes_get_data (bytes, &length);
+      webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (web_view),
+                                           script, length, NULL,
+                                           "resource:///org/gnome/epiphany/readability/Readability-readerable.js",
+                                           web_view->cancellable,
+                                           readability_js_finish_cb,
+                                           web_view);
+    } else
+      g_critical ("Failed to get Readability-readerable.js from resources: %s", error->message);
   }
 
   web_view->reader_js_timeout = 0;
@@ -2228,12 +2240,13 @@ reader_setting_changed_cb (EphyWebView *web_view)
   js_snippet = g_strdup_printf ("document.body.className = '%s %s'",
                                 font_style,
                                 color_scheme);
-  webkit_web_view_run_javascript_in_world (WEBKIT_WEB_VIEW (web_view),
-                                           js_snippet,
-                                           ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
-                                           NULL,
-                                           NULL,
-                                           NULL);
+  webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (web_view),
+                                       js_snippet, -1,
+                                       ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
+                                       NULL,
+                                       NULL,
+                                       NULL,
+                                       NULL);
   g_free (js_snippet);
 }
 
@@ -2581,7 +2594,7 @@ ephy_web_view_load_url (EphyWebView *view,
 
     uri = g_uri_parse (effective_url, G_URI_FLAGS_NONE, NULL);
     decoded_url = g_uri_to_string (uri);
-    webkit_web_view_run_javascript (WEBKIT_WEB_VIEW (view), decoded_url, NULL, NULL, NULL);
+    webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (view), decoded_url, -1, NULL, NULL, NULL, NULL, NULL);
   } else
     webkit_web_view_load_uri (WEBKIT_WEB_VIEW (view), effective_url);
 
@@ -2922,7 +2935,7 @@ has_modified_forms_cb (WebKitWebView *view,
   GError *error = NULL;
   gulong id;
 
-  js_result = webkit_web_view_run_javascript_in_world_finish (view, result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
 
   id = GPOINTER_TO_INT (g_task_get_task_data (task));
   if (id == 0) {
@@ -2973,7 +2986,7 @@ ephy_web_view_has_modified_forms (EphyWebView         *view,
 
   /* Set timeout to guard against web process hangs. Otherwise, a single
    * unresponsive web process would prevent the window from closing. Note that
-   * although webkit_web_view_run_javascript_in_world() takes a cancellable,
+   * although webkit_web_view_evaluate_javascript() takes a cancellable,
    * it's not *really* cancellable and attempting to cancel it just causes it to
    * return G_IO_ERROR_CANCELLED after however long it takes to finish, which
    * will be never if the web process is unresponsive, so we always fake
@@ -2982,12 +2995,13 @@ ephy_web_view_has_modified_forms (EphyWebView         *view,
   id = g_timeout_add_seconds (2, has_modified_forms_timeout_cb, task);
   g_task_set_task_data (task, GINT_TO_POINTER (id), NULL);
 
-  webkit_web_view_run_javascript_in_world (WEBKIT_WEB_VIEW (view),
-                                           "Ephy.hasModifiedForms();",
-                                           ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
-                                           cancellable,
-                                           (GAsyncReadyCallback)has_modified_forms_cb,
-                                           task);
+  webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (view),
+                                       "Ephy.hasModifiedForms();", -1,
+                                       ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
+                                       NULL,
+                                       cancellable,
+                                       (GAsyncReadyCallback)has_modified_forms_cb,
+                                       task);
 }
 
 gboolean
@@ -3022,7 +3036,7 @@ get_best_web_app_icon_cb (WebKitWebView *view,
   WebKitJavascriptResult *js_result;
   GError *error = NULL;
 
-  js_result = webkit_web_view_run_javascript_in_world_finish (view, result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
   if (js_result) {
     JSCValue *js_value, *js_uri, *js_color;
     GetBestWebAppIconAsyncData *data;
@@ -3062,12 +3076,13 @@ ephy_web_view_get_best_web_app_icon (EphyWebView         *view,
 
   task = g_task_new (view, cancellable, callback, user_data);
   script = g_strdup_printf ("Ephy.getWebAppIcon(\"%s\");", webkit_web_view_get_uri (wk_view));
-  webkit_web_view_run_javascript_in_world (wk_view,
-                                           script,
-                                           ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
-                                           cancellable,
-                                           (GAsyncReadyCallback)get_best_web_app_icon_cb,
-                                           task);
+  webkit_web_view_evaluate_javascript (wk_view,
+                                       script, -1,
+                                       ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
+                                       NULL,
+                                       cancellable,
+                                       (GAsyncReadyCallback)get_best_web_app_icon_cb,
+                                       task);
   g_free (script);
 }
 
@@ -3108,7 +3123,7 @@ get_web_app_title_cb (WebKitWebView *view,
   WebKitJavascriptResult *js_result;
   GError *error = NULL;
 
-  js_result = webkit_web_view_run_javascript_in_world_finish (view, result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
   if (js_result) {
     JSCValue *js_value;
     char *retval = NULL;
@@ -3135,12 +3150,13 @@ ephy_web_view_get_web_app_title (EphyWebView         *view,
   g_assert (EPHY_IS_WEB_VIEW (view));
 
   task = g_task_new (view, cancellable, callback, user_data);
-  webkit_web_view_run_javascript_in_world (WEBKIT_WEB_VIEW (view),
-                                           "Ephy.getWebAppTitle();",
-                                           ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
-                                           cancellable,
-                                           (GAsyncReadyCallback)get_web_app_title_cb,
-                                           task);
+  webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (view),
+                                       "Ephy.getWebAppTitle();", -1,
+                                       ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
+                                       NULL,
+                                       cancellable,
+                                       (GAsyncReadyCallback)get_web_app_title_cb,
+                                       task);
 }
 
 char *
@@ -3161,7 +3177,7 @@ get_web_app_mobile_capable_cb (WebKitWebView *view,
   WebKitJavascriptResult *js_result;
   GError *error = NULL;
 
-  js_result = webkit_web_view_run_javascript_in_world_finish (view, result, &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
   if (js_result) {
     JSCValue *js_value;
     gboolean retval = FALSE;
@@ -3188,12 +3204,13 @@ ephy_web_view_get_web_app_mobile_capable (EphyWebView         *view,
   g_assert (EPHY_IS_WEB_VIEW (view));
 
   task = g_task_new (view, cancellable, callback, user_data);
-  webkit_web_view_run_javascript_in_world (WEBKIT_WEB_VIEW (view),
-                                           "Ephy.getAppleMobileWebAppCapable();",
-                                           ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
-                                           cancellable,
-                                           (GAsyncReadyCallback)get_web_app_mobile_capable_cb,
-                                           task);
+  webkit_web_view_evaluate_javascript (WEBKIT_WEB_VIEW (view),
+                                       "Ephy.getAppleMobileWebAppCapable();", -1,
+                                       ephy_embed_shell_get_guid (ephy_embed_shell_get_default ()),
+                                       NULL,
+                                       cancellable,
+                                       (GAsyncReadyCallback)get_web_app_mobile_capable_cb,
+                                       task);
 }
 
 gboolean
diff --git a/lib/sync/README b/lib/sync/README
index cfc53da27..376c24da1 100644
--- a/lib/sync/README
+++ b/lib/sync/README
@@ -231,7 +231,7 @@
   the JavaScript forwards it to the WebKitUserContentManager via the
   "script-message-received" signal. The callback connected to this signal in
   the preferences dialog will parse the message and respond with a
-  WebChannelMessageToContent event through webkit_web_view_run_javascript()
+  WebChannelMessageToContent event through webkit_web_view_evaluate_javascript()
   if necessary. WebChannelMessageToContent events are messages that go from
   the web browser to the Firefox Accounts Content Server.
   Both WebChannelMessageToChrome and WebChannelMessageToContent events have a
diff --git a/src/ephy-firefox-sync-dialog.c b/src/ephy-firefox-sync-dialog.c
index b7a3f55ba..c265eb8d2 100644
--- a/src/ephy-firefox-sync-dialog.c
+++ b/src/ephy-firefox-sync-dialog.c
@@ -242,7 +242,7 @@ sync_message_to_fxa_content (EphyFirefoxSyncDialog *sync_dialog,
                             type, detail_str);
 
   /* We don't expect any response from the server. */
-  webkit_web_view_run_javascript (sync_dialog->fxa_web_view, script, NULL, NULL, NULL);
+  webkit_web_view_evaluate_javascript (sync_dialog->fxa_web_view, script, -1, NULL, NULL, NULL, NULL, NULL);
 
   g_free (script);
   g_free (detail_str);
diff --git a/src/webextension/api/tabs.c b/src/webextension/api/tabs.c
index 8c7637485..51a4ab1d0 100644
--- a/src/webextension/api/tabs.c
+++ b/src/webextension/api/tabs.c
@@ -396,9 +396,9 @@ on_execute_script_ready (GObject      *source,
   g_autoptr (GError) error = NULL;
   GTask *task = user_data;
 
-  js_result = webkit_web_view_run_javascript_in_world_finish (WEBKIT_WEB_VIEW (source),
-                                                              result,
-                                                              &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                          result,
+                                                          &error);
 
   if (error) {
     g_task_return_error (task, g_steal_pointer (&error));
@@ -459,12 +459,13 @@ tabs_handler_execute_script (EphyWebExtensionSender *sender,
     return;
   }
 
-  webkit_web_view_run_javascript_in_world (target_web_view,
-                                           code,
-                                           ephy_web_extension_get_guid (sender->extension),
-                                           NULL,
-                                           on_execute_script_ready,
-                                           task);
+  webkit_web_view_evaluate_javascript (target_web_view,
+                                       code, -1,
+                                       ephy_web_extension_get_guid (sender->extension),
+                                       NULL,
+                                       NULL,
+                                       on_execute_script_ready,
+                                       task);
 }
 
 static void
diff --git a/src/webextension/ephy-web-extension-manager.c b/src/webextension/ephy-web-extension-manager.c
index d6e9be6e1..30ba9ffc1 100644
--- a/src/webextension/ephy-web-extension-manager.c
+++ b/src/webextension/ephy-web-extension-manager.c
@@ -561,11 +561,13 @@ page_action_clicked (GtkButton *button,
   json = json_to_string (root, FALSE);
 
   script = g_strdup_printf ("window.browser.pageAction.onClicked._emit(%s);", json);
-  webkit_web_view_run_javascript (web_view,
-                                  script,
-                                  NULL,
-                                  NULL,
-                                  NULL);
+  webkit_web_view_evaluate_javascript (web_view,
+                                       script, -1,
+                                       NULL,
+                                       NULL,
+                                       NULL,
+                                       NULL,
+                                       NULL);
 }
 
 static GtkWidget *
@@ -1582,9 +1584,9 @@ tab_emit_ready_cb (GObject      *source,
   g_autoptr (WebKitJavascriptResult) js_result = NULL;
   GTask *pending_task;
 
-  js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (source),
-                                                     result,
-                                                     &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                          result,
+                                                          &error);
 
   /* If it returned true it will be asynchronously handled later. Otherwise we
    * complete it now with undefined. */
@@ -1631,12 +1633,13 @@ ephy_web_extension_manager_emit_in_tab_with_reply (EphyWebExtensionManager *self
   tracker = g_new0 (PendingMessageReplyTracker, 1);
   tracker->web_extension = web_extension;
   tracker->message_guid = message_guid;
-  webkit_web_view_run_javascript_in_world (target_web_view,
-                                           script,
-                                           ephy_web_extension_get_guid (web_extension),
-                                           NULL,
-                                           tab_emit_ready_cb,
-                                           tracker);
+  webkit_web_view_evaluate_javascript (target_web_view,
+                                       script, -1,
+                                       ephy_web_extension_get_guid (web_extension),
+                                       NULL,
+                                       NULL,
+                                       tab_emit_ready_cb,
+                                       tracker);
 
   pending_messages = g_hash_table_lookup (self->pending_messages, web_extension);
   if (!pending_messages) {
@@ -1659,9 +1662,9 @@ on_extension_emit_ready (GObject      *source,
   g_autoptr (GError) error = NULL;
   g_autoptr (WebKitJavascriptResult) js_result = NULL;
 
-  js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (source),
-                                                     result,
-                                                     &error);
+  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                          result,
+                                                          &error);
 
   if (!error && jsc_value_to_boolean (webkit_javascript_result_get_js_value (js_result)))
     tracker->handled = TRUE;
@@ -1702,11 +1705,13 @@ ephy_web_extension_manager_emit_in_background_view (EphyWebExtensionManager *sel
 
   script = g_strdup_printf ("window.browser.%s._emit(%s);", name, json);
 
-  webkit_web_view_run_javascript (web_view,
-                                  script,
-                                  NULL,
-                                  NULL,
-                                  NULL);
+  webkit_web_view_evaluate_javascript (web_view,
+                                       script, -1,
+                                       NULL,
+                                       NULL,
+                                       NULL,
+                                       NULL,
+                                       NULL);
 }
 
 static void
@@ -1744,11 +1749,11 @@ ephy_web_extension_manager_emit_in_extension_views_internal (EphyWebExtensionMan
 
   if (background_view) {
     if (!sender || (sender->view != background_view)) {
-      webkit_web_view_run_javascript (background_view,
-                                      script,
-                                      NULL,
-                                      reply_task ? on_extension_emit_ready : NULL,
-                                      tracker);
+      webkit_web_view_evaluate_javascript (background_view,
+                                           script, -1,
+                                           NULL, NULL, NULL,
+                                           reply_task ? on_extension_emit_ready : NULL,
+                                           tracker);
       pending_views++;
     }
   }
@@ -1759,11 +1764,11 @@ ephy_web_extension_manager_emit_in_extension_views_internal (EphyWebExtensionMan
       if (!sender || (sender->view == popup_view))
         continue;
 
-      webkit_web_view_run_javascript (popup_view,
-                                      script,
-                                      NULL,
-                                      reply_task ? on_extension_emit_ready : NULL,
-                                      tracker);
+      webkit_web_view_evaluate_javascript (popup_view,
+                                           script, -1,
+                                           NULL, NULL, NULL,
+                                           reply_task ? on_extension_emit_ready : NULL,
+                                           tracker);
       pending_views++;
     }
   }
-- 
GitLab


From e0d0d6551b9767adc5c9909ac1ca5999a4b7ad83 Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <cgarcia@igalia.com>
Date: Thu, 9 Feb 2023 12:18:01 +0100
Subject: [PATCH 02/10] Favicons are now GdkTexture instead of cairo_surface_t

---
 embed/ephy-web-view.c             | 13 +++---
 embed/ephy-web-view.h             |  2 +-
 lib/ephy-favicon-helpers.c        | 33 +++++++------
 lib/ephy-favicon-helpers.h        |  6 +--
 lib/ephy-suggestion.c             | 13 ++++++
 src/bookmarks/ephy-bookmark-row.c | 18 +++----
 src/ephy-action-bar-start.c       | 14 +++---
 src/ephy-history-dialog.c         | 16 +++----
 src/ephy-page-row.c               |  2 +-
 src/ephy-suggestion-model.c       | 22 +++++----
 src/ephy-tab-view.c               |  2 +-
 src/synced-tabs-dialog.c          |  9 ++--
 src/window-commands.c             | 78 +++++++++++++++++++------------
 13 files changed, 126 insertions(+), 102 deletions(-)

diff --git a/embed/ephy-web-view.c b/embed/ephy-web-view.c
index 0442b3f30..00a788700 100644
--- a/embed/ephy-web-view.c
+++ b/embed/ephy-web-view.c
@@ -89,7 +89,7 @@ struct _EphyWebView {
   char *last_committed_address;
   char *loading_message;
   char *link_message;
-  GdkPixbuf *icon;
+  GIcon *icon;
 
   /* Reader mode */
   gboolean entering_reader_mode;
@@ -515,10 +515,11 @@ _ephy_web_view_update_icon (EphyWebView *view)
   g_clear_object (&view->icon);
 
   if (view->address) {
-    cairo_surface_t *icon_surface = webkit_web_view_get_favicon (WEBKIT_WEB_VIEW (view));
-    if (icon_surface) {
+    GdkTexture *icon_texture = webkit_web_view_get_favicon (WEBKIT_WEB_VIEW (view));
+
+    if (icon_texture) {
       gint scale = gtk_widget_get_scale_factor (GTK_WIDGET (view));
-      view->icon = ephy_pixbuf_get_from_surface_scaled (icon_surface, scale * FAVICON_SIZE, scale * FAVICON_SIZE);
+      view->icon = ephy_favicon_get_from_texture_scaled (icon_texture, scale * FAVICON_SIZE, scale * FAVICON_SIZE);
     }
   }
 
@@ -2716,7 +2717,7 @@ ephy_web_view_load_failed (EphyWebView *view)
  *
  * Return value: (transfer none): a the view's site icon
  **/
-GdkPixbuf *
+GIcon *
 ephy_web_view_get_icon (EphyWebView *view)
 {
   return view->icon;
@@ -3889,7 +3890,7 @@ ephy_web_view_class_init (EphyWebViewClass *klass)
   obj_properties[PROP_ICON] =
     g_param_spec_object ("icon",
                          NULL, NULL,
-                         GDK_TYPE_PIXBUF,
+                         G_TYPE_ICON,
                          G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
 
 /**
diff --git a/embed/ephy-web-view.h b/embed/ephy-web-view.h
index 09d6fb11f..97d74d0e5 100644
--- a/embed/ephy-web-view.h
+++ b/embed/ephy-web-view.h
@@ -87,7 +87,7 @@ void                       ephy_web_view_load_url                 (EphyWebView
                                                                    const char                *url);
 gboolean                   ephy_web_view_is_loading               (EphyWebView               *view);
 gboolean                   ephy_web_view_load_failed              (EphyWebView               *view);
-GdkPixbuf *                ephy_web_view_get_icon                 (EphyWebView               *view);
+GIcon *                    ephy_web_view_get_icon                 (EphyWebView               *view);
 EphyWebViewDocumentType    ephy_web_view_get_document_type        (EphyWebView               *view);
 EphyWebViewNavigationFlags ephy_web_view_get_navigation_flags     (EphyWebView               *view);
 const char *               ephy_web_view_get_status_message       (EphyWebView               *view);
diff --git a/lib/ephy-favicon-helpers.c b/lib/ephy-favicon-helpers.c
index 148ac1cf6..94436d518 100644
--- a/lib/ephy-favicon-helpers.c
+++ b/lib/ephy-favicon-helpers.c
@@ -24,29 +24,28 @@
 #include <gdk/gdk.h>
 #include <glib.h>
 
-GdkPixbuf *
-ephy_pixbuf_get_from_surface_scaled (cairo_surface_t *surface,
-                                     int              width,
-                                     int              height)
+GIcon *
+ephy_favicon_get_from_texture_scaled (GdkTexture *texture,
+                                      int         width,
+                                      int         height)
 {
-  GdkPixbuf *pixbuf;
+  g_autoptr (GdkPixbuf) pixbuf = NULL;
   int favicon_width;
   int favicon_height;
 
-  /* Treat NULL surface cleanly. */
-  if (!surface)
+  /* Treat NULL texture cleanly. */
+  if (texture)
     return NULL;
 
-  favicon_width = cairo_image_surface_get_width (surface);
-  favicon_height = cairo_image_surface_get_height (surface);
-  pixbuf = gdk_pixbuf_get_from_surface (surface, 0, 0, favicon_width, favicon_height);
-
   /* A size of (0, 0) means the original size of the favicon. */
-  if (width && height && (favicon_width != width || favicon_height != height)) {
-    GdkPixbuf *scaled_pixbuf = gdk_pixbuf_scale_simple (pixbuf, width, height, GDK_INTERP_BILINEAR);
-    g_object_unref (pixbuf);
-    pixbuf = scaled_pixbuf;
-  }
+  if (width == 0 && height == 0)
+    return G_ICON (g_object_ref (texture));
+
+  favicon_width = gdk_texture_get_width (texture);
+  favicon_height = gdk_texture_get_height (texture);
+  if (favicon_width == width && favicon_height == height)
+    return G_ICON (g_object_ref (texture));
 
-  return pixbuf;
+  pixbuf = gdk_pixbuf_get_from_texture (texture);
+  return G_ICON (gdk_pixbuf_scale_simple (pixbuf, width, height, GDK_INTERP_BILINEAR));
 }
diff --git a/lib/ephy-favicon-helpers.h b/lib/ephy-favicon-helpers.h
index 72a729fb4..e46e1761c 100644
--- a/lib/ephy-favicon-helpers.h
+++ b/lib/ephy-favicon-helpers.h
@@ -20,11 +20,11 @@
 
 #pragma once
 
-#include <cairo.h>
-#include <gdk-pixbuf/gdk-pixbuf.h>
+#include <gdk/gdk.h>
+#include <glib.h>
 
 G_BEGIN_DECLS
 
-GdkPixbuf *ephy_pixbuf_get_from_surface_scaled (cairo_surface_t *surface, int width, int height);
+GIcon *ephy_favicon_get_from_texture_scaled (GdkTexture *texture, int width, int height);
 
 G_END_DECLS
diff --git a/lib/ephy-suggestion.c b/lib/ephy-suggestion.c
index 31201a8b4..b608c810a 100644
--- a/lib/ephy-suggestion.c
+++ b/lib/ephy-suggestion.c
@@ -75,6 +75,17 @@ ephy_suggestion_get_property (GObject    *object,
   }
 }
 
+static void
+ephy_suggestion_finalize (GObject *object)
+{
+  EphySuggestion *self = EPHY_SUGGESTION (object);
+
+  g_free (self->unescaped_title);
+  g_clear_pointer (&self->favicon, cairo_surface_destroy);
+
+  G_OBJECT_CLASS (ephy_suggestion_parent_class)->finalize (object);
+}
+
 char *
 ephy_suggestion_replace_typed_text (DzlSuggestion *self,
                                     const char    *typed_text)
@@ -105,6 +116,7 @@ ephy_suggestion_class_init (EphySuggestionClass *klass)
 
   object_class->get_property = ephy_suggestion_get_property;
   object_class->set_property = ephy_suggestion_set_property;
+  object_class->finalize = ephy_suggestion_finalize;
 
   dzl_suggestion_class->replace_typed_text = ephy_suggestion_replace_typed_text;
   dzl_suggestion_class->get_icon_surface = ephy_suggestion_get_icon_surface;
@@ -207,6 +219,7 @@ void
 ephy_suggestion_set_favicon (EphySuggestion  *self,
                              cairo_surface_t *favicon)
 {
+  g_clear_pointer (&self->favicon, cairo_surface_destroy);
   self->favicon = favicon;
   g_object_notify (G_OBJECT (self), "icon");
 }
diff --git a/src/bookmarks/ephy-bookmark-row.c b/src/bookmarks/ephy-bookmark-row.c
index e7ce44dbd..45e46a025 100644
--- a/src/bookmarks/ephy-bookmark-row.c
+++ b/src/bookmarks/ephy-bookmark-row.c
@@ -98,22 +98,18 @@ ephy_bookmark_row_favicon_loaded_cb (GObject      *source,
 {
   g_autoptr (EphyBookmarkRow) self = user_data;
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
-  cairo_surface_t *icon_surface;
-  g_autoptr (GdkPixbuf) favicon = NULL;
+  g_autoptr (GdkTexture) icon_texture = NULL;
+  g_autoptr (GIcon) favicon = NULL;
 
   g_assert (EPHY_IS_BOOKMARK_ROW (self));
 
-  icon_surface = webkit_favicon_database_get_favicon_finish (database, result, NULL);
-  if (icon_surface) {
+  icon_texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  if (icon_texture) {
     int scale = gtk_widget_get_scale_factor (self->favicon_image);
 
-    favicon = ephy_pixbuf_get_from_surface_scaled (icon_surface, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    cairo_surface_destroy (icon_surface);
-  }
-
-  if (favicon) {
-    if (self->favicon_image != NULL)
-      gtk_image_set_from_gicon (GTK_IMAGE (self->favicon_image), G_ICON (favicon));
+    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+    if (favicon && self->favicon_image)
+      gtk_image_set_from_gicon (GTK_IMAGE (self->favicon_image), favicon);
   }
 }
 
diff --git a/src/ephy-action-bar-start.c b/src/ephy-action-bar-start.c
index 07109700f..475fba35d 100644
--- a/src/ephy-action-bar-start.c
+++ b/src/ephy-action-bar-start.c
@@ -171,19 +171,17 @@ icon_loaded_cb (GObject      *source,
                 GtkWidget    *image)
 {
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
-  GdkPixbuf *favicon = NULL;
-  cairo_surface_t *icon_surface = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  g_autoptr (GIcon) favicon = NULL;
+  g_autoptr (GdkTexture) icon_texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
 
-  if (icon_surface) {
+  if (icon_texture) {
     int scale = gtk_widget_get_scale_factor (image);
 
-    favicon = ephy_pixbuf_get_from_surface_scaled (icon_surface, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    cairo_surface_destroy (icon_surface);
+    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+    if (favicon)
+      gtk_image_set_from_gicon (GTK_IMAGE (image), favicon);
   }
 
-  if (favicon)
-    gtk_image_set_from_pixbuf (GTK_IMAGE (image), favicon);
-
   g_object_unref (image);
 }
 
diff --git a/src/ephy-history-dialog.c b/src/ephy-history-dialog.c
index 9eb106ee5..01dc63da4 100644
--- a/src/ephy-history-dialog.c
+++ b/src/ephy-history-dialog.c
@@ -425,23 +425,21 @@ ephy_history_dialog_row_favicon_loaded_cb (GObject      *source,
 {
   g_autoptr (GtkWidget) icon = user_data;
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
-  cairo_surface_t *icon_surface;
-  g_autoptr (GdkPixbuf) favicon = NULL;
+  g_autoptr (GdkTexture) icon_texture = NULL;
+  g_autoptr (GIcon) favicon = NULL;
   g_autoptr (GError) error = NULL;
 
-  icon_surface = webkit_favicon_database_get_favicon_finish (database, result, &error);
+  icon_texture = webkit_favicon_database_get_favicon_finish (database, result, &error);
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     return;
 
-  if (icon_surface) {
+  if (icon_texture) {
     int scale = gtk_widget_get_scale_factor (icon);
 
-    favicon = ephy_pixbuf_get_from_surface_scaled (icon_surface, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    cairo_surface_destroy (icon_surface);
+    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+    if (favicon && icon)
+      gtk_image_set_from_gicon (GTK_IMAGE (icon), favicon);
   }
-
-  if (favicon && icon)
-    gtk_image_set_from_gicon (GTK_IMAGE (icon), G_ICON (favicon));
 }
 
 static GtkWidget *
diff --git a/src/ephy-page-row.c b/src/ephy-page-row.c
index eb99c05b0..618921bbf 100644
--- a/src/ephy-page-row.c
+++ b/src/ephy-page-row.c
@@ -114,7 +114,7 @@ update_icon_cb (EphyPageRow *self)
 {
   EphyEmbed *embed = EPHY_EMBED (adw_tab_page_get_child (self->page));
   EphyWebView *view = ephy_embed_get_web_view (embed);
-  GIcon *icon = G_ICON (ephy_web_view_get_icon (view));
+  GIcon *icon = ephy_web_view_get_icon (view);
   const char *uri, *favicon_name;
   AdwTabView *tab_view;
 
diff --git a/src/ephy-suggestion-model.c b/src/ephy-suggestion-model.c
index 29321e9eb..b34e486bb 100644
--- a/src/ephy-suggestion-model.c
+++ b/src/ephy-suggestion-model.c
@@ -254,23 +254,27 @@ icon_loaded_cb (GObject      *source,
 {
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
   EphySuggestion *suggestion;
-  GError *error = NULL;
+  g_autoptr (GdkTexture) texture = NULL;
   cairo_surface_t *favicon;
   gdouble x_scale, y_scale;
-  int x, y;
+  int w, h;
 
-  favicon = webkit_favicon_database_get_favicon_finish (database, result, &error);
-
-  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED) || favicon == NULL)
+  texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  if (texture == NULL)
     return;
 
   suggestion = EPHY_SUGGESTION (user_data);
 
-  x = cairo_image_surface_get_width (favicon);
-  y = cairo_image_surface_get_height (favicon);
-  x_scale = (gdouble)x / 16;
-  y_scale = (gdouble)y / 16;
+  w = gdk_texture_get_width (texture);
+  h = gdk_texture_get_height (texture);
+  favicon = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, w, h);
+  gdk_texture_download (texture,
+                        cairo_image_surface_get_data (favicon),
+                        cairo_image_surface_get_stride (favicon));
+  cairo_surface_mark_dirty (favicon);
 
+  x_scale = (gdouble)w / 16;
+  y_scale = (gdouble)h / 16;
   cairo_surface_set_device_scale (favicon, x_scale, y_scale);
 
   ephy_suggestion_set_favicon (suggestion, favicon);
diff --git a/src/ephy-tab-view.c b/src/ephy-tab-view.c
index 60b57dd4c..2933ef091 100644
--- a/src/ephy-tab-view.c
+++ b/src/ephy-tab-view.c
@@ -382,7 +382,7 @@ update_icon_cb (AdwTabPage *page)
 {
   EphyEmbed *embed = EPHY_EMBED (adw_tab_page_get_child (page));
   EphyWebView *view = ephy_embed_get_web_view (embed);
-  GIcon *icon = G_ICON (ephy_web_view_get_icon (view));
+  GIcon *icon = ephy_web_view_get_icon (view);
   g_autoptr (GIcon) placeholder_icon = NULL;
   const char *uri, *favicon_name;
 
diff --git a/src/synced-tabs-dialog.c b/src/synced-tabs-dialog.c
index e8bf95fcd..c6539bc4c 100644
--- a/src/synced-tabs-dialog.c
+++ b/src/synced-tabs-dialog.c
@@ -135,16 +135,13 @@ synced_tabs_dialog_favicon_loaded_cb (GObject      *source,
 {
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
   PopulateRowAsyncData *data = (PopulateRowAsyncData *)user_data;
-  cairo_surface_t *surface;
+  g_autoptr (GdkTexture) texture = NULL;
   g_autoptr (GIcon) favicon = NULL;
   GtkTreeIter parent_iter;
   char *escaped_url;
 
-  surface = webkit_favicon_database_get_favicon_finish (database, result, NULL);
-  if (surface) {
-    favicon = G_ICON (ephy_pixbuf_get_from_surface_scaled (surface, FAVICON_SIZE, FAVICON_SIZE));
-    cairo_surface_destroy (surface);
-  }
+  texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  favicon = ephy_favicon_get_from_texture_scaled (texture, FAVICON_SIZE, FAVICON_SIZE);
 
   gtk_tree_model_get_iter_first (data->dialog->treestore, &parent_iter);
   for (guint i = 0; i < data->parent_index; i++)
diff --git a/src/window-commands.c b/src/window-commands.c
index dd0b93716..df2a97836 100644
--- a/src/window-commands.c
+++ b/src/window-commands.c
@@ -1529,12 +1529,51 @@ rounded_rectangle (cairo_t *cr,
 }
 
 static GdkPixbuf *
-frame_pixbuf (GdkPixbuf *pixbuf,
+scaled_pixbuf_from_icon (GIcon *icon,
+                         int    width,
+                         int    height)
+{
+  g_autoptr (GdkPixbuf) pixbuf = NULL;
+  int w, h;
+  GdkPixbuf *scaled;
+
+  if (!icon)
+    return NULL;
+
+  if (GDK_IS_PIXBUF (icon))
+    pixbuf = GDK_PIXBUF (g_object_ref (icon));
+  else if (GDK_IS_TEXTURE (icon))
+    pixbuf = gdk_pixbuf_get_from_texture (GDK_TEXTURE (icon));
+  else
+    g_assert_not_reached ();
+
+  w = gdk_pixbuf_get_width (pixbuf);
+  h = gdk_pixbuf_get_height (pixbuf);
+
+  if (w < 48 || h < 48) {
+    scaled = gdk_pixbuf_scale_simple (pixbuf, w * 3, h * 3, GDK_INTERP_NEAREST);
+  } else if (w > width || h > height) {
+    double ws, hs, s;
+
+    ws = (double)width / w;
+    hs = (double)height / h;
+    s = MIN (ws, hs);
+    scaled = gdk_pixbuf_scale_simple (pixbuf, w * s, h * s, GDK_INTERP_BILINEAR);
+  } else {
+    scaled = g_object_ref (pixbuf);
+  }
+
+  return scaled;
+}
+
+static GdkPixbuf *
+frame_pixbuf (GIcon     *icon,
               GdkRGBA   *rgba,
               int        width,
               int        height)
 {
   GdkPixbuf *framed;
+  g_autoptr (GdkPixbuf) scaled = NULL;
   cairo_surface_t *surface;
   cairo_t *cr;
   int frame_width;
@@ -1564,34 +1603,14 @@ frame_pixbuf (GdkPixbuf *pixbuf,
     cairo_set_source_rgba (cr, 0.5, 0.5, 0.5, 0.3);
   cairo_fill_preserve (cr);
 
-  if (pixbuf != NULL) {
-    GdkPixbuf *scaled;
-    int w;
-    int h;
-
-    w = gdk_pixbuf_get_width (pixbuf);
-    h = gdk_pixbuf_get_height (pixbuf);
-
-    if (w < 48 || h < 48) {
-      scaled = gdk_pixbuf_scale_simple (pixbuf, w * 3, h * 3, GDK_INTERP_NEAREST);
-    } else if (w > width || h > height) {
-      double ws, hs, s;
-
-      ws = (double)width / w;
-      hs = (double)height / h;
-      s = MIN (ws, hs);
-      scaled = gdk_pixbuf_scale_simple (pixbuf, w * s, h * s, GDK_INTERP_BILINEAR);
-    } else {
-      scaled = g_object_ref (pixbuf);
-    }
-
-    w = gdk_pixbuf_get_width (scaled);
-    h = gdk_pixbuf_get_height (scaled);
+  scaled = scaled_pixbuf_from_icon (icon, width, height);
+  if (scaled != NULL) {
+    int w = gdk_pixbuf_get_width (scaled);
+    int h = gdk_pixbuf_get_height (scaled);
 
     gdk_cairo_set_source_pixbuf (cr, scaled,
                                  (width - w) / 2,
                                  (height - h) / 2);
-    g_object_unref (scaled);
     cairo_fill (cr);
   }
 
@@ -1607,11 +1626,10 @@ static void create_install_dialog_when_ready (EphyApplicationDialogData *data);
 static void
 set_image_from_favicon (EphyApplicationDialogData *data)
 {
-  g_autoptr (GdkPixbuf) icon = NULL;
-  cairo_surface_t *icon_surface = webkit_web_view_get_favicon (WEBKIT_WEB_VIEW (data->view));
+  g_autoptr (GIcon) icon = NULL;
+  g_autoptr (GdkTexture) icon_texture = webkit_web_view_get_favicon (WEBKIT_WEB_VIEW (data->view));
 
-  if (icon_surface)
-    icon = ephy_pixbuf_get_from_surface_scaled (icon_surface, 0, 0);
+  icon = ephy_favicon_get_from_texture_scaled (icon_texture, 0, 0);
 
   if (icon != NULL) {
     data->framed_pixbuf = frame_pixbuf (icon, NULL, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
@@ -1634,7 +1652,7 @@ set_app_icon_from_filename (EphyApplicationDialogData *data,
   pixbuf = gdk_pixbuf_new_from_file_at_size (filename, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE, NULL);
 
   if (pixbuf != NULL) {
-    data->framed_pixbuf = frame_pixbuf (pixbuf, &data->icon_rgba, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
+    data->framed_pixbuf = frame_pixbuf (G_ICON (pixbuf), &data->icon_rgba, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
     g_assert (data->icon_v == NULL);
     data->icon_v = g_icon_serialize (G_ICON (data->framed_pixbuf));
     create_install_dialog_when_ready (data);
-- 
GitLab


From 18a677edb275f04654c083ab107a177c04404393 Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <cgarcia@igalia.com>
Date: Thu, 9 Feb 2023 12:32:47 +0100
Subject: [PATCH 03/10] Web view snapshot is now a GdkTexture instead of
 cairo_surface_t

---
 lib/ephy-snapshot-service.c | 25 ++++++++++------------
 src/window-commands.c       | 42 ++++++-------------------------------
 2 files changed, 17 insertions(+), 50 deletions(-)

diff --git a/lib/ephy-snapshot-service.c b/lib/ephy-snapshot-service.c
index 85b842b04..7c203687d 100644
--- a/lib/ephy-snapshot-service.c
+++ b/lib/ephy-snapshot-service.c
@@ -212,22 +212,21 @@ out:
 }
 
 static GdkPixbuf *
-ephy_snapshot_service_prepare_snapshot (cairo_surface_t *surface)
+ephy_snapshot_service_prepare_snapshot (GdkTexture *texture)
 {
   GdkPixbuf *snapshot, *scaled;
   int orig_width, orig_height;
 
-  orig_width = cairo_image_surface_get_width (surface);
-  orig_height = cairo_image_surface_get_height (surface);
+  orig_width = gdk_texture_get_width (texture);
+  orig_height = gdk_texture_get_height (texture);
 
   if (!orig_width || !orig_height)
     return NULL;
 
+  snapshot = gdk_pixbuf_get_from_texture (texture);
+
   if (orig_width < EPHY_THUMBNAIL_WIDTH ||
       orig_height < EPHY_THUMBNAIL_HEIGHT) {
-    snapshot = gdk_pixbuf_get_from_surface (surface,
-                                            0, 0,
-                                            orig_width, orig_height);
     scaled = gdk_pixbuf_scale_simple (snapshot,
                                       EPHY_THUMBNAIL_WIDTH,
                                       EPHY_THUMBNAIL_HEIGHT,
@@ -236,7 +235,6 @@ ephy_snapshot_service_prepare_snapshot (cairo_surface_t *surface)
     gfloat width_ratio = (gfloat)EPHY_THUMBNAIL_WIDTH / (gfloat)orig_width;
     gfloat new_height = orig_height * width_ratio;
 
-    snapshot = gdk_pixbuf_get_from_surface (surface, 0, 0, orig_width, orig_height);
     scaled = gdk_pixbuf_scale_simple (snapshot,
                                       EPHY_THUMBNAIL_WIDTH,
                                       new_height,
@@ -393,12 +391,12 @@ snapshot_saved (EphySnapshotService *service,
 }
 
 static void
-save_snapshot (cairo_surface_t *surface,
-               GTask           *task)
+save_snapshot (GdkTexture *texture,
+               GTask      *task)
 {
   SnapshotAsyncData *data = g_task_get_task_data (task);
 
-  data->snapshot = ephy_snapshot_service_prepare_snapshot (surface);
+  data->snapshot = ephy_snapshot_service_prepare_snapshot (texture);
   if (!data->snapshot) {
     g_task_return_new_error (task,
                              EPHY_SNAPSHOT_SERVICE_ERROR,
@@ -421,18 +419,17 @@ on_snapshot_ready (WebKitWebView *web_view,
                    GAsyncResult  *result,
                    GTask         *task)
 {
-  cairo_surface_t *surface;
+  g_autoptr (GdkTexture) texture = NULL;
   GError *error = NULL;
 
-  surface = webkit_web_view_get_snapshot_finish (web_view, result, &error);
+  texture = webkit_web_view_get_snapshot_finish (web_view, result, &error);
   if (error) {
     g_task_return_error (task, error);
     g_object_unref (task);
     return;
   }
 
-  save_snapshot (surface, task);
-  cairo_surface_destroy (surface);
+  save_snapshot (texture, task);
 }
 
 static gboolean
diff --git a/src/window-commands.c b/src/window-commands.c
index df2a97836..ba6b8eecd 100644
--- a/src/window-commands.c
+++ b/src/window-commands.c
@@ -2027,56 +2027,26 @@ get_suggested_filename (EphyEmbed *embed)
 }
 
 
-static void
-save_snapshot (cairo_surface_t *surface,
-               const char      *file)
-{
-  g_autoptr (GdkPixbuf) pixbuf = NULL;
-  g_autofree char *snapshot_path = NULL;
-  g_autoptr (GError) error = NULL;
-  int width;
-  int height;
-  gboolean ret;
-
-  /* Create a pixbuf */
-  width = cairo_image_surface_get_width (surface);
-  height = cairo_image_surface_get_height (surface);
-
-  pixbuf = gdk_pixbuf_get_from_surface (surface, 0, 0, width, height);
-  if (!pixbuf)
-    return;
-
-  ret = gdk_pixbuf_save (pixbuf, file, "png", &error, NULL);
-  if (!ret) {
-    g_warning ("Failed to save image to %s: %s", snapshot_path, error->message);
-    return;
-  }
-}
-
 static void
 take_snapshot_full_cb (GObject      *source,
                        GAsyncResult *res,
                        gpointer      user_data)
 {
-  WebKitWebView *view = WEBKIT_WEB_VIEW (source);
-  GError *error = NULL;
-  cairo_surface_t *surface;
-  gchar *file = user_data;
+  g_autoptr (WebKitWebView) view = WEBKIT_WEB_VIEW (source);
+  g_autoptr (GError) error = NULL;
+  g_autoptr (GdkTexture) texture = NULL;
+  g_autofree char *file = user_data;
 
   if (!file)
     return;
 
-  surface = webkit_web_view_get_snapshot_finish (view, res, &error);
+  texture = webkit_web_view_get_snapshot_finish (view, res, &error);
   if (error) {
     g_warning ("Failed to take snapshot: %s", error->message);
     return;
   }
 
-  save_snapshot (surface, file);
-  cairo_surface_destroy (surface);
-
-  g_free (file);
-  g_object_unref (view);
+  gdk_texture_save_to_png (texture, file);
 }
 
 void
-- 
GitLab


From f521cb076a44a8a6db1ccf2467fd2ffb396dda57 Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <cgarcia@igalia.com>
Date: Thu, 9 Feb 2023 12:41:41 +0100
Subject: [PATCH 04/10] Use
 webkit_web_context_get_network_session_for_automation()

And remove a few null checks that are no longer needed.
---
 embed/ephy-embed-prefs.c |  3 ---
 embed/ephy-embed-shell.c | 24 ++++++++----------------
 2 files changed, 8 insertions(+), 19 deletions(-)

diff --git a/embed/ephy-embed-prefs.c b/embed/ephy-embed-prefs.c
index e61bc8fd3..86c5f506c 100644
--- a/embed/ephy-embed-prefs.c
+++ b/embed/ephy-embed-prefs.c
@@ -457,9 +457,6 @@ webkit_pref_callback_enable_website_data_storage (GSettings  *settings,
   WebKitCookieManager *manager;
   gboolean value;
 
-  if (ephy_embed_shell_get_mode (shell) == EPHY_EMBED_SHELL_MODE_AUTOMATION)
-    return;
-
   value = g_settings_get_boolean (settings, key);
   webkit_settings_set_enable_html5_database (webkit_settings, value);
   webkit_settings_set_enable_html5_local_storage (webkit_settings, value);
diff --git a/embed/ephy-embed-shell.c b/embed/ephy-embed-shell.c
index 5c5268d1b..8f76ea583 100644
--- a/embed/ephy-embed-shell.c
+++ b/embed/ephy-embed-shell.c
@@ -763,9 +763,8 @@ ephy_embed_shell_create_network_session_if_needed (EphyEmbedShell *shell)
   EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
 
   if (priv->mode == EPHY_EMBED_SHELL_MODE_AUTOMATION)
-    return;
-
-  if (priv->mode == EPHY_EMBED_SHELL_MODE_INCOGNITO)
+    priv->network_session = g_object_ref (webkit_web_context_get_network_session_for_automation (priv->web_context));
+  else if (priv->mode == EPHY_EMBED_SHELL_MODE_INCOGNITO)
     priv->network_session = webkit_network_session_new_ephemeral ();
   else {
     priv->network_session = webkit_network_session_new (ephy_profile_dir (), ephy_cache_dir ());
@@ -902,25 +901,21 @@ ephy_embed_shell_startup (GApplication *application)
                                                          "ephy-resource");
 
   /* Store cookies in moz-compatible SQLite format */
-  if (priv->network_session && !webkit_network_session_is_ephemeral (priv->network_session)) {
+  if (!webkit_network_session_is_ephemeral (priv->network_session)) {
     cookie_manager = webkit_network_session_get_cookie_manager (priv->network_session);
     filename = g_build_filename (ephy_profile_dir (), "cookies.sqlite", NULL);
     webkit_cookie_manager_set_persistent_storage (cookie_manager, filename,
                                                   WEBKIT_COOKIE_PERSISTENT_STORAGE_SQLITE);
   }
 
-  if (priv->network_session) {
-    g_signal_connect_object (priv->network_session, "download-started",
-                             G_CALLBACK (download_started_cb), shell, G_CONNECT_SWAPPED);
-  }
+  g_signal_connect_object (priv->network_session, "download-started",
+                           G_CALLBACK (download_started_cb), shell, G_CONNECT_SWAPPED);
 
   g_signal_connect_object (EPHY_SETTINGS_WEB, "changed::remember-passwords",
                            G_CALLBACK (remember_passwords_setting_changed_cb), shell, 0);
 
-  if (priv->mode != EPHY_EMBED_SHELL_MODE_AUTOMATION) {
-    g_signal_connect_object (EPHY_SETTINGS_WEB, "changed::enable-itp",
-                             G_CALLBACK (enable_itp_setting_changed_cb), shell, 0);
-  }
+  g_signal_connect_object (EPHY_SETTINGS_WEB, "changed::enable-itp",
+                           G_CALLBACK (enable_itp_setting_changed_cb), shell, 0);
 }
 
 static void
@@ -978,8 +973,8 @@ ephy_embed_shell_constructed (GObject *object)
   priv = ephy_embed_shell_get_instance_private (shell);
   priv->guid = g_dbus_generate_guid ();
 
-  ephy_embed_shell_create_network_session_if_needed (shell);
   ephy_embed_shell_create_web_context (shell);
+  ephy_embed_shell_create_network_session_if_needed (shell);
 
   priv->permissions_manager = ephy_permissions_manager_new ();
   priv->filters_manager = ephy_filters_manager_new (NULL);
@@ -1347,9 +1342,6 @@ ephy_embed_shell_get_favicon_database (EphyEmbedShell *shell)
   EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
   WebKitWebsiteDataManager *manager;
 
-  if (!priv->network_session)
-    return NULL;
-
   manager = webkit_network_session_get_website_data_manager (priv->network_session);
   return webkit_website_data_manager_get_favicon_database (manager);
 }
-- 
GitLab


From ffe594b6f88d9382ea87ba056cf15ff8976cb804 Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <cgarcia@igalia.com>
Date: Thu, 9 Feb 2023 12:58:08 +0100
Subject: [PATCH 05/10] Always enable favicons

Remove a few null checks that are no longer needed.
---
 embed/ephy-embed-shell.c          |  6 +++++-
 src/bookmarks/ephy-bookmark-row.c |  3 ---
 src/ephy-action-bar-start.c       | 10 ++++------
 src/ephy-history-dialog.c         | 12 +++++-------
 src/ephy-suggestion-model.c       |  3 ---
 src/synced-tabs-dialog.c          |  8 +++-----
 src/webextension/api/tabs.c       |  2 +-
 7 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/embed/ephy-embed-shell.c b/embed/ephy-embed-shell.c
index 8f76ea583..7a249ea28 100644
--- a/embed/ephy-embed-shell.c
+++ b/embed/ephy-embed-shell.c
@@ -162,7 +162,7 @@ tabs_catalog_get_tabs_info (EphyTabsCatalog *catalog)
         continue;
 
       url = ephy_web_view_get_display_address (ephy_embed_get_web_view (t->data));
-      favicon = database ? webkit_favicon_database_get_favicon_uri (database, url) : NULL;
+      favicon = webkit_favicon_database_get_favicon_uri (database, url);
 
       tabs_info = g_list_prepend (tabs_info,
                                   ephy_tab_info_new (title, url, favicon));
@@ -847,6 +847,7 @@ ephy_embed_shell_startup (GApplication *application)
 {
   EphyEmbedShell *shell = EPHY_EMBED_SHELL (application);
   EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
+  WebKitWebsiteDataManager *data_manager;
   WebKitCookieManager *cookie_manager;
   g_autofree char *filename = NULL;
 
@@ -870,6 +871,9 @@ ephy_embed_shell_startup (GApplication *application)
 
   priv->password_manager = ephy_password_manager_new ();
 
+  data_manager = webkit_network_session_get_website_data_manager (priv->network_session);
+  webkit_website_data_manager_set_favicons_enabled (data_manager, TRUE);
+
   /* about: URIs handler */
   priv->about_handler = ephy_about_handler_new ();
   webkit_web_context_register_uri_scheme (priv->web_context,
diff --git a/src/bookmarks/ephy-bookmark-row.c b/src/bookmarks/ephy-bookmark-row.c
index 45e46a025..6a9ba842a 100644
--- a/src/bookmarks/ephy-bookmark-row.c
+++ b/src/bookmarks/ephy-bookmark-row.c
@@ -215,9 +215,6 @@ ephy_bookmark_row_constructed (GObject *object)
                    G_SETTINGS_BIND_INVERT_BOOLEAN);
 
   database = ephy_embed_shell_get_favicon_database (shell);
-  if (!database)
-    return;
-
   webkit_favicon_database_get_favicon (database,
                                        ephy_bookmark_get_url (self->bookmark),
                                        NULL,
diff --git a/src/ephy-action-bar-start.c b/src/ephy-action-bar-start.c
index 475fba35d..538eba8ff 100644
--- a/src/ephy-action-bar-start.c
+++ b/src/ephy-action-bar-start.c
@@ -239,12 +239,10 @@ build_history_row (EphyActionBarStart        *action_bar_start,
     gtk_label_set_label (GTK_LABEL (label), uri);
 
   database = ephy_embed_shell_get_favicon_database (shell);
-  if (database) {
-    webkit_favicon_database_get_favicon (database, uri,
-                                         NULL,
-                                         (GAsyncReadyCallback)icon_loaded_cb,
-                                         g_object_ref (icon));
-  }
+  webkit_favicon_database_get_favicon (database, uri,
+                                       NULL,
+                                       (GAsyncReadyCallback)icon_loaded_cb,
+                                       g_object_ref (icon));
 
   g_object_set_data_full (G_OBJECT (row), "link-message",
                           g_strdup (uri), (GDestroyNotify)g_free);
diff --git a/src/ephy-history-dialog.c b/src/ephy-history-dialog.c
index 01dc63da4..904ec54ee 100644
--- a/src/ephy-history-dialog.c
+++ b/src/ephy-history-dialog.c
@@ -471,13 +471,11 @@ create_row (EphyHistoryDialog *self,
   adw_action_row_add_prefix (ADW_ACTION_ROW (row), icon);
 
   database = ephy_embed_shell_get_favicon_database (shell);
-  if (database) {
-    webkit_favicon_database_get_favicon (database,
-                                         url->url,
-                                         self->cancellable,
-                                         (GAsyncReadyCallback)ephy_history_dialog_row_favicon_loaded_cb,
-                                         g_object_ref (icon));
-  }
+  webkit_favicon_database_get_favicon (database,
+                                       url->url,
+                                       self->cancellable,
+                                       (GAsyncReadyCallback)ephy_history_dialog_row_favicon_loaded_cb,
+                                       g_object_ref (icon));
 
   /* Date */
   date = gtk_label_new (ephy_time_helpers_utf_friendly_time (url->last_visit_time / 1000000));
diff --git a/src/ephy-suggestion-model.c b/src/ephy-suggestion-model.c
index b34e486bb..176e2e593 100644
--- a/src/ephy-suggestion-model.c
+++ b/src/ephy-suggestion-model.c
@@ -288,9 +288,6 @@ load_favicon (EphySuggestionModel *model,
   EphyEmbedShell *shell = ephy_embed_shell_get_default ();
   WebKitFaviconDatabase *database = ephy_embed_shell_get_favicon_database (shell);
 
-  if (!database)
-    return;
-
   webkit_favicon_database_get_favicon (database,
                                        url,
                                        model->icon_cancellable,
diff --git a/src/synced-tabs-dialog.c b/src/synced-tabs-dialog.c
index c6539bc4c..807c2e2f6 100644
--- a/src/synced-tabs-dialog.c
+++ b/src/synced-tabs-dialog.c
@@ -206,11 +206,9 @@ synced_tabs_dialog_populate_from_record (SyncedTabsDialog   *dialog,
     url = json_array_get_string_element (url_history, 0);
 
     data = populate_row_async_data_new (dialog, title, url, index);
-    if (dialog->database) {
-      webkit_favicon_database_get_favicon (dialog->database, url, NULL,
-                                           synced_tabs_dialog_favicon_loaded_cb,
-                                           data);
-    }
+    webkit_favicon_database_get_favicon (dialog->database, url, NULL,
+                                         synced_tabs_dialog_favicon_loaded_cb,
+                                         data);
   }
 }
 G_GNUC_END_IGNORE_DEPRECATIONS
diff --git a/src/webextension/api/tabs.c b/src/webextension/api/tabs.c
index 51a4ab1d0..c80c1c6d3 100644
--- a/src/webextension/api/tabs.c
+++ b/src/webextension/api/tabs.c
@@ -75,7 +75,7 @@ add_web_view_to_json (EphyWebExtension *extension,
   GtkWidget *page = gtk_widget_get_parent (gtk_widget_get_parent (GTK_WIDGET (web_view)));
   gboolean is_active = ephy_tab_view_get_current_page (tab_view) == page;
   WebKitFaviconDatabase *favicon_db = ephy_embed_shell_get_favicon_database (ephy_embed_shell_get_default ());
-  const char *favicon_uri = favicon_db ? webkit_favicon_database_get_favicon_uri (favicon_db, ephy_web_view_get_address (web_view)) : NULL;
+  const char *favicon_uri = webkit_favicon_database_get_favicon_uri (favicon_db, ephy_web_view_get_address (web_view));
   gboolean has_tab_permission = ephy_web_extension_has_tab_or_host_permission (extension, web_view, TRUE);
 
   json_builder_begin_object (builder);
-- 
GitLab


From 26d7e42650f685018dcf9ee2b1f6e661c79f51e9 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Mon, 13 Feb 2023 15:14:35 -0600
Subject: [PATCH 06/10] Use cancellables for all favicon lookups

Notably, I don't print error messages when lookup fails because this
seems like something that could commonly occur, and printing errors
might be spammy.

Also note that the lifetime of EphyBookmarkRow changes a bit: a favicon
lookup will no longer keep the EphyBookmarkRow alive.
---
 src/bookmarks/ephy-bookmark-row.c | 39 +++++++++++++------------------
 src/ephy-action-bar-start.c       | 30 ++++++++++++++++--------
 src/ephy-history-dialog.c         | 23 +++++++-----------
 src/synced-tabs-dialog.c          | 15 ++++++++++--
 4 files changed, 58 insertions(+), 49 deletions(-)

diff --git a/src/bookmarks/ephy-bookmark-row.c b/src/bookmarks/ephy-bookmark-row.c
index 6a9ba842a..e9109e202 100644
--- a/src/bookmarks/ephy-bookmark-row.c
+++ b/src/bookmarks/ephy-bookmark-row.c
@@ -31,6 +31,7 @@ struct _EphyBookmarkRow {
   GtkListBoxRow parent_instance;
 
   EphyBookmark *bookmark;
+  GCancellable *cancellable;
 
   GtkWidget *favicon_image;
   GtkWidget *title_label;
@@ -96,21 +97,22 @@ ephy_bookmark_row_favicon_loaded_cb (GObject      *source,
                                      GAsyncResult *result,
                                      gpointer      user_data)
 {
-  g_autoptr (EphyBookmarkRow) self = user_data;
+  EphyBookmarkRow *self = user_data;
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
   g_autoptr (GdkTexture) icon_texture = NULL;
   g_autoptr (GIcon) favicon = NULL;
+  int scale;
 
   g_assert (EPHY_IS_BOOKMARK_ROW (self));
 
   icon_texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
-  if (icon_texture) {
-    int scale = gtk_widget_get_scale_factor (self->favicon_image);
+  if (!icon_texture)
+    return;
 
-    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    if (favicon && self->favicon_image)
-      gtk_image_set_from_gicon (GTK_IMAGE (self->favicon_image), favicon);
-  }
+  scale = gtk_widget_get_scale_factor (self->favicon_image);
+  favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+  if (favicon && self->favicon_image)
+    gtk_image_set_from_gicon (GTK_IMAGE (self->favicon_image), favicon);
 }
 
 static void
@@ -154,14 +156,10 @@ ephy_bookmark_row_dispose (GObject *object)
 
   g_clear_object (&self->bookmark);
 
-  G_OBJECT_CLASS (ephy_bookmark_row_parent_class)->dispose (object);
-}
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
 
-static void
-favicon_image_destroyed (EphyBookmarkRow *self,
-                         GtkWidget       *favicon_image)
-{
-  self->favicon_image = NULL;
+  G_OBJECT_CLASS (ephy_bookmark_row_parent_class)->dispose (object);
 }
 
 static gboolean
@@ -217,16 +215,9 @@ ephy_bookmark_row_constructed (GObject *object)
   database = ephy_embed_shell_get_favicon_database (shell);
   webkit_favicon_database_get_favicon (database,
                                        ephy_bookmark_get_url (self->bookmark),
-                                       NULL,
+                                       self->cancellable,
                                        (GAsyncReadyCallback)ephy_bookmark_row_favicon_loaded_cb,
-                                       g_object_ref (self));
-
-  /* Although we keep a ref to ourself during the favicon load, so we are
-   * guaranteed to remain a valid GObject, the widget hierarchy could still
-   * be destroyed before ephy_bookmark_favicon_loaded_cb() is called. Hence we
-   * need to keep track of whether self->favicon_image is still valid. */
-  g_signal_connect_object (self->favicon_image, "destroy",
-                           G_CALLBACK (favicon_image_destroyed), self, G_CONNECT_SWAPPED);
+                                       self);
 }
 
 static void
@@ -264,6 +255,8 @@ ephy_bookmark_row_init (EphyBookmarkRow *self)
                            G_CALLBACK (ephy_bookmark_row_button_clicked_cb),
                            self,
                            G_CONNECT_SWAPPED);
+
+  self->cancellable = g_cancellable_new ();
 }
 
 GtkWidget *
diff --git a/src/ephy-action-bar-start.c b/src/ephy-action-bar-start.c
index 538eba8ff..b43a7a29d 100644
--- a/src/ephy-action-bar-start.c
+++ b/src/ephy-action-bar-start.c
@@ -47,6 +47,8 @@ struct _EphyActionBarStart {
   GtkWidget *placeholder;
 
   GtkWidget *history_menu;
+
+  GCancellable *cancellable;
 };
 
 G_DEFINE_TYPE (EphyActionBarStart, ephy_action_bar_start, GTK_TYPE_BOX)
@@ -168,21 +170,21 @@ history_row_released_cb (GtkGesture         *gesture,
 static void
 icon_loaded_cb (GObject      *source,
                 GAsyncResult *result,
-                GtkWidget    *image)
+                gpointer      user_data)
 {
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
+  g_autoptr (GtkWidget) image = user_data;
   g_autoptr (GIcon) favicon = NULL;
   g_autoptr (GdkTexture) icon_texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  int scale;
 
-  if (icon_texture) {
-    int scale = gtk_widget_get_scale_factor (image);
-
-    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    if (favicon)
-      gtk_image_set_from_gicon (GTK_IMAGE (image), favicon);
-  }
+  if (!icon_texture)
+    return;
 
-  g_object_unref (image);
+  scale = gtk_widget_get_scale_factor (image);
+  favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+  if (favicon)
+    gtk_image_set_from_gicon (GTK_IMAGE (image), favicon);
 }
 
 static GList *
@@ -240,7 +242,7 @@ build_history_row (EphyActionBarStart        *action_bar_start,
 
   database = ephy_embed_shell_get_favicon_database (shell);
   webkit_favicon_database_get_favicon (database, uri,
-                                       NULL,
+                                       action_bar_start->cancellable,
                                        (GAsyncReadyCallback)icon_loaded_cb,
                                        g_object_ref (icon));
 
@@ -308,6 +310,10 @@ history_menu_closed_cb (EphyActionBarStart *action_bar_start)
 
   g_clear_pointer (&action_bar_start->history_menu, gtk_widget_unparent);
   gtk_widget_unset_state_flags (parent, GTK_STATE_FLAG_CHECKED);
+
+  g_cancellable_cancel (action_bar_start->cancellable);
+  g_clear_object (&action_bar_start->cancellable);
+  action_bar_start->cancellable = g_cancellable_new ();
 }
 
 static void
@@ -433,6 +439,9 @@ ephy_action_bar_start_dispose (GObject *object)
 
   g_clear_pointer (&action_bar_start->history_menu, gtk_widget_unparent);
 
+  g_cancellable_cancel (action_bar_start->cancellable);
+  g_clear_object (&action_bar_start->cancellable);
+
   G_OBJECT_CLASS (ephy_action_bar_start_parent_class)->dispose (object);
 }
 
@@ -531,6 +540,7 @@ ephy_action_bar_start_class_init (EphyActionBarStartClass *klass)
 static void
 ephy_action_bar_start_init (EphyActionBarStart *action_bar_start)
 {
+  action_bar_start->cancellable = g_cancellable_new ();
 }
 
 EphyActionBarStart *
diff --git a/src/ephy-history-dialog.c b/src/ephy-history-dialog.c
index 904ec54ee..ed389aa41 100644
--- a/src/ephy-history-dialog.c
+++ b/src/ephy-history-dialog.c
@@ -427,19 +427,16 @@ ephy_history_dialog_row_favicon_loaded_cb (GObject      *source,
   WebKitFaviconDatabase *database = WEBKIT_FAVICON_DATABASE (source);
   g_autoptr (GdkTexture) icon_texture = NULL;
   g_autoptr (GIcon) favicon = NULL;
-  g_autoptr (GError) error = NULL;
+  int scale;
 
-  icon_texture = webkit_favicon_database_get_favicon_finish (database, result, &error);
-  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+  icon_texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  if (!icon_texture)
     return;
 
-  if (icon_texture) {
-    int scale = gtk_widget_get_scale_factor (icon);
-
-    favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
-    if (favicon && icon)
-      gtk_image_set_from_gicon (GTK_IMAGE (icon), favicon);
-  }
+  scale = gtk_widget_get_scale_factor (icon);
+  favicon = ephy_favicon_get_from_texture_scaled (icon_texture, FAVICON_SIZE * scale, FAVICON_SIZE * scale);
+  if (favicon && icon)
+    gtk_image_set_from_gicon (GTK_IMAGE (icon), favicon);
 }
 
 static GtkWidget *
@@ -770,10 +767,8 @@ ephy_history_dialog_dispose (GObject *object)
 {
   EphyHistoryDialog *self = EPHY_HISTORY_DIALOG (object);
 
-  if (self->cancellable) {
-    g_cancellable_cancel (self->cancellable);
-    g_clear_object (&self->cancellable);
-  }
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
 
   g_clear_object (&self->history_service);
 
diff --git a/src/synced-tabs-dialog.c b/src/synced-tabs-dialog.c
index 807c2e2f6..8df58b50d 100644
--- a/src/synced-tabs-dialog.c
+++ b/src/synced-tabs-dialog.c
@@ -38,6 +38,8 @@ struct _SyncedTabsDialog {
 
   GtkTreeModel *treestore;
   GtkWidget *treeview;
+
+  GCancellable *cancellable;
 };
 
 G_DEFINE_TYPE (SyncedTabsDialog, synced_tabs_dialog, GTK_TYPE_WINDOW)
@@ -137,10 +139,14 @@ synced_tabs_dialog_favicon_loaded_cb (GObject      *source,
   PopulateRowAsyncData *data = (PopulateRowAsyncData *)user_data;
   g_autoptr (GdkTexture) texture = NULL;
   g_autoptr (GIcon) favicon = NULL;
+  g_autoptr (GError) error = NULL;
   GtkTreeIter parent_iter;
   char *escaped_url;
 
-  texture = webkit_favicon_database_get_favicon_finish (database, result, NULL);
+  texture = webkit_favicon_database_get_favicon_finish (database, result, &error);
+  if (!texture && g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
   favicon = ephy_favicon_get_from_texture_scaled (texture, FAVICON_SIZE, FAVICON_SIZE);
 
   gtk_tree_model_get_iter_first (data->dialog->treestore, &parent_iter);
@@ -206,7 +212,8 @@ synced_tabs_dialog_populate_from_record (SyncedTabsDialog   *dialog,
     url = json_array_get_string_element (url_history, 0);
 
     data = populate_row_async_data_new (dialog, title, url, index);
-    webkit_favicon_database_get_favicon (dialog->database, url, NULL,
+    webkit_favicon_database_get_favicon (dialog->database, url,
+                                         dialog->cancellable,
                                          synced_tabs_dialog_favicon_loaded_cb,
                                          data);
   }
@@ -285,6 +292,9 @@ synced_tabs_dialog_dispose (GObject *object)
 
   g_clear_object (&dialog->manager);
 
+  g_cancellable_cancel (dialog->cancellable);
+  g_clear_object (&dialog->cancellable);
+
   G_OBJECT_CLASS (synced_tabs_dialog_parent_class)->dispose (object);
 }
 
@@ -326,6 +336,7 @@ synced_tabs_dialog_init (SyncedTabsDialog *dialog)
   gtk_tree_view_set_tooltip_column (GTK_TREE_VIEW (dialog->treeview), URL_COLUMN);
 
   dialog->database = ephy_embed_shell_get_favicon_database (ephy_embed_shell_get_default ());
+  dialog->cancellable = g_cancellable_new ();
 }
 G_GNUC_END_IGNORE_DEPRECATIONS
 
-- 
GitLab


From 2aaeaf8c93b87001f55333b0d673b8fdf9ce88b6 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Fri, 17 Feb 2023 16:28:13 -0600
Subject: [PATCH 07/10] embed-shell: handle WebKitUserContentManager API
 changes

---
 embed/ephy-embed-shell.c | 70 ++++++++++++++++++++++------------------
 1 file changed, 39 insertions(+), 31 deletions(-)

diff --git a/embed/ephy-embed-shell.c b/embed/ephy-embed-shell.c
index 7a249ea28..8df25a775 100644
--- a/embed/ephy-embed-shell.c
+++ b/embed/ephy-embed-shell.c
@@ -1358,54 +1358,58 @@ ephy_embed_shell_register_ucm_handler (EphyEmbedShell           *shell,
 
   /* User content manager */
   /* FIXME: See https://gitlab.gnome.org/GNOME/epiphany/-/issues/1664 */
-  webkit_user_content_manager_register_script_message_handler_in_world (ucm,
-                                                                        "overview",
-                                                                        priv->guid);
+  webkit_user_content_manager_register_script_message_handler (ucm,
+                                                               "overview",
+                                                               priv->guid);
   g_signal_connect_object (ucm, "script-message-received::overview",
                            G_CALLBACK (web_process_extension_overview_message_received_cb),
                            shell, 0);
 
   webkit_user_content_manager_register_script_message_handler (ucm,
-                                                               "tlsErrorPage");
+                                                               "tlsErrorPage",
+                                                               NULL);
   g_signal_connect_object (ucm, "script-message-received::tlsErrorPage",
                            G_CALLBACK (web_process_extension_tls_error_page_message_received_cb),
                            shell, 0);
 
   webkit_user_content_manager_register_script_message_handler (ucm,
-                                                               "reloadPage");
+                                                               "reloadPage",
+                                                               NULL);
   g_signal_connect_object (ucm, "script-message-received::reloadPage",
                            G_CALLBACK (web_process_extension_reload_page_message_received_cb),
                            shell, 0);
 
   webkit_user_content_manager_register_script_message_handler (ucm,
-                                                               "unsafeBrowsingErrorPage");
+                                                               "unsafeBrowsingErrorPage",
+                                                               NULL);
   g_signal_connect_object (ucm, "script-message-received::unsafeBrowsingErrorPage",
                            G_CALLBACK (web_process_extension_unsafe_browsing_error_page_message_received_cb),
                            shell, 0);
 
-  webkit_user_content_manager_register_script_message_handler_in_world (ucm,
-                                                                        "passwordFormFocused",
-                                                                        priv->guid);
+  webkit_user_content_manager_register_script_message_handler (ucm,
+                                                               "passwordFormFocused",
+                                                               priv->guid);
   g_signal_connect_object (ucm, "script-message-received::passwordFormFocused",
                            G_CALLBACK (web_process_extension_password_form_focused_message_received_cb),
                            shell, 0);
 
   webkit_user_content_manager_register_script_message_handler (ucm,
-                                                               "aboutApps");
+                                                               "aboutApps",
+                                                               NULL);
   g_signal_connect_object (ucm, "script-message-received::aboutApps",
                            G_CALLBACK (web_process_extension_about_apps_message_received_cb),
                            shell, 0);
 
-  webkit_user_content_manager_register_script_message_handler_in_world (ucm,
-                                                                        "passwordManagerSave",
-                                                                        priv->guid);
+  webkit_user_content_manager_register_script_message_handler (ucm,
+                                                               "passwordManagerSave",
+                                                               priv->guid);
   g_signal_connect_object (ucm, "script-message-received::passwordManagerSave",
                            G_CALLBACK (web_process_extension_password_manager_save_received_cb),
                            shell, 0);
 
-  webkit_user_content_manager_register_script_message_handler_in_world (ucm,
-                                                                        "passwordManagerRequestSave",
-                                                                        priv->guid);
+  webkit_user_content_manager_register_script_message_handler (ucm,
+                                                               "passwordManagerRequestSave",
+                                                               priv->guid);
   g_signal_connect_object (ucm, "script-message-received::passwordManagerRequestSave",
                            G_CALLBACK (web_process_extension_password_manager_request_save_received_cb),
                            shell, 0);
@@ -1435,21 +1439,25 @@ ephy_embed_shell_unregister_ucm_handler (EphyEmbedShell           *shell,
 {
   EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
 
-  webkit_user_content_manager_unregister_script_message_handler_in_world (ucm,
-                                                                          "overview",
-                                                                          priv->guid);
   webkit_user_content_manager_unregister_script_message_handler (ucm,
-                                                                 "tlsErrorPage");
+                                                                 "overview",
+                                                                 priv->guid);
+  webkit_user_content_manager_unregister_script_message_handler (ucm,
+                                                                 "tlsErrorPage",
+                                                                 NULL);
+  webkit_user_content_manager_unregister_script_message_handler (ucm,
+                                                                 "unsafeBrowsingErrorPage",
+                                                                 NULL);
+  webkit_user_content_manager_unregister_script_message_handler (ucm,
+                                                                 "passwordManagerRequestSave",
+                                                                 priv->guid);
+  webkit_user_content_manager_unregister_script_message_handler (ucm,
+                                                                 "passwordFormFocused",
+                                                                  priv->guid);
+  webkit_user_content_manager_unregister_script_message_handler (ucm,
+                                                                 "aboutApps",
+                                                                 NULL);
   webkit_user_content_manager_unregister_script_message_handler (ucm,
-                                                                 "unsafeBrowsingErrorPage");
-  webkit_user_content_manager_unregister_script_message_handler_in_world (ucm,
-                                                                          "passwordManagerRequestSave",
-                                                                          priv->guid);
-  webkit_user_content_manager_unregister_script_message_handler_in_world (ucm,
-                                                                          "passwordFormFocused",
-                                                                          priv->guid);
-  webkit_user_content_manager_unregister_script_message_handler (ucm, "aboutApps");
-  webkit_user_content_manager_unregister_script_message_handler_in_world (ucm,
-                                                                          "passwordManagerSave",
-                                                                          priv->guid);
+                                                                 "passwordManagerSave",
+                                                                 priv->guid);
 }
-- 
GitLab


From b333b3742711840b6aeb9048f44676159d85d959 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Fri, 17 Feb 2023 16:28:27 -0600
Subject: [PATCH 08/10] firefox-sync-dialog: handle WebKitUserContentManager
 API changes

---
 src/ephy-firefox-sync-dialog.c | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/src/ephy-firefox-sync-dialog.c b/src/ephy-firefox-sync-dialog.c
index c265eb8d2..44e4b2a26 100644
--- a/src/ephy-firefox-sync-dialog.c
+++ b/src/ephy-firefox-sync-dialog.c
@@ -498,9 +498,11 @@ sync_setup_firefox_iframe (EphyFirefoxSyncDialog *sync_dialog)
                       G_CALLBACK (sync_open_webmail_clicked_cb),
                       sync_dialog);
     webkit_user_content_manager_register_script_message_handler (sync_dialog->fxa_manager,
-                                                                 "toChromeMessageHandler");
+                                                                 "toChromeMessageHandler",
+                                                                 NULL);
     webkit_user_content_manager_register_script_message_handler (sync_dialog->fxa_manager,
-                                                                 "openWebmailClickHandler");
+                                                                 "openWebmailClickHandler",
+                                                                 NULL);
 
     shell = ephy_embed_shell_get_default ();
     embed_context = ephy_embed_shell_get_web_context (shell);
@@ -634,9 +636,11 @@ prefs_sync_page_finalize (GObject *object)
 
   if (sync_dialog->fxa_web_view != NULL) {
     webkit_user_content_manager_unregister_script_message_handler (sync_dialog->fxa_manager,
-                                                                   "toChromeMessageHandler");
+                                                                   "toChromeMessageHandler",
+                                                                   NULL);
     webkit_user_content_manager_unregister_script_message_handler (sync_dialog->fxa_manager,
-                                                                   "openWebmailClickHandler");
+                                                                   "openWebmailClickHandler",
+                                                                   NULL);
     webkit_user_script_unref (sync_dialog->fxa_script);
     g_object_unref (sync_dialog->fxa_manager);
   }
-- 
GitLab


From 49b57c3e2b047dddbd1653b209313aa098fb66b1 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Fri, 17 Feb 2023 16:29:18 -0600
Subject: [PATCH 09/10] Require WebKitGTK 2.39.90

---
 meson.build | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 74a835477..ed3cb92bd 100644
--- a/meson.build
+++ b/meson.build
@@ -77,7 +77,7 @@ glib_requirement = '>= 2.70.0'
 gtk_requirement = '>= 4.9.3'
 libadwaita_requirement = '>= 1.3.alpha'
 nettle_requirement = '>= 3.4'
-webkitgtk_requirement = '>= 2.39.7'
+webkitgtk_requirement = '>= 2.39.90'
 
 conf.set('GLIB_VERSION_MIN_REQUIRED', 'GLIB_VERSION_2_70')
 conf.set('GLIB_VERSION_MAX_ALLOWED', 'GLIB_VERSION_2_70')
-- 
GitLab


From 279ffc731ba53fa4a2f0209dafb0dbe1e2ec149d Mon Sep 17 00:00:00 2001
From: Adrian Perez de Castro <aperez@igalia.com>
Date: Mon, 20 Feb 2023 18:05:30 +0200
Subject: [PATCH 10/10] Do not include legacy JSC API headers

Remove inclusion of pre-GLib JSC API headers, which are no longer
installed after https://bugs.webkit.org/show_bug.cgi?id=252187
---
 embed/web-process-extension/ephy-web-process-extension.c | 1 -
 embed/web-process-extension/ephy-webextension-api.c      | 1 -
 2 files changed, 2 deletions(-)

diff --git a/embed/web-process-extension/ephy-web-process-extension.c b/embed/web-process-extension/ephy-web-process-extension.c
index a3a911662..7e28c40c6 100644
--- a/embed/web-process-extension/ephy-web-process-extension.c
+++ b/embed/web-process-extension/ephy-web-process-extension.c
@@ -39,7 +39,6 @@
 #include <libsoup/soup.h>
 #include <string.h>
 #include <webkit/webkit-web-extension.h>
-#include <JavaScriptCore/JavaScript.h>
 
 struct _EphyWebProcessExtension {
   GObject parent_instance;
diff --git a/embed/web-process-extension/ephy-webextension-api.c b/embed/web-process-extension/ephy-webextension-api.c
index 4c3704771..af81080f9 100644
--- a/embed/web-process-extension/ephy-webextension-api.c
+++ b/embed/web-process-extension/ephy-webextension-api.c
@@ -24,7 +24,6 @@
 
 #include <json-glib/json-glib.h>
 #include <webkit/webkit-web-extension.h>
-#include <JavaScriptCore/JavaScript.h>
 
 struct _EphyWebExtensionExtension {
   GObject parent_instance;
-- 
GitLab

