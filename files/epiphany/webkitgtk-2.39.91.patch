From ba79891c85c19601e037490d4de8064d2ef35fe2 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Wed, 1 Mar 2023 15:23:49 -0600
Subject: [PATCH 1/5] Use path rather than URI for download destination

Adjust for WebKitGTK API changes:

https://github.com/WebKit/WebKit/pull/10855

P.S. I found two places that were *already* using the download
destination as if it were a path, even though it was a URI. Concerning.
---
 embed/ephy-download.c            | 55 ++++++++++++++------------------
 embed/ephy-download.h            |  4 +--
 embed/ephy-filters-manager.c     | 10 +++---
 src/context-menu-commands.c      | 28 ++++++++--------
 src/ephy-download-widget.c       | 13 ++------
 src/webextension/api/downloads.c | 14 ++++----
 src/window-commands.c            |  6 ++--
 tests/ephy-download-test.c       | 22 +++----------
 8 files changed, 59 insertions(+), 93 deletions(-)

diff --git a/embed/ephy-download.c b/embed/ephy-download.c
index 4e74fb862..0a3e199b2 100644
--- a/embed/ephy-download.c
+++ b/embed/ephy-download.c
@@ -101,7 +101,7 @@ ephy_download_get_property (GObject    *object,
       g_value_set_object (value, ephy_download_get_webkit_download (download));
       break;
     case PROP_DESTINATION:
-      g_value_set_string (value, ephy_download_get_destination_uri (download));
+      g_value_set_string (value, ephy_download_get_destination (download));
       break;
     case PROP_ACTION:
       g_value_set_enum (value, ephy_download_get_action (download));
@@ -126,7 +126,7 @@ ephy_download_set_property (GObject      *object,
 
   switch (property_id) {
     case PROP_DESTINATION:
-      ephy_download_set_destination_uri (download, g_value_get_string (value));
+      ephy_download_set_destination (download, g_value_get_string (value));
       break;
     case PROP_ACTION:
       ephy_download_set_action (download, g_value_get_enum (value));
@@ -206,14 +206,13 @@ parse_extension (const char *filename)
 }
 
 static gboolean
-set_destination_uri_for_suggested_filename (EphyDownload *download,
-                                            const char   *directory,
-                                            const char   *suggested_filename)
+set_destination_for_suggested_filename (EphyDownload *download,
+                                        const char   *directory,
+                                        const char   *suggested_filename)
 {
   char *dest_dir;
   char *dest_name;
-  char *destination_filename;
-  char *destination_uri;
+  g_autofree char *destination_filename = NULL;
 
   if (directory)
     dest_dir = g_strdup (directory);
@@ -267,30 +266,24 @@ set_destination_uri_for_suggested_filename (EphyDownload *download,
     g_string_free (tmp_filename, TRUE);
   }
 
-  destination_uri = g_filename_to_uri (destination_filename, NULL, NULL);
-  g_free (destination_filename);
-
-  g_assert (destination_uri);
-  webkit_download_set_destination (download->download, destination_uri);
-  g_free (destination_uri);
+  webkit_download_set_destination (download->download, destination_filename);
 
   return TRUE;
 }
 
 /**
- * ephy_download_set_destination_uri:
+ * ephy_download_set_destination:
  * @download: an #EphyDownload
- * @destination: URI where to save @download
+ * @destination: path at which to save @download
  *
- * Sets the destination URI of @download. It must be a proper URI, with a
- * scheme like file:/// or similar.
+ * Sets the destination of @download.
  **/
 void
-ephy_download_set_destination_uri (EphyDownload *download,
-                                   const char   *destination)
+ephy_download_set_destination (EphyDownload *download,
+                               const char   *destination)
 {
   g_assert (EPHY_IS_DOWNLOAD (download));
-  g_assert (destination != NULL);
+  g_assert (destination);
 
   webkit_download_set_destination (download->download, destination);
   g_object_notify_by_pspec (G_OBJECT (download), obj_properties[PROP_DESTINATION]);
@@ -332,15 +325,15 @@ ephy_download_get_webkit_download (EphyDownload *download)
 }
 
 /**
- * ephy_download_get_destination_uri:
+ * ephy_download_get_destination:
  * @download: an #EphyDownload
  *
- * Gets the destination URI where the download is being saved.
+ * Gets the destination where the download is being saved.
  *
- * Returns: (transfer none): destination URI.
+ * Returns: (transfer none): destination path
  **/
 const char *
-ephy_download_get_destination_uri (EphyDownload *download)
+ephy_download_get_destination (EphyDownload *download)
 {
   g_assert (EPHY_IS_DOWNLOAD (download));
 
@@ -427,11 +420,11 @@ ephy_download_do_download_action (EphyDownload           *download,
                                   EphyDownloadActionType  action)
 {
   GFile *destination;
-  const char *destination_uri;
+  const char *destination_path;
   gboolean ret = FALSE;
 
-  destination_uri = webkit_download_get_destination (download->download);
-  destination = g_file_new_for_uri (destination_uri);
+  destination_path = webkit_download_get_destination (download->download);
+  destination = g_file_new_for_path (destination_path);
 
   switch ((action ? action : download->action)) {
     case EPHY_DOWNLOAD_ACTION_BROWSE_TO:
@@ -628,7 +621,7 @@ filename_suggested_dialog_cb (AdwMessageDialog      *dialog,
   if (!strcmp (response, "download")) {
     g_autofree gchar *directory = g_file_get_path (data->directory);
 
-    set_destination_uri_for_suggested_filename (data->download, directory, data->suggested_filename);
+    set_destination_for_suggested_filename (data->download, directory, data->suggested_filename);
 
     webkit_download_set_allow_overwrite (data->webkit_download, TRUE);
 
@@ -881,7 +874,7 @@ download_decide_destination_cb (WebKitDownload *wk_download,
        download->always_ask_destination))
     return run_download_confirmation_dialog (download, suggested_filename);
 
-  return set_destination_uri_for_suggested_filename (download, download->suggested_directory, suggested_filename);
+  return set_destination_for_suggested_filename (download, download->suggested_directory, suggested_filename);
 }
 
 static void
@@ -968,7 +961,7 @@ download_file_monitor_changed (GFileMonitor      *monitor,
                                EphyDownload      *download)
 {
   /* Skip messages for <file>.wkdownload */
-  if (strcmp (g_file_get_uri (file), webkit_download_get_destination (download->download)) != 0)
+  if (strcmp (g_file_peek_path (file), webkit_download_get_destination (download->download)) != 0)
     return;
 
   download->was_moved = TRUE;
@@ -994,7 +987,7 @@ download_finished_cb (WebKitDownload *wk_download,
 
   g_signal_emit (download, signals[COMPLETED], 0);
 
-  file = g_file_new_for_uri (webkit_download_get_destination (wk_download));
+  file = g_file_new_for_path (webkit_download_get_destination (wk_download));
   download->file_monitor = g_file_monitor (file, G_FILE_MONITOR_NONE, NULL, &error);
   if (!download->file_monitor)
     g_warning ("Could not add a file monitor for %s, error: %s\n", g_file_get_uri (file), error->message);
diff --git a/embed/ephy-download.h b/embed/ephy-download.h
index c9425becf..1636e0802 100644
--- a/embed/ephy-download.h
+++ b/embed/ephy-download.h
@@ -46,12 +46,12 @@ gboolean      ephy_download_succeeded             (EphyDownload *download);
 gboolean      ephy_download_failed                (EphyDownload *download,
                                                    GError      **error);
 
-void          ephy_download_set_destination_uri   (EphyDownload *download,
+void          ephy_download_set_destination       (EphyDownload *download,
                                                    const char *destination);
 
 WebKitDownload *ephy_download_get_webkit_download (EphyDownload *download);
 
-const char   *ephy_download_get_destination_uri   (EphyDownload *download);
+const char   *ephy_download_get_destination       (EphyDownload *download);
 const char   *ephy_download_get_content_type      (EphyDownload *download);
 
 EphyDownloadActionType ephy_download_get_action   (EphyDownload *download);
diff --git a/embed/ephy-filters-manager.c b/embed/ephy-filters-manager.c
index a57a83911..eb6232a37 100644
--- a/embed/ephy-filters-manager.c
+++ b/embed/ephy-filters-manager.c
@@ -599,13 +599,13 @@ json_file_info_callback (GObject      *source_object,
   if (info)
     content_type = g_file_info_get_content_type (info);
   else
-    g_warning ("Couldn't query filter file %s: %s", ephy_download_get_destination_uri (data->download), error->message);
+    g_warning ("Couldn't query filter file %s: %s", ephy_download_get_destination (data->download), error->message);
 
   if (content_type && g_strcmp0 ("application/json", content_type) == 0) {
     filter_info_setup_load_file (data->self, json_file);
   } else {
     g_warning ("Filter source %s has invalid MIME type: %s",
-               ephy_download_get_destination_uri (data->download),
+               ephy_download_get_destination (data->download),
                content_type);
 
     g_file_delete_async (json_file, G_PRIORITY_DEFAULT, NULL, json_file_deleted, NULL);
@@ -635,7 +635,7 @@ download_completed_cb (EphyDownload *download,
   data->download = download;
   data->self = self;
 
-  json_file = g_file_new_for_uri (ephy_download_get_destination_uri (download));
+  json_file = g_file_new_for_path (ephy_download_get_destination (download));
   g_file_query_info_async (json_file,
                            G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE,
                            G_FILE_QUERY_INFO_NONE,
@@ -678,7 +678,6 @@ filter_load_cb (WebKitUserContentFilterStore *store,
   g_autoptr (GError) error = NULL;
   g_autoptr (GFile) source_file = NULL;
   g_autoptr (GFile) json_file = NULL;
-  g_autofree char *json_file_uri = NULL;
   EphyDownload *download;
 
   if (!self->manager)
@@ -740,8 +739,7 @@ filter_load_cb (WebKitUserContentFilterStore *store,
   download = ephy_download_new_for_uri_internal (self->source_uri);
 
   json_file = filter_info_get_source_file (self);
-  json_file_uri = g_file_get_uri (json_file);
-  ephy_download_set_destination_uri (download, json_file_uri);
+  ephy_download_set_destination (download, g_file_peek_path (json_file));
   ephy_download_disable_desktop_notification (download);
   webkit_download_set_allow_overwrite (ephy_download_get_webkit_download (download), TRUE);
 
diff --git a/src/context-menu-commands.c b/src/context-menu-commands.c
index d6b97f55d..249f83ee8 100644
--- a/src/context-menu-commands.c
+++ b/src/context-menu-commands.c
@@ -161,12 +161,9 @@ filename_confirmed_cb (GtkFileDialog       *dialog,
 
   if (file) {
     g_autoptr (GFile) current_folder = NULL;
-    g_autofree char *uri = NULL;
-    g_autofree char *current_folder_path = NULL;
     WebKitDownload *webkit_download;
 
-    uri = g_file_get_uri (file);
-    ephy_download_set_destination_uri (data->download, uri);
+    ephy_download_set_destination (data->download, g_file_peek_path (file));
 
     webkit_download = ephy_download_get_webkit_download (data->download);
     webkit_download_set_allow_overwrite (webkit_download, TRUE);
@@ -175,10 +172,9 @@ filename_confirmed_cb (GtkFileDialog       *dialog,
                                          data->download);
 
     current_folder = g_file_get_parent (file);
-    current_folder_path = g_file_get_path (current_folder);
     g_settings_set_string (EPHY_SETTINGS_WEB,
                            EPHY_PREFS_WEB_LAST_DOWNLOAD_DIRECTORY,
-                           current_folder_path);
+                           g_file_peek_path (current_folder));
   } else {
     g_idle_add_full (G_PRIORITY_DEFAULT,
                      (GSourceFunc)cancel_download_idle_cb,
@@ -284,12 +280,16 @@ static void
 background_download_completed (EphyDownload *download,
                                GtkWidget    *window)
 {
-  const char *uri;
-  GSettings *settings;
-
-  uri = ephy_download_get_destination_uri (download);
-  settings = ephy_settings_get ("org.gnome.desktop.background");
-  g_settings_set_string (settings, "picture-uri", uri);
+  const char *path;
+  g_autofree char *uri = NULL;
+  g_autoptr (GError) error = NULL;
+
+  path = ephy_download_get_destination (download);
+  uri = g_filename_to_uri (path, NULL, &error);
+  if (!uri)
+    g_warning ("Failed to set desktop background: could not convert path %s to URI: %s", path, error->message);
+  else
+    g_settings_set_string (ephy_settings_get ("org.gnome.desktop.background"), "picture-uri", uri);
 }
 
 void
@@ -299,7 +299,6 @@ context_cmd_set_image_as_background (GSimpleAction *action,
 {
   WebKitHitTestResult *hit_test_result;
   const char *location;
-  g_autofree char *dest_uri = NULL;
   g_autofree char *dest = NULL;
   g_autofree char *base = NULL;
   g_autofree char *base_converted = NULL;
@@ -319,9 +318,8 @@ context_cmd_set_image_as_background (GSimpleAction *action,
   base = g_path_get_basename (location);
   base_converted = g_filename_from_utf8 (base, -1, NULL, NULL, NULL);
   dest = g_build_filename (g_get_user_special_dir (G_USER_DIRECTORY_PICTURES), base_converted, NULL);
-  dest_uri = g_filename_to_uri (dest, NULL, NULL);
 
-  ephy_download_set_destination_uri (download, dest_uri);
+  ephy_download_set_destination (download, dest);
   ephy_downloads_manager_add_download (ephy_embed_shell_get_downloads_manager (ephy_embed_shell_get_default ()),
                                        download);
 
diff --git a/src/ephy-download-widget.c b/src/ephy-download-widget.c
index b80ea0b95..f6c8f1064 100644
--- a/src/ephy-download-widget.c
+++ b/src/ephy-download-widget.c
@@ -56,18 +56,13 @@ get_destination_basename_from_download (EphyDownload *ephy_download)
 {
   WebKitDownload *download;
   const char *dest;
-  char *basename;
-  g_autofree char *decoded = NULL;
 
   download = ephy_download_get_webkit_download (ephy_download);
   dest = webkit_download_get_destination (download);
   if (!dest)
     return NULL;
 
-  decoded = ephy_uri_decode (dest);
-  basename = g_filename_display_basename (decoded);
-
-  return basename;
+  return g_filename_display_basename (dest);
 }
 
 /* modified from telepathy-account-widgets/tpaw-time.c */
@@ -285,10 +280,8 @@ download_destination_changed_cb (WebKitDownload     *download,
 static GdkContentProvider *
 download_drag_prepare (WebKitDownload *download)
 {
-  const char *uri = webkit_download_get_destination (download);
-  GFile *file = g_file_new_for_uri (uri);
-
-  return gdk_content_provider_new_typed (G_TYPE_FILE, file);
+  const char *dest = webkit_download_get_destination (download);
+  return gdk_content_provider_new_typed (G_TYPE_FILE, g_file_new_for_path (dest));
 }
 
 static void
diff --git a/src/webextension/api/downloads.c b/src/webextension/api/downloads.c
index 6046b7a68..c478ddfb4 100644
--- a/src/webextension/api/downloads.c
+++ b/src/webextension/api/downloads.c
@@ -296,13 +296,13 @@ download_query_new (JsonObject *object)
 static char *
 download_get_filename (EphyDownload *download)
 {
-  const char *destination_uri = ephy_download_get_destination_uri (download);
+  const char *destination_path = ephy_download_get_destination (download);
   g_autoptr (GFile) dest_file = NULL;
 
-  if (!destination_uri)
+  if (!destination_path)
     return NULL;
 
-  dest_file = g_file_new_for_uri (destination_uri);
+  dest_file = g_file_new_for_path (destination_path);
   return g_file_get_path (dest_file);
 }
 
@@ -720,7 +720,7 @@ downloads_handler_removefile (EphyWebExtensionSender *sender,
 {
   gint64 download_id = ephy_json_array_get_int (args, 0);
   EphyDownloadsManager *downloads_manager = get_downloads_manager ();
-  const char *destination_uri;
+  const char *destination;
   g_autoptr (GFile) destination_file = NULL;
   EphyDownload *download;
 
@@ -738,14 +738,14 @@ downloads_handler_removefile (EphyWebExtensionSender *sender,
   /* Ensure the download isn't active. */
   ephy_download_cancel (download);
 
-  destination_uri = ephy_download_get_destination_uri (download);
+  destination = ephy_download_get_destination (download);
   /* If a destination was never chosen this was never written to disk. */
-  if (!destination_uri) {
+  if (!destination) {
     g_task_return_pointer (task, NULL, NULL);
     return;
   }
 
-  destination_file = g_file_new_for_uri (destination_uri);
+  destination_file = g_file_new_for_path (destination);
   g_file_delete_async (destination_file, G_PRIORITY_DEFAULT, NULL, (GAsyncReadyCallback)delete_file_ready_cb, task);
 }
 
diff --git a/src/window-commands.c b/src/window-commands.c
index 97e612eb5..651243f61 100644
--- a/src/window-commands.c
+++ b/src/window-commands.c
@@ -1670,7 +1670,7 @@ download_finished_cb (WebKitDownload            *download,
 {
   g_autofree char *filename = NULL;
 
-  filename = g_filename_from_uri (webkit_download_get_destination (download), NULL, NULL);
+  filename = g_filename_display_basename (webkit_download_get_destination (download));
   set_app_icon_from_filename (data, filename);
 }
 
@@ -1688,7 +1688,6 @@ static void
 download_icon_and_set_image (EphyApplicationDialogData *data)
 {
   g_autofree char *destination = NULL;
-  g_autofree char *destination_uri = NULL;
   g_autofree char *tmp_filename = NULL;
   EphyEmbedShell *shell = ephy_embed_shell_get_default ();
 
@@ -1704,8 +1703,7 @@ download_icon_and_set_image (EphyApplicationDialogData *data)
 
   tmp_filename = ephy_file_tmp_filename (".ephy-download-XXXXXX", NULL);
   destination = g_build_filename (ephy_file_tmp_dir (), tmp_filename, NULL);
-  destination_uri = g_filename_to_uri (destination, NULL, NULL);
-  webkit_download_set_destination (data->download, destination_uri);
+  webkit_download_set_destination (data->download, destination);
 
   g_signal_connect (data->download, "finished",
                     G_CALLBACK (download_finished_cb), data);
diff --git a/tests/ephy-download-test.c b/tests/ephy-download-test.c
index f7f20bb72..279670ba3 100644
--- a/tests/ephy-download-test.c
+++ b/tests/ephy-download-test.c
@@ -77,21 +77,14 @@ static void
 fixture_setup (Fixture       *fixture,
                gconstpointer  data)
 {
-  char *tmp_filename;
-  char *dest_file;
-
-  tmp_filename = ephy_file_tmp_filename (".ephy-download-XXXXXX", NULL);
-  dest_file = g_build_filename (ephy_file_tmp_dir (), tmp_filename, NULL);
+  g_autofree char *tmp_filename = ephy_file_tmp_filename (".ephy-download-XXXXXX", NULL);
 
   fixture->source = get_uri_for_path ("/default");
   fixture->download = ephy_download_new_for_uri (fixture->source);
-  fixture->destination = g_filename_to_uri (dest_file, NULL, NULL);
+  fixture->destination = g_build_filename (ephy_file_tmp_dir (), tmp_filename, NULL);
   fixture->loop = g_main_loop_new (NULL, TRUE);
 
   ephy_download_set_destination_uri (fixture->download, fixture->destination);
-
-  g_free (tmp_filename);
-  g_free (dest_file);
 }
 
 static void
@@ -109,16 +102,9 @@ fixture_teardown (Fixture       *fixture,
 static gboolean
 test_file_was_downloaded (EphyDownload *download)
 {
-  char *filename;
-  gboolean ret;
-
-  filename = g_filename_from_uri (ephy_download_get_destination_uri (download),
-                                  NULL, NULL);
+  const char *filename = ephy_download_get_destination (download);
 
-  ret = g_file_test (filename, G_FILE_TEST_EXISTS);
-  g_free (filename);
-
-  return ret;
+  return g_file_test (filename, G_FILE_TEST_EXISTS);
 }
 
 static void
-- 
GitLab


From 2750e9f06b61776c0bfad83ed526fd82168419f5 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Wed, 1 Mar 2023 16:01:06 -0600
Subject: [PATCH 2/5] Asynchronously decide download destination

Otherwise we wind up in fun situtations like:

 * Download starts
 * Run nested main loop to display a file chooser
 * Next download starts before user interacts with first file chooser
 * Run next nested main loop to display second file chooser
 * Next download starts (still before user interacts with first file
   chooser)
 * Run next nested main loop to display third file chooser

This is not just hypothetical fun. It actually happens. See:

https://bugs.webkit.org/show_bug.cgi?id=238748

Perhaps I'm no fun.
---
 embed/ephy-download.c       | 138 ++++++++++++++++++++----------------
 src/context-menu-commands.c |  27 +------
 2 files changed, 81 insertions(+), 84 deletions(-)

diff --git a/embed/ephy-download.c b/embed/ephy-download.c
index 0a3e199b2..5e5c838cc 100644
--- a/embed/ephy-download.c
+++ b/embed/ephy-download.c
@@ -39,6 +39,7 @@ struct _EphyDownload {
   GObject parent_instance;
 
   WebKitDownload *download;
+  GCancellable *cancellable;
 
   char *content_type;
   char *suggested_directory;
@@ -463,6 +464,9 @@ ephy_download_dispose (GObject *object)
     download->download = NULL;
   }
 
+  g_cancellable_cancel (download->cancellable);
+  g_clear_object (&download->cancellable);
+
   g_clear_object (&download->file_monitor);
   g_clear_error (&download->error);
   g_clear_pointer (&download->content_type, g_free);
@@ -536,14 +540,18 @@ ephy_download_class_init (EphyDownloadClass *klass)
    * EphyDownload::filename-suggested:
    *
    * The ::filename-suggested signal is emitted when we have received the
-   * suggested filename from WebKit.
+   * suggested filename from WebKit. Return %TRUE if you will provide a
+   * destination or will %FALSE otherwise. If the destination is not
+   * provided before the signal handler returns, the download will not
+   * start until provided.
    **/
   signals[FILENAME_SUGGESTED] = g_signal_new ("filename-suggested",
                                               G_OBJECT_CLASS_TYPE (object_class),
                                               G_SIGNAL_RUN_LAST,
                                               0,
-                                              NULL, NULL, NULL,
-                                              G_TYPE_NONE,
+                                              g_signal_accumulator_true_handled,
+                                              NULL, NULL,
+                                              G_TYPE_BOOLEAN,
                                               1,
                                               G_TYPE_STRING | G_SIGNAL_TYPE_STATIC_SCOPE);
 
@@ -592,6 +600,7 @@ ephy_download_init (EphyDownload *download)
   LOG ("EphyDownload initialising %p", download);
 
   download->download = NULL;
+  download->cancellable = g_cancellable_new ();
 
   download->action = EPHY_DOWNLOAD_ACTION_NONE;
 
@@ -602,17 +611,42 @@ ephy_download_init (EphyDownload *download)
 
 typedef struct {
   EphyDownload *download;
-  WebKitDownload *webkit_download;
-  char *suggested_directory;
   char *suggested_filename;
   GtkWindow *dialog;
   GFile *directory;
   GtkLabel *directory_label;
-  GMainLoop *nested_loop;
-  gboolean result;
   gboolean choose_filename;
 } SuggestedFilenameData;
 
+static SuggestedFilenameData *
+suggested_filename_data_new (EphyDownload *download,
+                             const char   *suggested_filename,
+                             GtkWindow    *dialog,
+                             GFile        *directory,
+                             GtkLabel     *directory_label,
+                             gboolean      choose_filename)
+{
+  SuggestedFilenameData *data = g_new (SuggestedFilenameData, 1);
+
+  data->download = g_object_ref (download);
+  data->suggested_filename = g_strdup (suggested_filename);
+  data->dialog = dialog;
+  data->directory = g_object_ref (directory);
+  data->directory_label = directory_label;
+  data->choose_filename = choose_filename;
+
+  return data;
+}
+
+static void
+suggested_filename_data_free (SuggestedFilenameData *data)
+{
+  g_object_unref (data->download);
+  g_object_unref (data->directory);
+  g_free (data->suggested_filename);
+  g_free (data);
+}
+
 static void
 filename_suggested_dialog_cb (AdwMessageDialog      *dialog,
                               const char            *response,
@@ -620,22 +654,21 @@ filename_suggested_dialog_cb (AdwMessageDialog      *dialog,
 {
   if (!strcmp (response, "download")) {
     g_autofree gchar *directory = g_file_get_path (data->directory);
+    WebKitDownload *webkit_download = ephy_download_get_webkit_download (data->download);
 
     set_destination_for_suggested_filename (data->download, directory, data->suggested_filename);
 
-    webkit_download_set_allow_overwrite (data->webkit_download, TRUE);
+    webkit_download_set_allow_overwrite (webkit_download, TRUE);
 
     ephy_downloads_manager_add_download (ephy_embed_shell_get_downloads_manager (ephy_embed_shell_get_default ()),
                                          data->download);
 
     g_settings_set_string (EPHY_SETTINGS_WEB, EPHY_PREFS_WEB_LAST_DOWNLOAD_DIRECTORY, directory);
-    data->result = TRUE;
   } else {
     ephy_download_cancel (data->download);
-    data->result = FALSE;
   }
 
-  g_main_loop_quit (data->nested_loop);
+  suggested_filename_data_free (data);
 }
 
 static void
@@ -645,14 +678,17 @@ filename_suggested_file_dialog_cb (GtkFileDialog         *dialog,
 {
   g_autoptr (GFile) file = NULL;
   g_autofree char *display_name = NULL;
+  g_autoptr (GError) error = NULL;
 
   if (!data->choose_filename)
-    file = gtk_file_dialog_select_folder_finish (dialog, result, NULL);
+    file = gtk_file_dialog_select_folder_finish (dialog, result, &error);
   else
-    file = gtk_file_dialog_save_finish (dialog, result, NULL);
+    file = gtk_file_dialog_save_finish (dialog, result, &error);
 
-  if (!file)
+  if (!file) {
+    g_warning ("Failed to select download destination: %s", error->message);
     return;
+  }
 
   g_set_object (&data->directory, file);
 
@@ -673,7 +709,7 @@ filename_suggested_button_cb (GtkButton             *button,
 
     gtk_file_dialog_select_folder (dialog,
                                    data->dialog,
-                                   NULL,
+                                   data->download->cancellable,
                                    (GAsyncReadyCallback)filename_suggested_file_dialog_cb,
                                    data);
   } else {
@@ -682,15 +718,15 @@ filename_suggested_button_cb (GtkButton             *button,
 
     gtk_file_dialog_save (dialog,
                           data->dialog,
-                          NULL,
+                          data->download->cancellable,
                           (GAsyncReadyCallback)filename_suggested_file_dialog_cb,
                           data);
   }
 }
 
-static gboolean
-run_download_confirmation_dialog (EphyDownload *download,
-                                  const char   *suggested_filename)
+static void
+open_download_confirmation_dialog (EphyDownload *download,
+                                   const char   *suggested_filename)
 {
   GApplication *application;
   GtkWidget *dialog = NULL;
@@ -711,9 +747,10 @@ run_download_confirmation_dialog (EphyDownload *download,
   g_autofree gchar *content_length = NULL;
   g_autofree gchar *display_name = NULL;
   g_autoptr (GIcon) gicon = NULL;
+  g_autoptr (GFile) directory = NULL;
   const gchar *content_type;
   const char *directory_path;
-  SuggestedFilenameData data;
+  SuggestedFilenameData *data;
 
   application = G_APPLICATION (ephy_embed_shell_get_default ());
   toplevel = gtk_application_get_active_window (GTK_APPLICATION (application));
@@ -786,48 +823,29 @@ run_download_confirmation_dialog (EphyDownload *download,
   gtk_box_append (GTK_BOX (button_box), button_label);
 
   directory_path = g_settings_get_string (EPHY_SETTINGS_WEB, EPHY_PREFS_WEB_LAST_DOWNLOAD_DIRECTORY);
-
-  data.download = download;
-  data.webkit_download = webkit_download;
-  data.suggested_filename = g_strdup (suggested_filename);
-  data.dialog = GTK_WINDOW (dialog);
   if (download->suggested_directory)
-    data.directory = g_file_new_for_path (download->suggested_directory);
+    directory = g_file_new_for_path (download->suggested_directory);
   else if (!directory_path || !directory_path[0])
-    data.directory = g_file_new_for_path (ephy_file_get_downloads_dir ());
+    directory = g_file_new_for_path (ephy_file_get_downloads_dir ());
   else
-    data.directory = g_file_new_for_path (directory_path);
-  data.directory_label = GTK_LABEL (button_label);
-  data.nested_loop = g_main_loop_new (NULL, FALSE);
-  data.choose_filename = download->choose_filename;
-  data.result = FALSE;
+    directory = g_file_new_for_path (directory_path);
+
+  display_name = ephy_file_get_display_name (directory);
+  gtk_label_set_label (GTK_LABEL (button_label), display_name);
 
-  display_name = ephy_file_get_display_name (data.directory);
-  gtk_label_set_label (data.directory_label, display_name);
+  data = suggested_filename_data_new (download,
+                                      suggested_filename,
+                                      GTK_WINDOW (dialog),
+                                      directory,
+                                      GTK_LABEL (button_label),
+                                      download->choose_filename);
 
   g_signal_connect (button, "clicked",
-                    G_CALLBACK (filename_suggested_button_cb), &data);
+                    G_CALLBACK (filename_suggested_button_cb), data);
   g_signal_connect (dialog, "response",
-                    G_CALLBACK (filename_suggested_dialog_cb), &data);
+                    G_CALLBACK (filename_suggested_dialog_cb), data);
 
   gtk_window_present (GTK_WINDOW (dialog));
-
-  /* Here we need to wait for the final filename from the file chooser. Sadly,
-   * there is no safe way to do this. Ideally, we would indicate to WebKit that
-   * we wish to handle this asynchronously, but there is no way to do that:
-   * https://bugs.webkit.org/show_bug.cgi?id=238748
-   *
-   * So instead let's run a nested main loop here. This is not particularly safe
-   * or good, but allows emulating gtk_dialog_run() and doesn't require new
-   * WebKit API.
-   */
-  g_main_loop_run (data.nested_loop);
-
-  g_main_loop_unref (data.nested_loop);
-  g_object_unref (data.directory);
-  g_free (data.suggested_filename);
-
-  return data.result;
 }
 
 static void
@@ -854,6 +872,7 @@ download_decide_destination_cb (WebKitDownload *wk_download,
                                 EphyDownload   *download)
 {
   const char *suggested_filename = wk_suggestion;
+  gboolean will_provide_destination = FALSE;
 
   if (download->suggested_filename)
     suggested_filename = download->suggested_filename;
@@ -861,18 +880,17 @@ download_decide_destination_cb (WebKitDownload *wk_download,
   if (webkit_download_get_destination (wk_download))
     return TRUE;
 
-  g_signal_emit (download, signals[FILENAME_SUGGESTED], 0, suggested_filename);
+  g_signal_emit (download, signals[FILENAME_SUGGESTED], 0, suggested_filename, &will_provide_destination);
 
-  /* If the signal handler provided a destination, then don't show the
-   * confirmation dialog.
-   */
-  if (webkit_download_get_destination (wk_download))
+  if (will_provide_destination)
     return TRUE;
 
   if (!ephy_is_running_inside_sandbox () &&
       (g_settings_get_boolean (EPHY_SETTINGS_WEB, EPHY_PREFS_WEB_ASK_ON_DOWNLOAD) ||
-       download->always_ask_destination))
-    return run_download_confirmation_dialog (download, suggested_filename);
+       download->always_ask_destination)) {
+    open_download_confirmation_dialog (download, suggested_filename);
+    return TRUE;
+  }
 
   return set_destination_for_suggested_filename (download, download->suggested_directory, suggested_filename);
 }
diff --git a/src/context-menu-commands.c b/src/context-menu-commands.c
index 249f83ee8..aa84e7b7c 100644
--- a/src/context-menu-commands.c
+++ b/src/context-menu-commands.c
@@ -135,19 +135,10 @@ context_cmd_copy_link_address (GSimpleAction *action,
   }
 }
 
-static gboolean
-cancel_download_idle_cb (EphyDownload *download)
-{
-  ephy_download_cancel (download);
-
-  return FALSE;
-}
-
 typedef struct {
   char *title;
   EphyWindow *window;
   EphyDownload *download;
-  GMainLoop *nested_loop;
 } SavePropertyURLData;
 
 static void
@@ -176,22 +167,16 @@ filename_confirmed_cb (GtkFileDialog       *dialog,
                            EPHY_PREFS_WEB_LAST_DOWNLOAD_DIRECTORY,
                            g_file_peek_path (current_folder));
   } else {
-    g_idle_add_full (G_PRIORITY_DEFAULT,
-                     (GSourceFunc)cancel_download_idle_cb,
-                     g_object_ref (data->download),
-                     g_object_unref);
+    ephy_download_cancel (data->download);
   }
 
-  g_main_loop_quit (data->nested_loop);
-
   g_free (data->title);
   g_object_unref (data->window);
   g_object_unref (data->download);
-  g_main_loop_unref (data->nested_loop);
   g_free (data);
 }
 
-static void
+static gboolean
 filename_suggested_cb (EphyDownload        *download,
                        const char          *suggested_filename,
                        SavePropertyURLData *data)
@@ -219,12 +204,7 @@ filename_suggested_cb (EphyDownload        *download,
                         NULL,
                         (GAsyncReadyCallback)filename_confirmed_cb,
                         data);
-
-  /* We have to set a download destination before this signal handler completes,
-   * so we'll spin the default main context until the dialog is finished.
-   * https://bugs.webkit.org/show_bug.cgi?id=238748
-   */
-  g_main_loop_run (data->nested_loop);
+  return TRUE;
 }
 
 static void
@@ -246,7 +226,6 @@ save_property_url (const char *title,
   data->title = g_strdup (title);
   data->window = g_object_ref (window);
   data->download = download;
-  data->nested_loop = g_main_loop_new (NULL, FALSE);
   g_signal_connect (download, "filename-suggested",
                     G_CALLBACK (filename_suggested_cb),
                     data);
-- 
GitLab


From 3d2bbc0b595f8bc4e94e67122066d95b7b0ab9f4 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Wed, 1 Mar 2023 17:33:09 -0600
Subject: [PATCH 3/5] Bump WebKitGTK requirement to 2.39.91

This is required for the download destination changes.
---
 meson.build | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index d320c058a..8766f8aae 100644
--- a/meson.build
+++ b/meson.build
@@ -77,7 +77,7 @@ glib_requirement = '>= 2.70.0'
 gtk_requirement = '>= 4.9.3'
 libadwaita_requirement = '>= 1.3.alpha'
 nettle_requirement = '>= 3.4'
-webkitgtk_requirement = '>= 2.39.90'
+webkitgtk_requirement = '>= 2.39.91'
 
 conf.set('GLIB_VERSION_MIN_REQUIRED', 'GLIB_VERSION_2_70')
 conf.set('GLIB_VERSION_MAX_ALLOWED', 'GLIB_VERSION_2_70')
-- 
GitLab


From ea2995b06d57f839998dff0864d3fe3e45836e1c Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Fri, 3 Mar 2023 14:17:49 -0600
Subject: [PATCH 4/5] Handle rename of WebKitWebExtension ->
 WebKitWebProcessExtension

https://bugs.webkit.org/show_bug.cgi?id=226665
---
 HACKING.md                                     | 12 +++++-------
 embed/ephy-embed-shell.c                       |  8 ++++----
 .../ephy-web-process-extension-main.c          |  4 ++--
 .../ephy-web-process-extension.c               | 18 +++++++++---------
 .../ephy-web-process-extension.h               | 12 ++++++------
 .../ephy-webextension-api.c                    | 10 +++++-----
 .../ephy-webextension-common.h                 |  2 +-
 meson.build                                    |  2 +-
 src/webextension/README.md                     |  6 +++---
 src/webextension/ephy-web-extension-manager.c  |  8 ++++----
 10 files changed, 40 insertions(+), 42 deletions(-)

diff --git a/HACKING.md b/HACKING.md
index 40457d4da..ede696cd8 100644
--- a/HACKING.md
+++ b/HACKING.md
@@ -148,10 +148,10 @@ called the "web process extension" and lives in `embed/web-process-extension/`.
 It is compiled into a shared library `libephywebprocessextension.so` and
 installed in `$(pkglibdir)` (e.g. `/usr/lib64/epiphany`). `EphyEmbedShell` tells
 WebKit to look for extensions in that location using
-`webkit_web_context_set_web_extensions_directory()`. Now the Epiphany UI process
+`webkit_web_context_set_web_process_extensions_directory()`. Now the Epiphany UI process
 and web process extension can communicate back and forth via the WebKit IPC
 functions webkit_web_context_send_message_to_all_extensions(),
-webkit_web_view_send_message_to_page(), webkit_web_extension_send_message_to_context(),
+webkit_web_view_send_message_to_page(), webkit_web_process_extension_send_message_to_context(),
 and webkit_web_page_send_message_to_view().
 
 If you are making changes to the web process extension, you'll need to enable
@@ -166,11 +166,9 @@ the web extension to send a `WebKitJavascriptResult` to the UI process, which
 is received in `EphyEmbedShell`.
 
 Corresponding to `WebKitWebContext` and `WebKitWebView`, the central classes of
-the UI process API, the web process API has `WebKitWebExtension` and
-`WebKitWebPage`. Confusingly, the `WebKitWebExtension` class refers to the web
-process extension, NOT to WebExtensions. Each `WebKitWebContext` may have one or
-more `WebKitWebExtension`s (web process extensions). Meanwhile, each
-`WebKitWebView` will have one or more `WebKitWebPage`s. Only one page will be
+the UI process API, the web process API has `WebKitWebProcessExtension` and
+`WebKitWebPage`. Each `WebKitWebContext` may have one or more `WebKitWebProcessExtension`s.
+Meanwhile, each `WebKitWebView` will have one or more `WebKitWebPage`s. Only one page will be
 active in a view at a given time: the other pages are for process swaps.
 
 # Security
diff --git a/embed/ephy-embed-shell.c b/embed/ephy-embed-shell.c
index 6e9e8609d..f10621cb6 100644
--- a/embed/ephy-embed-shell.c
+++ b/embed/ephy-embed-shell.c
@@ -726,9 +726,9 @@ initialize_web_process_extensions (WebKitWebContext *web_context,
   gboolean private_profile;
 
 #if DEVELOPER_MODE
-  webkit_web_context_set_web_extensions_directory (web_context, BUILD_ROOT "/embed/web-process-extension");
+  webkit_web_context_set_web_process_extensions_directory (web_context, BUILD_ROOT "/embed/web-process-extension");
 #else
-  webkit_web_context_set_web_extensions_directory (web_context, EPHY_WEB_PROCESS_EXTENSIONS_DIR);
+  webkit_web_context_set_web_process_extensions_directory (web_context, EPHY_WEB_PROCESS_EXTENSIONS_DIR);
 #endif
 
   private_profile = priv->mode == EPHY_EMBED_SHELL_MODE_PRIVATE || priv->mode == EPHY_EMBED_SHELL_MODE_INCOGNITO || priv->mode == EPHY_EMBED_SHELL_MODE_AUTOMATION;
@@ -739,7 +739,7 @@ initialize_web_process_extensions (WebKitWebContext *web_context,
                              private_profile,
                              FALSE /* is_webextension */,
                              "" /* webextension_translations */);
-  webkit_web_context_set_web_extensions_initialization_user_data (web_context, g_steal_pointer (&user_data));
+  webkit_web_context_set_web_process_extensions_initialization_user_data (web_context, g_steal_pointer (&user_data));
 }
 
 static void
@@ -861,7 +861,7 @@ ephy_embed_shell_startup (GApplication *application)
   webkit_web_context_add_path_to_sandbox (priv->web_context, BUILD_ROOT, TRUE);
 #endif
 
-  g_signal_connect_object (priv->web_context, "initialize-web-extensions",
+  g_signal_connect_object (priv->web_context, "initialize-web-process-extensions",
                            G_CALLBACK (initialize_web_process_extensions),
                            shell, 0);
 
diff --git a/embed/web-process-extension/ephy-web-process-extension-main.c b/embed/web-process-extension/ephy-web-process-extension-main.c
index cfb2584ec..9bd824045 100644
--- a/embed/web-process-extension/ephy-web-process-extension-main.c
+++ b/embed/web-process-extension/ephy-web-process-extension-main.c
@@ -32,8 +32,8 @@
 static EphyWebProcessExtension *extension = NULL;
 
 G_MODULE_EXPORT void
-webkit_web_extension_initialize_with_user_data (WebKitWebExtension *webkit_extension,
-                                                GVariant           *user_data)
+webkit_web_process_extension_initialize_with_user_data (WebKitWebProcessExtension *webkit_extension,
+                                                        GVariant                  *user_data)
 {
   const char *guid;
   const char *profile_dir;
diff --git a/embed/web-process-extension/ephy-web-process-extension.c b/embed/web-process-extension/ephy-web-process-extension.c
index 7e28c40c6..5081ebc00 100644
--- a/embed/web-process-extension/ephy-web-process-extension.c
+++ b/embed/web-process-extension/ephy-web-process-extension.c
@@ -38,12 +38,12 @@
 #include <jsc/jsc.h>
 #include <libsoup/soup.h>
 #include <string.h>
-#include <webkit/webkit-web-extension.h>
+#include <webkit/webkit-web-process-extension.h>
 
 struct _EphyWebProcessExtension {
   GObject parent_instance;
 
-  WebKitWebExtension *extension;
+  WebKitWebProcessExtension *extension;
   gboolean initialized;
 
   GCancellable *cancellable;
@@ -591,7 +591,7 @@ js_query_usernames (const char              *origin,
   if (!origin)
     return;
 
-  web_page = webkit_web_extension_get_page (extension->extension, page_id);
+  web_page = webkit_web_process_extension_get_page (extension->extension, page_id);
   if (!web_page)
     return;
 
@@ -667,7 +667,7 @@ js_query_password (const char              *origin,
   if (!origin || !target_origin || !password_field)
     return;
 
-  web_page = webkit_web_extension_get_page (extension->extension, page_id);
+  web_page = webkit_web_process_extension_get_page (extension->extension, page_id);
   if (!web_page)
     return;
 
@@ -857,11 +857,11 @@ window_object_cleared_cb (WebKitScriptWorld       *world,
 }
 
 void
-ephy_web_process_extension_initialize (EphyWebProcessExtension *extension,
-                                       WebKitWebExtension      *wk_extension,
-                                       const char              *guid,
-                                       gboolean                 should_remember_passwords,
-                                       gboolean                 is_private_profile)
+ephy_web_process_extension_initialize (EphyWebProcessExtension   *extension,
+                                       WebKitWebProcessExtension *wk_extension,
+                                       const char                *guid,
+                                       gboolean                   should_remember_passwords,
+                                       gboolean                   is_private_profile)
 {
   g_assert (EPHY_IS_WEB_PROCESS_EXTENSION (extension));
 
diff --git a/embed/web-process-extension/ephy-web-process-extension.h b/embed/web-process-extension/ephy-web-process-extension.h
index a239907d8..902a3b446 100644
--- a/embed/web-process-extension/ephy-web-process-extension.h
+++ b/embed/web-process-extension/ephy-web-process-extension.h
@@ -21,7 +21,7 @@
 #pragma once
 
 #include <glib-object.h>
-#include <webkit/webkit-web-extension.h>
+#include <webkit/webkit-web-process-extension.h>
 
 G_BEGIN_DECLS
 
@@ -30,11 +30,11 @@ G_BEGIN_DECLS
 G_DECLARE_FINAL_TYPE (EphyWebProcessExtension, ephy_web_process_extension, EPHY, WEB_PROCESS_EXTENSION, GObject)
 
 EphyWebProcessExtension *ephy_web_process_extension_get        (void);
-void                     ephy_web_process_extension_initialize (EphyWebProcessExtension *extension,
-                                                                WebKitWebExtension      *wk_extension,
-                                                                const char              *guid,
-                                                                gboolean                 should_remember_passwords,
-                                                                gboolean                 is_private_profile);
+void                     ephy_web_process_extension_initialize (EphyWebProcessExtension   *extension,
+                                                                WebKitWebProcessExtension *wk_extension,
+                                                                const char                *guid,
+                                                                gboolean                   should_remember_passwords,
+                                                                gboolean                   is_private_profile);
 
 void                     ephy_web_process_extension_deinitialize (EphyWebProcessExtension *extension);
 
diff --git a/embed/web-process-extension/ephy-webextension-api.c b/embed/web-process-extension/ephy-webextension-api.c
index af81080f9..86e7fc3b3 100644
--- a/embed/web-process-extension/ephy-webextension-api.c
+++ b/embed/web-process-extension/ephy-webextension-api.c
@@ -23,12 +23,12 @@
 #include "ephy-webextension-common.h"
 
 #include <json-glib/json-glib.h>
-#include <webkit/webkit-web-extension.h>
+#include <webkit/webkit-web-process-extension.h>
 
 struct _EphyWebExtensionExtension {
   GObject parent_instance;
 
-  WebKitWebExtension *extension;
+  WebKitWebProcessExtension *extension;
   char *guid;
   gboolean initialized;
 
@@ -256,7 +256,7 @@ ephy_web_extension_extension_update_translations (EphyWebExtensionExtension *ext
 
 void
 ephy_web_extension_extension_initialize (EphyWebExtensionExtension *extension,
-                                         WebKitWebExtension        *wk_extension,
+                                         WebKitWebProcessExtension *wk_extension,
                                          const char                *guid,
                                          const char                *translations)
 {
@@ -286,8 +286,8 @@ ephy_web_extension_extension_initialize (EphyWebExtensionExtension *extension,
 }
 
 G_MODULE_EXPORT void
-webkit_web_extension_initialize_with_user_data (WebKitWebExtension *webkit_extension,
-                                                GVariant           *user_data)
+webkit_web_process_extension_initialize_with_user_data (WebKitWebProcessExtension *webkit_extension,
+                                                        GVariant                  *user_data)
 {
   const char *guid;
   const char *profile_dir;
diff --git a/embed/web-process-extension/ephy-webextension-common.h b/embed/web-process-extension/ephy-webextension-common.h
index 1758de799..1c650d4c3 100644
--- a/embed/web-process-extension/ephy-webextension-common.h
+++ b/embed/web-process-extension/ephy-webextension-common.h
@@ -23,7 +23,7 @@
 #include <glib-object.h>
 #include <jsc/jsc.h>
 #include <json-glib/json-glib.h>
-#include <webkit/webkit-web-extension.h>
+#include <webkit/webkit-web-process-extension.h>
 
 G_BEGIN_DECLS
 
diff --git a/meson.build b/meson.build
index 8766f8aae..c689c4236 100644
--- a/meson.build
+++ b/meson.build
@@ -107,7 +107,7 @@ nettle_dep = dependency('nettle', version: nettle_requirement)
 portal_dep = dependency('libportal-gtk4', version: '>= 0.6')
 sqlite3_dep = dependency('sqlite3', version: '>= 3.22')
 webkitgtk_dep = dependency('webkitgtk-6.0', version: webkitgtk_requirement)
-webkitgtk_web_extension_dep = dependency('webkitgtk-web-extension-6.0', version: webkitgtk_requirement)
+webkitgtk_web_extension_dep = dependency('webkitgtk-web-process-extension-6.0', version: webkitgtk_requirement)
 
 if granite_dep.found()
   conf.set('USE_GRANITE', 1)
diff --git a/src/webextension/README.md b/src/webextension/README.md
index 711a6198d..01e0174e5 100644
--- a/src/webextension/README.md
+++ b/src/webextension/README.md
@@ -220,13 +220,13 @@ Adding a new API involves touching a few areas.
 
 - `embed/web-process-extension/resources/js/webextensions-common.js` and `embed/web-process-extension/resources/js/webextensions.js` These files contain JavaScript injected into pages. The former is injected for Content Scripts and Extension Pages while the latter is only injected into Extension Pages. They do little more than expose the API.
 
-- `embed/web-process-extension/ephy-webextension-api.c` This is a WebKitWebExtension that extends Extension Page web views. This defines some
+- `embed/web-process-extension/ephy-webextension-api.c` This is a WebKitWebProcessExtension that extends Extension Page web views. This defines some
 JavaScript API in C.
 
-- `embed/web-process-extension/ephy-web-process-extension.c` This is a WebKitWebExtension that extends normal web pages. It sets up the
+- `embed/web-process-extension/ephy-web-process-extension.c` This is a WebKitWebProcessExtension that extends normal web pages. It sets up the
 private JavaScriptWorlds used for Content Scripts.
 
-- `embed/web-process-extension/ephy-webextension-common.c` This is shared between the two WebKitWebExtensions above. It is the bulk of the
+- `embed/web-process-extension/ephy-webextension-common.c` This is shared between the two WebKitWebProcessExtensions above. It is the bulk of the
 `extension`/`runtime` and `i18n` APIs. It also handles much of the message passing to the UI process described below.
 
 - `src/webextension/ephy-web-extension-manager.c` This is where all extensions are managed in the UI process and also where all messages from web views are
diff --git a/src/webextension/ephy-web-extension-manager.c b/src/webextension/ephy-web-extension-manager.c
index 18b541563..0a3345c80 100644
--- a/src/webextension/ephy-web-extension-manager.c
+++ b/src/webextension/ephy-web-extension-manager.c
@@ -950,9 +950,9 @@ init_web_extension_api (WebKitWebContext *web_context,
   g_autofree char *translations = get_translation_contents (web_extension);
 
 #if DEVELOPER_MODE
-  webkit_web_context_set_web_extensions_directory (web_context, BUILD_ROOT "/embed/web-process-extension");
+  webkit_web_context_set_web_process_extensions_directory (web_context, BUILD_ROOT "/embed/web-process-extension");
 #else
-  webkit_web_context_set_web_extensions_directory (web_context, EPHY_WEB_PROCESS_EXTENSIONS_DIR);
+  webkit_web_context_set_web_process_extensions_directory (web_context, EPHY_WEB_PROCESS_EXTENSIONS_DIR);
 #endif
 
   user_data = g_variant_new ("(smsbbbs)",
@@ -962,7 +962,7 @@ init_web_extension_api (WebKitWebContext *web_context,
                              FALSE /* private_profile */,
                              TRUE /* is_webextension */,
                              translations);
-  webkit_web_context_set_web_extensions_initialization_user_data (web_context, g_steal_pointer (&user_data));
+  webkit_web_context_set_web_process_extensions_initialization_user_data (web_context, g_steal_pointer (&user_data));
 }
 
 static gboolean
@@ -1036,7 +1036,7 @@ ephy_web_extensions_manager_create_web_extensions_webview (EphyWebExtension *web
   webkit_web_context_register_uri_scheme (web_context, "ephy-webextension", ephy_webextension_scheme_cb, web_extension, NULL);
   webkit_security_manager_register_uri_scheme_as_secure (webkit_web_context_get_security_manager (web_context),
                                                          "ephy-webextension");
-  g_signal_connect_object (web_context, "initialize-web-extensions", G_CALLBACK (init_web_extension_api), web_extension, 0);
+  g_signal_connect_object (web_context, "initialize-web-process-extensions", G_CALLBACK (init_web_extension_api), web_extension, 0);
 
   web_view = g_object_new (WEBKIT_TYPE_WEB_VIEW,
                            "web-context", web_context,
-- 
GitLab


From d7cea9502ca6f888e80dab80fd5d5fd743d50d6f Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Wed, 8 Mar 2023 09:48:34 -0600
Subject: [PATCH 5/5] Remove use of WebKitJavascriptResult

https://bugs.webkit.org/show_bug.cgi?id=253476
---
 HACKING.md                                    |  4 +-
 embed/ephy-embed-shell.c                      | 34 +++++-----
 embed/ephy-find-toolbar.c                     |  8 +--
 embed/ephy-reader-handler.c                   | 17 ++---
 embed/ephy-web-view.c                         | 64 ++++++++-----------
 src/ephy-firefox-sync-dialog.c                |  8 +--
 src/webextension/api/tabs.c                   | 10 +--
 src/webextension/ephy-web-extension-manager.c | 20 +++---
 8 files changed, 72 insertions(+), 93 deletions(-)

diff --git a/HACKING.md b/HACKING.md
index ede696cd8..901dc1e16 100644
--- a/HACKING.md
+++ b/HACKING.md
@@ -162,8 +162,8 @@ changes you make to the web process extension (or its javascript files) aren't
 picked up, it means you didn't enable developer mode.
 
 Epiphany uses script message handlers as an additional form of IPC. This allows
-the web extension to send a `WebKitJavascriptResult` to the UI process, which
-is received in `EphyEmbedShell`.
+the web extension to send a `JSCValue` to the UI process, which is received in
+`EphyEmbedShell`.
 
 Corresponding to `WebKitWebContext` and `WebKitWebView`, the central classes of
 the UI process API, the web process API has `WebKitWebProcessExtension` and
diff --git a/embed/ephy-embed-shell.c b/embed/ephy-embed-shell.c
index f10621cb6..235750690 100644
--- a/embed/ephy-embed-shell.c
+++ b/embed/ephy-embed-shell.c
@@ -210,7 +210,7 @@ ephy_embed_shell_dispose (GObject *object)
 
 static void
 web_process_extension_password_form_focused_message_received_cb (WebKitUserContentManager *manager,
-                                                                 WebKitJavascriptResult   *message,
+                                                                 JSCValue                 *message,
                                                                  EphyEmbedShell           *shell)
 {
   guint64 page_id;
@@ -218,7 +218,7 @@ web_process_extension_password_form_focused_message_received_cb (WebKitUserConte
   g_autoptr (GVariant) variant = NULL;
   g_autofree char *message_str = NULL;
 
-  message_str = jsc_value_to_string (webkit_javascript_result_get_js_value (message));
+  message_str = jsc_value_to_string (message);
   variant = g_variant_parse (G_VARIANT_TYPE ("(tb)"), message_str, NULL, NULL, NULL);
 
   g_variant_get (variant, "(tb)", &page_id, &insecure_form_action);
@@ -285,13 +285,13 @@ history_set_url_hidden_cb (EphyHistoryService *service,
 
 static void
 web_process_extension_overview_message_received_cb (WebKitUserContentManager *manager,
-                                                    WebKitJavascriptResult   *message,
+                                                    JSCValue                 *message,
                                                     EphyEmbedShell           *shell)
 {
   EphyEmbedShellPrivate *priv = ephy_embed_shell_get_instance_private (shell);
   g_autofree char *url_to_remove = NULL;
 
-  url_to_remove = jsc_value_to_string (webkit_javascript_result_get_js_value (message));
+  url_to_remove = jsc_value_to_string (message);
 
   ephy_history_service_set_url_hidden (priv->global_history_service,
                                        url_to_remove, TRUE, NULL,
@@ -301,45 +301,45 @@ web_process_extension_overview_message_received_cb (WebKitUserContentManager *ma
 
 static void
 web_process_extension_tls_error_page_message_received_cb (WebKitUserContentManager *manager,
-                                                          WebKitJavascriptResult   *message,
+                                                          JSCValue                 *message,
                                                           EphyEmbedShell           *shell)
 {
   guint64 page_id;
 
-  page_id = jsc_value_to_double (webkit_javascript_result_get_js_value (message));
+  page_id = jsc_value_to_double (message);
   g_signal_emit (shell, signals[ALLOW_TLS_CERTIFICATE], 0, page_id);
 }
 
 static void
 web_process_extension_reload_page_message_received_cb (WebKitUserContentManager *manager,
-                                                       WebKitJavascriptResult   *message,
+                                                       JSCValue                 *message,
                                                        EphyEmbedShell           *shell)
 {
   guint64 page_id;
 
-  page_id = jsc_value_to_double (webkit_javascript_result_get_js_value (message));
+  page_id = jsc_value_to_double (message);
   g_signal_emit (shell, signals[RELOAD_PAGE], 0, page_id);
 }
 
 static void
 web_process_extension_unsafe_browsing_error_page_message_received_cb (WebKitUserContentManager *manager,
-                                                                      WebKitJavascriptResult   *message,
+                                                                      JSCValue                 *message,
                                                                       EphyEmbedShell           *shell)
 {
   guint64 page_id;
 
-  page_id = jsc_value_to_double (webkit_javascript_result_get_js_value (message));
+  page_id = jsc_value_to_double (message);
   g_signal_emit (shell, signals[ALLOW_UNSAFE_BROWSING], 0, page_id);
 }
 
 static void
 web_process_extension_about_apps_message_received_cb (WebKitUserContentManager *manager,
-                                                      WebKitJavascriptResult   *message,
+                                                      JSCValue                 *message,
                                                       EphyEmbedShell           *shell)
 {
   g_autofree char *app_id = NULL;
 
-  app_id = jsc_value_to_string (webkit_javascript_result_get_js_value (message));
+  app_id = jsc_value_to_string (message);
   ephy_web_application_delete (app_id, NULL);
 }
 
@@ -430,20 +430,18 @@ web_process_extension_password_manager_save_real (EphyEmbedShell *shell,
 
 static void
 web_process_extension_password_manager_save_received_cb (WebKitUserContentManager *manager,
-                                                         WebKitJavascriptResult   *message,
+                                                         JSCValue                 *message,
                                                          EphyEmbedShell           *shell)
 {
-  JSCValue *value = webkit_javascript_result_get_js_value (message);
-  web_process_extension_password_manager_save_real (shell, value, FALSE);
+  web_process_extension_password_manager_save_real (shell, message, FALSE);
 }
 
 static void
 web_process_extension_password_manager_request_save_received_cb (WebKitUserContentManager *manager,
-                                                                 WebKitJavascriptResult   *message,
+                                                                 JSCValue                 *message,
                                                                  EphyEmbedShell           *shell)
 {
-  JSCValue *value = webkit_javascript_result_get_js_value (message);
-  web_process_extension_password_manager_save_real (shell, value, TRUE);
+  web_process_extension_password_manager_save_real (shell, message, TRUE);
 }
 
 static void
diff --git a/embed/ephy-find-toolbar.c b/embed/ephy-find-toolbar.c
index 49c1989eb..015460ef6 100644
--- a/embed/ephy-find-toolbar.c
+++ b/embed/ephy-find-toolbar.c
@@ -445,16 +445,14 @@ ephy_find_toolbar_selection_async (GObject      *source_object,
   WebKitWebView *web_view = WEBKIT_WEB_VIEW (source_object);
   EphyFindToolbar *toolbar = EPHY_FIND_TOOLBAR (user_data);
   g_autoptr (GError) error = NULL;
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
-  JSCValue *value = NULL;
+  g_autoptr (JSCValue) value = NULL;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (web_view, res, &error);
-  if (!js_result) {
+  value = webkit_web_view_evaluate_javascript_finish (web_view, res, &error);
+  if (!value) {
     g_warning ("Error running javascript: %s", error->message);
     return;
   }
 
-  value = webkit_javascript_result_get_js_value (js_result);
   if (jsc_value_is_string (value)) {
     JSCException *exception;
     g_autofree gchar *str_value = NULL;
diff --git a/embed/ephy-reader-handler.c b/embed/ephy-reader-handler.c
index 83c3f3a85..ad46def74 100644
--- a/embed/ephy-reader-handler.c
+++ b/embed/ephy-reader-handler.c
@@ -125,14 +125,11 @@ enum_nick (GType enum_type,
 }
 
 static char *
-readability_get_property_string (WebKitJavascriptResult *js_result,
-                                 char                   *property)
+readability_get_property_string (JSCValue *jsc_value,
+                                 char     *property)
 {
-  JSCValue *jsc_value;
   char *result = NULL;
 
-  jsc_value = webkit_javascript_result_get_js_value (js_result);
-
   if (!jsc_value_is_object (jsc_value))
     return NULL;
 
@@ -155,7 +152,7 @@ readability_js_finish_cb (GObject      *object,
 {
   WebKitWebView *web_view = WEBKIT_WEB_VIEW (object);
   EphyReaderRequest *request = user_data;
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
+  g_autoptr (JSCValue) value = NULL;
   g_autoptr (GError) error = NULL;
   g_autofree gchar *byline = NULL;
   g_autofree gchar *encoded_byline = NULL;
@@ -168,15 +165,15 @@ readability_js_finish_cb (GObject      *object,
   const gchar *color_scheme;
   AdwStyleManager *style_manager;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (web_view, result, &error);
-  if (!js_result) {
+  value = webkit_web_view_evaluate_javascript_finish (web_view, result, &error);
+  if (!value) {
     if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       g_warning ("Error running javascript: %s", error->message);
     return;
   }
 
-  byline = readability_get_property_string (js_result, "byline");
-  content = readability_get_property_string (js_result, "content");
+  byline = readability_get_property_string (value, "byline");
+  content = readability_get_property_string (value, "content");
   title = webkit_web_view_get_title (web_view);
 
   encoded_byline = byline ? ephy_encode_for_html_entity (byline) : g_strdup ("");
diff --git a/embed/ephy-web-view.c b/embed/ephy-web-view.c
index e90a69f22..6fb07538d 100644
--- a/embed/ephy-web-view.c
+++ b/embed/ephy-web-view.c
@@ -54,6 +54,8 @@
 #include <glib/gi18n.h>
 #include <glib/gstdio.h>
 #include <gtk/gtk.h>
+#include <jsc/jsc.h>
+#include <webkit/webkit.h>
 
 /**
  * SECTION:ephy-web-view
@@ -629,21 +631,18 @@ readability_js_finish_cb (GObject      *object,
                           gpointer      user_data)
 {
   EphyWebView *view = EPHY_WEB_VIEW (user_data);
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
+  g_autoptr (JSCValue) jsc_value = NULL;
   g_autoptr (GError) error = NULL;
-  JSCValue *jsc_value;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
-  if (!js_result) {
+  jsc_value = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (object), result, &error);
+  if (!jsc_value) {
     if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       g_warning ("Error running javascript: %s", error->message);
     return;
   }
 
-  jsc_value = webkit_javascript_result_get_js_value (js_result);
-  if (!jsc_value_is_boolean (jsc_value)) {
+  if (!jsc_value_is_boolean (jsc_value))
     return;
-  }
 
   view->reader_mode_available = jsc_value_to_boolean (jsc_value);
 
@@ -2931,12 +2930,12 @@ has_modified_forms_cb (WebKitWebView *view,
                        GAsyncResult  *result,
                        GTask         *task)
 {
-  WebKitJavascriptResult *js_result;
+  g_autoptr (JSCValue) value = NULL;
   gboolean retval = FALSE;
   GError *error = NULL;
   gulong id;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
+  value = webkit_web_view_evaluate_javascript_finish (view, result, &error);
 
   id = GPOINTER_TO_INT (g_task_get_task_data (task));
   if (id == 0) {
@@ -2945,16 +2944,14 @@ has_modified_forms_cb (WebKitWebView *view,
   }
   g_source_remove (id);
 
-  if (!js_result) {
+  if (!value) {
     g_task_return_error (task, error);
   } else {
-    retval = jsc_value_to_boolean (webkit_javascript_result_get_js_value (js_result));
+    retval = jsc_value_to_boolean (value);
     g_task_return_boolean (task, retval);
   }
 
 out:
-  if (js_result)
-    webkit_javascript_result_unref (js_result);
   g_object_unref (task);
 }
 
@@ -3034,28 +3031,25 @@ get_best_web_app_icon_cb (WebKitWebView *view,
                           GAsyncResult  *result,
                           GTask         *task)
 {
-  WebKitJavascriptResult *js_result;
+  g_autoptr (JSCValue) js_value = NULL;
   GError *error = NULL;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
-  if (js_result) {
-    JSCValue *js_value, *js_uri, *js_color;
+  js_value = webkit_web_view_evaluate_javascript_finish (view, result, &error);
+  if (js_value) {
+    g_autoptr (JSCValue) js_uri = NULL;
+    g_autoptr (JSCValue) js_color = NULL;
     GetBestWebAppIconAsyncData *data;
 
-    data = g_new0 (GetBestWebAppIconAsyncData, 1);
-    js_value = webkit_javascript_result_get_js_value (js_result);
     g_assert (jsc_value_is_object (js_value));
 
     js_uri = jsc_value_object_get_property (js_value, "url");
-    data->icon_uri = jsc_value_to_string (js_uri);
-    g_object_unref (js_uri);
-
     js_color = jsc_value_object_get_property (js_value, "icon");
+
+    data = g_new0 (GetBestWebAppIconAsyncData, 1);
+    data->icon_uri = jsc_value_to_string (js_uri);
     data->icon_color = jsc_value_is_null (js_color) || jsc_value_is_undefined (js_color) ? NULL : jsc_value_to_string (js_color);
-    g_object_unref (js_color);
 
     g_task_return_pointer (task, data, (GDestroyNotify)get_best_web_app_icon_async_data_free);
-    webkit_javascript_result_unref (js_result);
   } else
     g_task_return_error (task, error);
 
@@ -3121,19 +3115,16 @@ get_web_app_title_cb (WebKitWebView *view,
                       GAsyncResult  *result,
                       GTask         *task)
 {
-  WebKitJavascriptResult *js_result;
+  g_autoptr (JSCValue) js_value = NULL;
   GError *error = NULL;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
-  if (js_result) {
-    JSCValue *js_value;
+  js_value = webkit_web_view_evaluate_javascript_finish (view, result, &error);
+  if (js_value) {
     char *retval = NULL;
 
-    js_value = webkit_javascript_result_get_js_value (js_result);
     if (!jsc_value_is_null (js_value) && !jsc_value_is_undefined (js_value))
       retval = jsc_value_to_string (js_value);
     g_task_return_pointer (task, retval, (GDestroyNotify)g_free);
-    webkit_javascript_result_unref (js_result);
   } else
     g_task_return_error (task, error);
 
@@ -3175,19 +3166,14 @@ get_web_app_mobile_capable_cb (WebKitWebView *view,
                                GAsyncResult  *result,
                                GTask         *task)
 {
-  WebKitJavascriptResult *js_result;
+  g_autoptr (JSCValue) js_value = NULL;
   GError *error = NULL;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (view, result, &error);
-  if (js_result) {
-    JSCValue *js_value;
-    gboolean retval = FALSE;
-
-    js_value = webkit_javascript_result_get_js_value (js_result);
-    retval = jsc_value_to_boolean (js_value);
+  js_value = webkit_web_view_evaluate_javascript_finish (view, result, &error);
+  if (js_value) {
+    gboolean retval = jsc_value_to_boolean (js_value);
 
     g_task_return_boolean (task, retval);
-    webkit_javascript_result_unref (js_result);
   } else
     g_task_return_error (task, error);
 
diff --git a/src/ephy-firefox-sync-dialog.c b/src/ephy-firefox-sync-dialog.c
index 44e4b2a26..11fc929c4 100644
--- a/src/ephy-firefox-sync-dialog.c
+++ b/src/ephy-firefox-sync-dialog.c
@@ -356,7 +356,7 @@ out_no_error:
 
 static void
 sync_message_from_fxa_content_cb (WebKitUserContentManager *manager,
-                                  WebKitJavascriptResult   *result,
+                                  JSCValue                 *value,
                                   EphyFirefoxSyncDialog    *sync_dialog)
 {
   JsonObject *data = NULL;
@@ -367,7 +367,7 @@ sync_message_from_fxa_content_cb (WebKitUserContentManager *manager,
   char *error_msg = NULL;
   gboolean is_error = FALSE;
 
-  message = jsc_value_to_string (webkit_javascript_result_get_js_value (result));
+  message = jsc_value_to_string (value);
   if (!message) {
     g_warning ("Failed to get JavaScript result as string");
     is_error = TRUE;
@@ -431,7 +431,7 @@ out:
 
 static void
 sync_open_webmail_clicked_cb (WebKitUserContentManager *manager,
-                              WebKitJavascriptResult   *result,
+                              JSCValue                 *value,
                               EphyFirefoxSyncDialog    *sync_page)
 {
   EphyShell *shell;
@@ -440,7 +440,7 @@ sync_open_webmail_clicked_cb (WebKitUserContentManager *manager,
   GtkRoot *prefs_dialog;
   char *url;
 
-  url = jsc_value_to_string (webkit_javascript_result_get_js_value (result));
+  url = jsc_value_to_string (value);
   if (url) {
     /* Open a new tab to the webmail URL. */
     shell = ephy_shell_get_default ();
diff --git a/src/webextension/api/tabs.c b/src/webextension/api/tabs.c
index c80c1c6d3..924b7e358 100644
--- a/src/webextension/api/tabs.c
+++ b/src/webextension/api/tabs.c
@@ -392,20 +392,20 @@ on_execute_script_ready (GObject      *source,
                          GAsyncResult *result,
                          gpointer      user_data)
 {
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
+  g_autoptr (JSCValue) value = NULL;
   g_autoptr (GError) error = NULL;
   GTask *task = user_data;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
-                                                          result,
-                                                          &error);
+  value = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                      result,
+                                                      &error);
 
   if (error) {
     g_task_return_error (task, g_steal_pointer (&error));
     return;
   }
 
-  g_task_return_pointer (task, jsc_value_to_json (webkit_javascript_result_get_js_value (js_result), 0), g_free);
+  g_task_return_pointer (task, jsc_value_to_json (value, 0), g_free);
 }
 
 static void
diff --git a/src/webextension/ephy-web-extension-manager.c b/src/webextension/ephy-web-extension-manager.c
index 0a3345c80..3350fd83b 100644
--- a/src/webextension/ephy-web-extension-manager.c
+++ b/src/webextension/ephy-web-extension-manager.c
@@ -1582,16 +1582,16 @@ tab_emit_ready_cb (GObject      *source,
   PendingMessageReplyTracker *tracker = user_data;
   GHashTable *pending_messages;
   g_autoptr (GError) error = NULL;
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
+  g_autoptr (JSCValue) value = NULL;
   GTask *pending_task;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
-                                                          result,
-                                                          &error);
+  value = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                      result,
+                                                      &error);
 
   /* If it returned true it will be asynchronously handled later. Otherwise we
    * complete it now with undefined. */
-  if (error || !jsc_value_to_boolean (webkit_javascript_result_get_js_value (js_result))) {
+  if (error || !jsc_value_to_boolean (value)) {
     pending_messages = g_hash_table_lookup (manager->pending_messages, tracker->web_extension);
     pending_task = g_hash_table_lookup (pending_messages, tracker->message_guid);
     if (pending_task) {
@@ -1661,13 +1661,13 @@ on_extension_emit_ready (GObject      *source,
   PendingMessageReplyTracker *tracker = user_data;
   GHashTable *pending_messages;
   g_autoptr (GError) error = NULL;
-  g_autoptr (WebKitJavascriptResult) js_result = NULL;
+  g_autoptr (JSCValue) value = NULL;
 
-  js_result = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
-                                                          result,
-                                                          &error);
+  value = webkit_web_view_evaluate_javascript_finish (WEBKIT_WEB_VIEW (source),
+                                                      result,
+                                                      &error);
 
-  if (!error && jsc_value_to_boolean (webkit_javascript_result_get_js_value (js_result)))
+  if (!error && jsc_value_to_boolean (value))
     tracker->handled = TRUE;
 
   /* Once all views have been notified it will either be handled by one of them, in which case
-- 
GitLab

