From 7fef9b0b3760b8c702344f9e7a78b24a3e5b42d9 Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Sun, 11 Jul 2021 12:52:23 +0200
Subject: [PATCH] gio-2.0,glib-2.0: Add new symbols from 2.69.0

---
 vapi/gio-2.0.vapi  | 76 +++++++++++++++++++++++++++++++++++++++++-----
 vapi/glib-2.0.vapi | 47 ++++++++++++++++++++++++----
 2 files changed, 109 insertions(+), 14 deletions(-)

diff --git a/vapi/gio-2.0.vapi b/vapi/gio-2.0.vapi
index 855aeb9e8..b5e4aef87 100644
--- a/vapi/gio-2.0.vapi
+++ b/vapi/gio-2.0.vapi
@@ -103,6 +103,9 @@ namespace GLib {
 		[Version (since = "2.26")]
 		public static bool is_address (string string);
 		[CCode (cheader_filename = "gio/gio.h")]
+		[Version (since = "2.70")]
+		public static bool is_error_name (string string);
+		[CCode (cheader_filename = "gio/gio.h")]
 		[Version (since = "2.26")]
 		public static bool is_guid (string string);
 		[CCode (cheader_filename = "gio/gio.h")]
@@ -970,7 +973,7 @@ namespace GLib {
 		public DBusObjectManagerServer (string object_path);
 		public void export (GLib.DBusObjectSkeleton object);
 		public void export_uniquely (GLib.DBusObjectSkeleton object);
-		public GLib.DBusConnection get_connection ();
+		public GLib.DBusConnection? get_connection ();
 		[Version (since = "2.34")]
 		public bool is_exported (GLib.DBusObjectSkeleton object);
 		public void set_connection (GLib.DBusConnection? connection);
@@ -1044,7 +1047,7 @@ namespace GLib {
 		public GLib.DBusProxyFlags get_flags ();
 		public unowned GLib.DBusInterfaceInfo? get_interface_info ();
 		public unowned string get_interface_name ();
-		public unowned string get_name ();
+		public unowned string? get_name ();
 		public string? get_name_owner ();
 		public unowned string get_object_path ();
 		[CCode (cname = "g_dbus_proxy_new", finish_name = "g_dbus_proxy_new_finish")]
@@ -3028,7 +3031,19 @@ namespace GLib {
 		[CCode (has_construct_function = false)]
 		[Version (since = "2.68")]
 		public TlsCertificate.from_pkcs11_uris (string pkcs11_uri, string? private_key_pkcs11_uri) throws GLib.Error;
+		[Version (since = "2.70")]
+		public GLib.GenericArray<weak GLib.Bytes>? get_dns_names ();
+		[Version (since = "2.70")]
+		public GLib.GenericArray<weak GLib.InetAddress>? get_ip_addresses ();
 		public unowned GLib.TlsCertificate? get_issuer ();
+		[Version (since = "2.70")]
+		public string? get_issuer_name ();
+		[Version (since = "2.70")]
+		public GLib.DateTime? get_not_valid_after ();
+		[Version (since = "2.70")]
+		public GLib.DateTime? get_not_valid_before ();
+		[Version (since = "2.70")]
+		public string? get_subject_name ();
 		[Version (since = "2.34")]
 		public bool is_same (GLib.TlsCertificate cert_two);
 		public static GLib.List<GLib.TlsCertificate> list_new_from_file (string file) throws GLib.Error;
@@ -3037,17 +3052,29 @@ namespace GLib {
 		public GLib.ByteArray certificate { owned get; construct; }
 		[NoAccessorMethod]
 		public string certificate_pem { owned get; construct; }
+		[Version (since = "2.70")]
+		public GLib.GenericArray<void*> dns_names { owned get; }
+		[Version (since = "2.70")]
+		public GLib.GenericArray<void*> ip_addresses { owned get; }
 		public GLib.TlsCertificate issuer { get; construct; }
+		[Version (since = "2.70")]
+		public string issuer_name { owned get; }
+		[Version (since = "2.70")]
+		public GLib.DateTime not_valid_after { owned get; }
+		[Version (since = "2.70")]
+		public GLib.DateTime not_valid_before { owned get; }
 		[NoAccessorMethod]
 		[Version (since = "2.68")]
 		public string pkcs11_uri { owned get; construct; }
 		[NoAccessorMethod]
-		public GLib.ByteArray private_key { construct; }
+		public GLib.ByteArray private_key { owned get; construct; }
 		[NoAccessorMethod]
-		public string private_key_pem { construct; }
+		public string private_key_pem { owned get; construct; }
 		[NoAccessorMethod]
 		[Version (since = "2.68")]
 		public string private_key_pkcs11_uri { owned get; construct; }
+		[Version (since = "2.70")]
+		public string subject_name { owned get; }
 	}
 	[CCode (cheader_filename = "gio/gio.h", type_id = "g_tls_connection_get_type ()")]
 	[Version (since = "2.28")]
@@ -3059,14 +3086,18 @@ namespace GLib {
 		[CCode (vfunc_name = "get_binding_data")]
 		[Version (since = "2.66")]
 		public virtual bool get_channel_binding_data (GLib.TlsChannelBindingType type, out unowned GLib.ByteArray data) throws GLib.TlsChannelBindingError;
+		[Version (since = "2.70")]
+		public string? get_ciphersuite_name ();
 		[Version (since = "2.30")]
 		public unowned GLib.TlsDatabase? get_database ();
 		[Version (since = "2.30")]
 		public unowned GLib.TlsInteraction? get_interaction ();
 		[Version (since = "2.60")]
-		public unowned string? get_negotiated_protocol ();
+		public virtual unowned string? get_negotiated_protocol ();
 		public unowned GLib.TlsCertificate? get_peer_certificate ();
 		public GLib.TlsCertificateFlags get_peer_certificate_errors ();
+		[Version (since = "2.70")]
+		public GLib.TlsProtocolVersion get_protocol_version ();
 		[Version (deprecated = true, deprecated_since = "2.60.", since = "2.28")]
 		public GLib.TlsRehandshakeMode get_rehandshake_mode ();
 		public bool get_require_close_notify ();
@@ -3093,6 +3124,8 @@ namespace GLib {
 		[NoAccessorMethod]
 		public GLib.IOStream base_io_stream { owned get; construct; }
 		public GLib.TlsCertificate certificate { get; set; }
+		[Version (since = "2.70")]
+		public string ciphersuite_name { owned get; }
 		[Version (since = "2.30")]
 		public GLib.TlsDatabase database { get; set; }
 		[Version (since = "2.30")]
@@ -3101,6 +3134,8 @@ namespace GLib {
 		public string negotiated_protocol { get; }
 		public GLib.TlsCertificate peer_certificate { get; }
 		public GLib.TlsCertificateFlags peer_certificate_errors { get; }
+		[Version (since = "2.70")]
+		public GLib.TlsProtocolVersion protocol_version { get; }
 		[Version (deprecated = true, deprecated_since = "2.60", since = "2.28")]
 		public GLib.TlsRehandshakeMode rehandshake_mode { get; set construct; }
 		public bool require_close_notify { get; set construct; }
@@ -3449,9 +3484,9 @@ namespace GLib {
 	[CCode (cheader_filename = "gio/gio.h", type_id = "g_dbus_object_manager_get_type ()")]
 	public interface DBusObjectManager : GLib.Object {
 		[Version (since = "2.30")]
-		public abstract GLib.DBusInterface get_interface (string object_path, string interface_name);
+		public abstract GLib.DBusInterface? get_interface (string object_path, string interface_name);
 		[Version (since = "2.30")]
-		public abstract GLib.DBusObject get_object (string object_path);
+		public abstract GLib.DBusObject? get_object (string object_path);
 		[Version (since = "2.30")]
 		public abstract unowned string get_object_path ();
 		[Version (since = "2.30")]
@@ -3558,12 +3593,16 @@ namespace GLib {
 		[CCode (vfunc_name = "get_binding_data")]
 		[Version (since = "2.66")]
 		public virtual bool get_channel_binding_data (GLib.TlsChannelBindingType type, out unowned GLib.ByteArray data) throws GLib.TlsChannelBindingError;
+		[Version (since = "2.70")]
+		public string? get_ciphersuite_name ();
 		public unowned GLib.TlsDatabase? get_database ();
 		public unowned GLib.TlsInteraction? get_interaction ();
 		[Version (since = "2.60")]
 		public abstract unowned string? get_negotiated_protocol ();
 		public unowned GLib.TlsCertificate? get_peer_certificate ();
 		public GLib.TlsCertificateFlags get_peer_certificate_errors ();
+		[Version (since = "2.70")]
+		public GLib.TlsProtocolVersion get_protocol_version ();
 		[Version (deprecated = true, deprecated_since = "2.64.", since = "2.48")]
 		public GLib.TlsRehandshakeMode get_rehandshake_mode ();
 		public bool get_require_close_notify ();
@@ -3588,6 +3627,9 @@ namespace GLib {
 		[ConcreteAccessor]
 		public abstract GLib.TlsCertificate certificate { get; set; }
 		[ConcreteAccessor]
+		[Version (since = "2.70")]
+		public abstract string ciphersuite_name { owned get; }
+		[ConcreteAccessor]
 		public abstract GLib.TlsDatabase database { get; set; }
 		[ConcreteAccessor]
 		public abstract GLib.TlsInteraction interaction { get; set; }
@@ -3598,6 +3640,9 @@ namespace GLib {
 		[ConcreteAccessor]
 		public abstract GLib.TlsCertificateFlags peer_certificate_errors { get; }
 		[ConcreteAccessor]
+		[Version (since = "2.70")]
+		public abstract GLib.TlsProtocolVersion protocol_version { get; }
+		[ConcreteAccessor]
 		[Version (deprecated = true, deprecated_since = "2.60", since = "2.48")]
 		public abstract GLib.TlsRehandshakeMode rehandshake_mode { get; set construct; }
 		[ConcreteAccessor]
@@ -4707,7 +4752,22 @@ namespace GLib {
 		NONE,
 		RETRY,
 		MANY_TRIES,
-		FINAL_TRY
+		FINAL_TRY,
+		PKCS11_USER,
+		PKCS11_SECURITY_OFFICER,
+		PKCS11_CONTEXT_SPECIFIC
+	}
+	[CCode (cheader_filename = "gio/gio.h", cprefix = "G_TLS_PROTOCOL_VERSION_", type_id = "g_tls_protocol_version_get_type ()")]
+	[Version (since = "2.70")]
+	public enum TlsProtocolVersion {
+		UNKNOWN,
+		SSL_3_0,
+		TLS_1_0,
+		TLS_1_1,
+		TLS_1_2,
+		TLS_1_3,
+		DTLS_1_0,
+		DTLS_1_2
 	}
 	[CCode (cheader_filename = "gio/gio.h", cprefix = "G_TLS_REHANDSHAKE_", type_id = "g_tls_rehandshake_mode_get_type ()")]
 	[Version (deprecated = true, deprecated_since = "2.60.", since = "2.28")]
diff --git a/vapi/glib-2.0.vapi b/vapi/glib-2.0.vapi
index 02f0a81fc..c0906bdd6 100644
--- a/vapi/glib-2.0.vapi
+++ b/vapi/glib-2.0.vapi
@@ -2031,7 +2031,7 @@ namespace GLib {
 #endif
 	}
 
-	public delegate void ChildWatchFunc (Pid pid, int status);
+	public delegate void ChildWatchFunc (Pid pid, int wait_status);
 	[Version (since = "2.64")]
 	[CCode (has_target = false)]
 	public delegate void SourceDisposeFunc (Source source);
@@ -2385,6 +2385,9 @@ namespace GLib {
 	public class ThreadPool<T> {
 		[Version (deprecated_since = "vala-0.18", replacement = "ThreadPool.with_owned_data")]
 		public ThreadPool (Func<T> func, int max_threads, bool exclusive) throws ThreadError;
+		[Version (since = "2.70")]
+		[CCode (cname = "g_thread_pool_new_full")]
+		public ThreadPool.full (Func<T> func, DestroyNotify? item_free_func, int max_threads, bool exclusive) throws ThreadError;
 		[CCode (cname = "g_thread_pool_new")]
 		public ThreadPool.with_owned_data (ThreadPoolFunc<T> func, int max_threads, bool exclusive) throws ThreadError;
 		[Version (deprecated_since = "vala-0.18", replacement = "add")]
@@ -2658,6 +2661,9 @@ namespace GLib {
 		public bool matches (Quark domain, int code);
 		[CCode (cname = "g_prefix_error")]
 		public static void prefix (out Error? dest, string format, ...);
+		[Version (since = "2.70")]
+		[CCode (cname = "g_prefix_error_literal")]
+		public static void prefix_literal (out Error? dest, string prefix);
 		[CCode (cname = "g_propagate_error")]
 		public static void propagate (out Error? dest, owned Error src);
 		[CCode (cname = "g_propagate_prefixed_error")]
@@ -3780,14 +3786,17 @@ namespace GLib {
 		[Version (since = "2.68")]
 		public static bool spawn_async_with_pipes_and_fds (string? working_directory, [CCode (array_length = false, array_null_terminated = true)] string[] argv, [CCode (array_length = false, array_null_terminated = true)] string[]? envp, SpawnFlags _flags, SpawnChildSetupFunc? child_setup, int stdin_fd, int stdout_fd, int stderr_fd, [CCode (array_length_pos = 10.1, array_length_type = "size_t")] int[] source_fds, [CCode (array_length_pos = 10.1, array_length_type = "size_t")] int[] target_fds, out Pid child_pid, out int standard_input = null, out int standard_output = null, out int standard_error = null) throws SpawnError;
 		public static bool spawn_async (string? working_directory, [CCode (array_length = false, array_null_terminated = true)] string[] argv, [CCode (array_length = false, array_null_terminated = true)] string[]? envp, SpawnFlags _flags, SpawnChildSetupFunc? child_setup, out Pid child_pid) throws SpawnError;
-		public static bool spawn_sync (string? working_directory, [CCode (array_length = false, array_null_terminated = true)] string[] argv, [CCode (array_length = false, array_null_terminated = true)] string[]? envp, SpawnFlags _flags, SpawnChildSetupFunc? child_setup, out string standard_output = null, out string standard_error = null, out int exit_status = null) throws SpawnError;
+		public static bool spawn_sync (string? working_directory, [CCode (array_length = false, array_null_terminated = true)] string[] argv, [CCode (array_length = false, array_null_terminated = true)] string[]? envp, SpawnFlags _flags, SpawnChildSetupFunc? child_setup, out string standard_output = null, out string standard_error = null, out int wait_status = null) throws SpawnError;
 		public static bool spawn_command_line_async (string command_line) throws SpawnError;
-		public static bool spawn_command_line_sync (string command_line, out string standard_output = null, out string standard_error = null, out int exit_status = null) throws SpawnError;
+		public static bool spawn_command_line_sync (string command_line, out string standard_output = null, out string standard_error = null, out int wait_status = null) throws SpawnError;
 		[CCode (cname = "g_spawn_close_pid")]
 		public static void close_pid (Pid pid);
-		[Version (since = "2.34")]
+		[Version (since = "2.34", deprecated_since = "2.70", replacement = "check_wait_status")]
 		[CCode (cname = "g_spawn_check_exit_status")]
-		public static bool check_exit_status (int exit_status) throws GLib.Error;
+		public static bool check_exit_status (int wait_status) throws GLib.Error;
+		[Version (since = "2.70")]
+		[CCode (cname = "g_spawn_check_wait_status")]
+		public static bool check_wait_status (int wait_status) throws GLib.Error;
 
 		/* these macros are required to examine the exit status of a process */
 		[CCode (cname = "WIFEXITED", cheader_filename = "sys/wait.h")]
@@ -4324,6 +4333,9 @@ namespace GLib {
 
 	[CCode (has_type_id = false)]
 	public struct OptionEntry {
+		[Version (since = "2.70")]
+		public const OptionEntry NULL;
+
 		public unowned string long_name;
 		public char short_name;
 		[CCode (type = "gint")]
@@ -5499,7 +5511,11 @@ namespace GLib {
 	[CCode (ref_function = "g_strv_builder_ref", unref_function = "g_strv_builder_unref", has_type_id = false)]
 	public class StrvBuilder {
 		public StrvBuilder ();
-		public void add (string val);
+		public void add (string @value);
+		[Version (since = "2.70")]
+		public void addv ([CCode (array_length = false, array_null_terminated = true)] string[] @value);
+		[Version (since = "2.70")]
+		public void add_many (...);
 		[CCode (array_length = false, array_null_terminated = true)]
 		public string[] end ();
 	}
@@ -5609,6 +5625,8 @@ namespace GLib {
 
 		[CCode (array_length_type = "gsize")]
 		public unowned uint8[]? get_data ();
+		[Version (since = "2.70")]
+		public void* get_region (size_t element_size, size_t offset, size_t n_elements);
 		public size_t get_size ();
 		public uint hash ();
 		public int compare (GLib.Bytes bytes2);
@@ -5903,6 +5921,8 @@ namespace GLib {
 		[Version (since = "2.68")]
 		public unowned V search_node (CompareFunc<K> search_func, K key);
 		public bool remove (K key);
+		[Version (since = "2.70")]
+		public void remove_all ();
 		public bool steal (K key);
 		[Version (since = "2.68")]
 		public unowned TreeNode<K,V>? node_first ();
@@ -5983,13 +6003,27 @@ namespace GLib {
 	}
 
 	[Compact]
+#if GLIB_2_70
+	[CCode (copy_function = "g_pattern_spec_copy", free_function = "g_pattern_spec_free", type_id = "G_TYPE_PATTERN_SPEC")]
+#else
+	[CCode (free_function = "g_pattern_spec_free")]
+#endif
 	public class PatternSpec {
 		public PatternSpec (string pattern);
 		public bool equal (PatternSpec pspec);
+#if GLIB_2_70
+		[Version (since = "2.70")]
+		public bool match (size_t string_length, string str, string? str_reversed);
+		[Version (since = "2.70")]
+		public bool match_string (string str);
+#else
+		[Version (deprecated_since = "2.70")]
 		[CCode (cname = "g_pattern_match")]
 		public bool match (uint string_length, string str, string? str_reversed);
+		[Version (deprecated_since = "2.70")]
 		[CCode (cname = "g_pattern_match_string")]
 		public bool match_string (string str);
+#endif
 		[CCode (cname = "g_pattern_match_simple")]
 		public static bool match_simple (string pattern, string str);
 	}
@@ -6044,6 +6078,7 @@ namespace GLib {
 		public const uint @2_64;
 		public const uint @2_66;
 		public const uint @2_68;
+		public const uint @2_70;
 
 		[CCode (cname = "glib_binary_age")]
 		public const uint binary_age;
-- 
GitLab

