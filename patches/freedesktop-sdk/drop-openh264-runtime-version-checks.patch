From 9c074333f4871b022b581c893d7b3ade2d51e06d Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Thu, 8 Feb 2024 16:06:56 -0600
Subject: [PATCH] Drop OpenH264 runtime version checks

---
 elements/include/ffmpeg.yml                   |   2 +
 .../drop-openh264-runtime-version-check.patch | 109 +++++++++++++
 ...drop-openh264-runtime-version-checks.patch | 149 ++++++++++++++++++
 3 files changed, 260 insertions(+)
 create mode 100644 patches/ffmpeg/drop-openh264-runtime-version-check.patch
 create mode 100644 patches/gstreamer/drop-openh264-runtime-version-checks.patch

diff --git a/elements/include/ffmpeg.yml b/elements/include/ffmpeg.yml
index 8ad16edb0..ffc02b917 100644
--- a/elements/include/ffmpeg.yml
+++ b/elements/include/ffmpeg.yml
@@ -116,3 +116,5 @@ sources:
   exclude:
   - '*-dev'
   ref: n6.0.1-0-gc41ff724ede7da657762d61097e26fac296c53bf
+- kind: patch_queue
+  path: patches/ffmpeg
diff --git a/patches/ffmpeg/drop-openh264-runtime-version-check.patch b/patches/ffmpeg/drop-openh264-runtime-version-check.patch
new file mode 100644
index 000000000..7066f16ce
--- /dev/null
+++ b/patches/ffmpeg/drop-openh264-runtime-version-check.patch
@@ -0,0 +1,109 @@
+From a641e629591d68bd3edd99bddec623dc31295f6b Mon Sep 17 00:00:00 2001
+From: Kalev Lember <klember@redhat.com>
+Date: Wed, 6 Dec 2023 14:37:34 +0100
+Subject: [PATCH] lavc/libopenh264: Drop openh264 runtime version checks
+
+Years ago, openh264 releases often changed their ABI without changing
+the library soname. To avoid running into ABI issues, a version check
+was added to lavc libopenh264 code to error out at runtime in case the
+build time and runtime openh264 versions don't match.
+
+This should no longer be an issue with newer openh264 releases and we
+can drop the runtime version check and rely on upstream doing the right
+thing and bump the library soname if the ABI changes, similar to how
+other libraries are consumed in ffmpeg.
+
+Almost all major distributions now include openh264 and this means there
+are more eyes on ABI changes and issues are discovered and reported
+quickly. See e.g. https://github.com/cisco/openh264/issues/3564 where an
+ABI issue was quickly discovered and fixed.
+
+Relaxing the check allows downstream distributions to build ffmpeg
+against e.g. openh264 2.3.1 and ship an update to ABI-compatible
+openh264 2.4.0, without needing to coordinate a lock step update between
+ffmpeg and openh264 (which can be difficult if openh264 is distributed
+by Cisco and ffmpeg comes from the distro, such as is the case for
+Fedora).
+
+Signed-off-by: Kalev Lember <klember@redhat.com>
+---
+ libavcodec/libopenh264.c    | 15 ---------------
+ libavcodec/libopenh264.h    |  2 --
+ libavcodec/libopenh264dec.c |  4 ----
+ libavcodec/libopenh264enc.c |  4 ----
+ 4 files changed, 25 deletions(-)
+
+diff --git a/libavcodec/libopenh264.c b/libavcodec/libopenh264.c
+index 0f6d28ed88..c80c85ea8b 100644
+--- a/libavcodec/libopenh264.c
++++ b/libavcodec/libopenh264.c
+@@ -46,18 +46,3 @@ void ff_libopenh264_trace_callback(void *ctx, int level, const char *msg)
+     int equiv_ffmpeg_log_level = libopenh264_to_ffmpeg_log_level(level);
+     av_log(ctx, equiv_ffmpeg_log_level, "%s\n", msg);
+ }
+-
+-int ff_libopenh264_check_version(void *logctx)
+-{
+-    // Mingw GCC < 4.7 on x86_32 uses an incorrect/buggy ABI for the WelsGetCodecVersion
+-    // function (for functions returning larger structs), thus skip the check in those
+-    // configurations.
+-#if !defined(_WIN32) || !defined(__GNUC__) || !ARCH_X86_32 || AV_GCC_VERSION_AT_LEAST(4, 7)
+-    OpenH264Version libver = WelsGetCodecVersion();
+-    if (memcmp(&libver, &g_stCodecVersion, sizeof(libver))) {
+-        av_log(logctx, AV_LOG_ERROR, "Incorrect library version loaded\n");
+-        return AVERROR(EINVAL);
+-    }
+-#endif
+-    return 0;
+-}
+diff --git a/libavcodec/libopenh264.h b/libavcodec/libopenh264.h
+index dbb9c5d429..0b462d6fdc 100644
+--- a/libavcodec/libopenh264.h
++++ b/libavcodec/libopenh264.h
+@@ -34,6 +34,4 @@
+ 
+ void ff_libopenh264_trace_callback(void *ctx, int level, const char *msg);
+ 
+-int ff_libopenh264_check_version(void *logctx);
+-
+ #endif /* AVCODEC_LIBOPENH264_H */
+diff --git a/libavcodec/libopenh264dec.c b/libavcodec/libopenh264dec.c
+index 7d650ae03e..b6a9bba2dc 100644
+--- a/libavcodec/libopenh264dec.c
++++ b/libavcodec/libopenh264dec.c
+@@ -52,13 +52,9 @@ static av_cold int svc_decode_init(AVCodecContext *avctx)
+ {
+     SVCContext *s = avctx->priv_data;
+     SDecodingParam param = { 0 };
+-    int err;
+     int log_level;
+     WelsTraceCallback callback_function;
+ 
+-    if ((err = ff_libopenh264_check_version(avctx)) < 0)
+-        return AVERROR_DECODER_NOT_FOUND;
+-
+     if (WelsCreateDecoder(&s->decoder)) {
+         av_log(avctx, AV_LOG_ERROR, "Unable to create decoder\n");
+         return AVERROR_UNKNOWN;
+diff --git a/libavcodec/libopenh264enc.c b/libavcodec/libopenh264enc.c
+index f518d0894e..6f231d22b2 100644
+--- a/libavcodec/libopenh264enc.c
++++ b/libavcodec/libopenh264enc.c
+@@ -110,14 +110,10 @@ static av_cold int svc_encode_init(AVCodecContext *avctx)
+ {
+     SVCContext *s = avctx->priv_data;
+     SEncParamExt param = { 0 };
+-    int err;
+     int log_level;
+     WelsTraceCallback callback_function;
+     AVCPBProperties *props;
+ 
+-    if ((err = ff_libopenh264_check_version(avctx)) < 0)
+-        return AVERROR_ENCODER_NOT_FOUND;
+-
+     if (WelsCreateSVCEncoder(&s->encoder)) {
+         av_log(avctx, AV_LOG_ERROR, "Unable to create encoder\n");
+         return AVERROR_UNKNOWN;
+-- 
+2.43.0
+
diff --git a/patches/gstreamer/drop-openh264-runtime-version-checks.patch b/patches/gstreamer/drop-openh264-runtime-version-checks.patch
new file mode 100644
index 000000000..b77264d1e
--- /dev/null
+++ b/patches/gstreamer/drop-openh264-runtime-version-checks.patch
@@ -0,0 +1,149 @@
+From 1dadccd48c97a4b7c96ae0307c2263107e7f1876 Mon Sep 17 00:00:00 2001
+From: Kalev Lember <klember@redhat.com>
+Date: Wed, 6 Dec 2023 14:58:38 +0100
+Subject: [PATCH] openh264: Drop runtime version checks
+
+With the way the runtime checks are currently set up, every single
+openh264 release, no matter how minor, is considered an ABI break and
+requires gst-plugins-bad recompilation. This is unnecessarily strict
+because it doesn't allow downstream distributions to ship any openh264
+bug fix version updates without breaking gstreamer's openh264 support.
+
+Years ago, at the time when gstreamer's openh264 support was merged,
+openh264 releases were done without a versioned soname (the library was
+just libopenh264.so, unversioned). Since then, starting with version
+1.3.0, openh264 has started using versioned sonames and the intent has
+been to bump the soname every time there's a new release with an ABI
+change.
+
+This patch drops the strict version check. meson.build already has a
+minimum requirement on openh264 version 1.3.0 where soname versioning
+was added, which should be good enough to ensure that the library is
+using soname versioning.
+
+Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/5780>
+---
+ .../ext/openh264/gstopenh264dec.cpp           |  7 +--
+ .../ext/openh264/gstopenh264element.c         | 48 -------------------
+ .../ext/openh264/gstopenh264elements.h        |  2 -
+ .../ext/openh264/gstopenh264enc.cpp           |  7 +--
+ .../gst-plugins-bad/ext/openh264/meson.build  |  1 -
+ 5 files changed, 4 insertions(+), 61 deletions(-)
+ delete mode 100644 subprojects/gst-plugins-bad/ext/openh264/gstopenh264element.c
+
+diff --git a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264dec.cpp b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264dec.cpp
+index 77f2b8fe348..f3302567c7b 100644
+--- a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264dec.cpp
++++ b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264dec.cpp
+@@ -459,10 +459,7 @@ openh264dec_element_init (GstPlugin * plugin)
+ {
+   GST_DEBUG_CATEGORY_INIT (gst_openh264dec_debug_category, "openh264dec", 0,
+       "debug category for openh264dec element");
+-  if (openh264_element_init (plugin))
+-    return gst_element_register (plugin, "openh264dec", GST_RANK_MARGINAL,
+-        GST_TYPE_OPENH264DEC);
+ 
+-  GST_ERROR ("Incorrect library version loaded, expecting %s", g_strCodecVer);
+-  return FALSE;
++  return gst_element_register (plugin, "openh264dec", GST_RANK_MARGINAL,
++      GST_TYPE_OPENH264DEC);
+ }
+diff --git a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264element.c b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264element.c
+deleted file mode 100644
+index 3c5c378c81e..00000000000
+--- a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264element.c
++++ /dev/null
+@@ -1,48 +0,0 @@
+-/*
+- * Copyright (c) 2014, Ericsson AB. All rights reserved.
+- *
+- * Redistribution and use in source and binary forms, with or without modification,
+- * are permitted provided that the following conditions are met:
+- *
+- * 1. Redistributions of source code must retain the above copyright notice, this
+- * list of conditions and the following disclaimer.
+- *
+- * 2. Redistributions in binary form must reproduce the above copyright notice, this
+- * list of conditions and the following disclaimer in the documentation and/or other
+- * materials provided with the distribution.
+- *
+- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+- * OF SUCH DAMAGE.
+- */
+-
+-#ifdef HAVE_CONFIG_H
+-#include <config.h>
+-#endif
+-
+-#include <gst/gst.h>
+-#include <wels/codec_api.h>
+-#include <wels/codec_ver.h>
+-#include <string.h>
+-#include "gstopenh264elements.h"
+-
+-
+-gboolean
+-openh264_element_init (GstPlugin * plugin)
+-{
+-  OpenH264Version libver;
+-  /* g_stCodecVersion is the version detected at build time as defined in the
+-   * headers and WelsGetCodecVersion() is the version detected at runtime.
+-   * This is a safeguard to avoid crashes since OpenH264  has been changing
+-   * ABI without changing the SONAME.
+-   */
+-  libver = WelsGetCodecVersion ();
+-  return (memcmp (&libver, &g_stCodecVersion, sizeof (libver)) == 0);
+-}
+diff --git a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264elements.h b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264elements.h
+index 572f6a8e078..5c9582941ee 100644
+--- a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264elements.h
++++ b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264elements.h
+@@ -27,8 +27,6 @@
+ 
+ G_BEGIN_DECLS
+ 
+-gboolean openh264_element_init (GstPlugin * plugin);
+-
+ GST_ELEMENT_REGISTER_DECLARE (openh264dec);
+ GST_ELEMENT_REGISTER_DECLARE (openh264enc);
+ 
+diff --git a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264enc.cpp b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264enc.cpp
+index 6b54b1584f8..05c126cfc64 100644
+--- a/subprojects/gst-plugins-bad/ext/openh264/gstopenh264enc.cpp
++++ b/subprojects/gst-plugins-bad/ext/openh264/gstopenh264enc.cpp
+@@ -1066,10 +1066,7 @@ openh264enc_element_init (GstPlugin * plugin)
+ {
+   GST_DEBUG_CATEGORY_INIT (gst_openh264enc_debug_category, "openh264enc", 0,
+       "debug category for openh264enc element");
+-  if (openh264_element_init (plugin))
+-    return gst_element_register (plugin, "openh264enc", GST_RANK_MARGINAL,
+-        GST_TYPE_OPENH264ENC);
+ 
+-  GST_ERROR ("Incorrect library version loaded, expecting %s", g_strCodecVer);
+-  return FALSE;
++  return gst_element_register (plugin, "openh264enc", GST_RANK_MARGINAL,
++      GST_TYPE_OPENH264ENC);
+ }
+diff --git a/subprojects/gst-plugins-bad/ext/openh264/meson.build b/subprojects/gst-plugins-bad/ext/openh264/meson.build
+index 1f0a198b05e..c6f247e1cdd 100644
+--- a/subprojects/gst-plugins-bad/ext/openh264/meson.build
++++ b/subprojects/gst-plugins-bad/ext/openh264/meson.build
+@@ -1,7 +1,6 @@
+ openh264_sources = [
+   'gstopenh264dec.cpp',
+   'gstopenh264enc.cpp',
+-  'gstopenh264element.c',
+   'gstopenh264plugin.c',
+ ]
+ 
+-- 
+GitLab
+
-- 
2.43.0

