diff --git a/elements/include/linux.yml b/elements/include/linux.yml
index 36075e213..e008a9fb7 100644
--- a/elements/include/linux.yml
+++ b/elements/include/linux.yml
@@ -4,7 +4,7 @@ sources:
   track: v*
   exclude:
   - '*-rc*'
-  ref: v6.13.4-0-g24177f243e34eef50b5ff4a656a622864fa177c2
+  ref: v6.13.5-0-gc5e32b0a3c19f6cf40241e323e02dff00810406e
 - kind: local
   path: files/linux/config-utils.sh
 - kind: local
diff --git a/patches/linux/revert_back_to_readahead_folio.patch b/patches/linux/revert_back_to_readahead_folio.patch
new file mode 100644
index 000000000..374656659
--- /dev/null
+++ b/patches/linux/revert_back_to_readahead_folio.patch
@@ -0,0 +1,85 @@
+commit 0c67c37e1710b2a8f61c8a02db95a51fe577e2c1
+Author: Joanne Koong <joannelkoong@gmail.com>
+Date:   Tue Feb 11 13:47:50 2025 -0800
+
+    fuse: revert back to __readahead_folio() for readahead
+    
+    In commit 3eab9d7bc2f4 ("fuse: convert readahead to use folios"), the
+    logic was converted to using the new folio readahead code, which drops
+    the reference on the folio once it is locked, using an inferred
+    reference on the folio. Previously we held a reference on the folio for
+    the entire duration of the readpages call.
+    
+    This is fine, however for the case for splice pipe responses where we
+    will remove the old folio and splice in the new folio (see
+    fuse_try_move_page()), we assume that there is a reference held on the
+    folio for ap->folios, which is no longer the case.
+    
+    To fix this, revert back to __readahead_folio() which allows us to hold
+    the reference on the folio for the duration of readpages until either we
+    drop the reference ourselves in fuse_readpages_end() or the reference is
+    dropped after it's replaced in the page cache in the splice case.
+    This will fix the UAF bug that was reported.
+    
+    Link: https://lore.kernel.org/linux-fsdevel/2f681f48-00f5-4e09-8431-2b3dbfaa881e@heusel.eu/
+    Fixes: 3eab9d7bc2f4 ("fuse: convert readahead to use folios")
+    Reported-by: Christian Heusel <christian@heusel.eu>
+    Closes: https://lore.kernel.org/all/2f681f48-00f5-4e09-8431-2b3dbfaa881e@heusel.eu/
+    Closes: https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/issues/110
+    Reported-by: Mantas MikulÄ—nas <grawity@gmail.com>
+    Closes: https://lore.kernel.org/all/34feb867-09e2-46e4-aa31-d9660a806d1a@gmail.com/
+    Closes: https://bugzilla.opensuse.org/show_bug.cgi?id=1236660
+    Cc: <stable@vger.kernel.org> # v6.13
+    Signed-off-by: Joanne Koong <joannelkoong@gmail.com>
+    Reviewed-by: Jeff Layton <jlayton@kernel.org>
+    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
+
+diff --git a/fs/fuse/dev.c b/fs/fuse/dev.c
+index 5b5f789b37eb..2b2d1b755544 100644
+--- a/fs/fuse/dev.c
++++ b/fs/fuse/dev.c
+@@ -838,6 +838,12 @@ static int fuse_check_folio(struct folio *folio)
+ 	return 0;
+ }
+ 
++/*
++ * Attempt to steal a page from the splice() pipe and move it into the
++ * pagecache. If successful, the pointer in @pagep will be updated. The
++ * folio that was originally in @pagep will lose a reference and the new
++ * folio returned in @pagep will carry a reference.
++ */
+ static int fuse_try_move_page(struct fuse_copy_state *cs, struct page **pagep)
+ {
+ 	int err;
+diff --git a/fs/fuse/file.c b/fs/fuse/file.c
+index 7d92a5479998..d63e56fd3dd2 100644
+--- a/fs/fuse/file.c
++++ b/fs/fuse/file.c
+@@ -955,8 +955,10 @@ static void fuse_readpages_end(struct fuse_mount *fm, struct fuse_args *args,
+ 		fuse_invalidate_atime(inode);
+ 	}
+ 
+-	for (i = 0; i < ap->num_folios; i++)
++	for (i = 0; i < ap->num_folios; i++) {
+ 		folio_end_read(ap->folios[i], !err);
++		folio_put(ap->folios[i]);
++	}
+ 	if (ia->ff)
+ 		fuse_file_put(ia->ff, false);
+ 
+@@ -1048,7 +1050,14 @@ static void fuse_readahead(struct readahead_control *rac)
+ 		ap = &ia->ap;
+ 
+ 		while (ap->num_folios < cur_pages) {
+-			folio = readahead_folio(rac);
++			/*
++			 * This returns a folio with a ref held on it.
++			 * The ref needs to be held until the request is
++			 * completed, since the splice case (see
++			 * fuse_try_move_page()) drops the ref after it's
++			 * replaced in the page cache.
++			 */
++			folio = __readahead_folio(rac);
+ 			ap->folios[ap->num_folios] = folio;
+ 			ap->descs[ap->num_folios].length = folio_size(folio);
+ 			ap->num_folios++;
