From 61ea11f360c46592afab580c6c058e38a821347b Mon Sep 17 00:00:00 2001
From: Valentin David <me@valentindavid.com>
Date: Tue, 29 Jul 2025 12:28:49 +0200
Subject: [PATCH] linux: Backport patches for OnePlus 6's panel

Those patches come from either mainline or from the Linaro's branch for
sdm845 which should get mainlined soon.

These are required to have minimally functional OnePlus 6. For now, I
will not backport other fixes that does not make it impossible to
boot. And instead we can wait for mainlining.
---
 elements/include/linux.yml                    |   2 +
 files/linux/fdsdk-config.sh                   |   1 +
 ...samsung-sofef00-transition-to-mipi_d.patch | 135 ++++++++++++++++++
 ...el-sofef00-move-DSI-calls-to-disable.patch |  44 ++++++
 ...drm-panel-sofef00-prepare_prev_first.patch |  28 ++++
 ...-sofef00-initialise-at-50-brightness.patch |  30 ++++
 ...ef00-don-t-initialise-panel-in-reset.patch |  31 ++++
 ...rm-panel-sofef00-don-t-use-unprepare.patch |  60 ++++++++
 ...007-drm-panel-sofef00-fix-panel-name.patch |  28 ++++
 ...anel-sofef00-proper-power-sequencing.patch | 120 ++++++++++++++++
 10 files changed, 479 insertions(+)
 create mode 100644 patches/linux-oneplus6/0001-drm-panel-panel-samsung-sofef00-transition-to-mipi_d.patch
 create mode 100644 patches/linux-oneplus6/0002-drm-panel-sofef00-move-DSI-calls-to-disable.patch
 create mode 100644 patches/linux-oneplus6/0003-drm-panel-sofef00-prepare_prev_first.patch
 create mode 100644 patches/linux-oneplus6/0004-drm-panel-sofef00-initialise-at-50-brightness.patch
 create mode 100644 patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
 create mode 100644 patches/linux-oneplus6/0006-drm-panel-sofef00-don-t-use-unprepare.patch
 create mode 100644 patches/linux-oneplus6/0007-drm-panel-sofef00-fix-panel-name.patch
 create mode 100644 patches/linux-oneplus6/0008-drm-panel-sofef00-proper-power-sequencing.patch

diff --git a/elements/include/linux.yml b/elements/include/linux.yml
index fba47abba..92dd08d1b 100644
--- a/elements/include/linux.yml
+++ b/elements/include/linux.yml
@@ -7,3 +7,5 @@ sources:
   ref: v6.16-0-g038d61fd642278bab63ee8ef722c50d10ab01e8f
 - kind: patch_queue
   path: patches/linux
+- kind: patch_queue
+  path: patches/linux-oneplus6
diff --git a/files/linux/fdsdk-config.sh b/files/linux/fdsdk-config.sh
index 4fe71f012..b30d8717b 100644
--- a/files/linux/fdsdk-config.sh
+++ b/files/linux/fdsdk-config.sh
@@ -679,6 +679,7 @@ case "$arch" in
     aarch64)
         module DRM_PANFROST
         module DRM_MSM
+        module DRM_PANEL_SAMSUNG_SOFEF00
     ;;
 esac
 
diff --git a/patches/linux-oneplus6/0001-drm-panel-panel-samsung-sofef00-transition-to-mipi_d.patch b/patches/linux-oneplus6/0001-drm-panel-panel-samsung-sofef00-transition-to-mipi_d.patch
new file mode 100644
index 000000000..113f56c20
--- /dev/null
+++ b/patches/linux-oneplus6/0001-drm-panel-panel-samsung-sofef00-transition-to-mipi_d.patch
@@ -0,0 +1,135 @@
+From 48e1cd571b1c290e1a74321f18bd9a460e109b4d Mon Sep 17 00:00:00 2001
+From: Tejas Vipin <tejasvipin76@gmail.com>
+Date: Sat, 19 Apr 2025 09:42:09 +0530
+Subject: [PATCH 1/9] drm/panel: panel-samsung-sofef00: transition to mipi_dsi
+ wrapped functions
+
+Changes the samsung-sofef00 panel to use multi style functions for
+improved error handling.
+
+Signed-off-by: Tejas Vipin <tejasvipin76@gmail.com>
+Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@oss.qualcomm.com>
+Link: https://lore.kernel.org/r/20250419041210.515517-2-tejasvipin76@gmail.com
+Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
+Link: https://lore.kernel.org/r/20250419041210.515517-2-tejasvipin76@gmail.com
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 70 ++++++-------------
+ 1 file changed, 21 insertions(+), 49 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 49cfa84b34f0..210a25afe82b 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -43,66 +43,44 @@ static void sofef00_panel_reset(struct sofef00_panel *ctx)
+ static int sofef00_panel_on(struct sofef00_panel *ctx)
+ {
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+-	struct device *dev = &dsi->dev;
+-	int ret;
++	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+ 	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+ 
+-	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+-	if (ret < 0) {
+-		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+-		return ret;
+-	}
+-	usleep_range(10000, 11000);
++	mipi_dsi_dcs_exit_sleep_mode_multi(&dsi_ctx);
++	mipi_dsi_usleep_range(&dsi_ctx, 10000, 11000);
+ 
+-	mipi_dsi_dcs_write_seq(dsi, 0xf0, 0x5a, 0x5a);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xf0, 0x5a, 0x5a);
+ 
+-	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+-	if (ret < 0) {
+-		dev_err(dev, "Failed to set tear on: %d\n", ret);
+-		return ret;
+-	}
++	mipi_dsi_dcs_set_tear_on_multi(&dsi_ctx, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+ 
+-	mipi_dsi_dcs_write_seq(dsi, 0xf0, 0xa5, 0xa5);
+-	mipi_dsi_dcs_write_seq(dsi, 0xf0, 0x5a, 0x5a);
+-	mipi_dsi_dcs_write_seq(dsi, 0xb0, 0x07);
+-	mipi_dsi_dcs_write_seq(dsi, 0xb6, 0x12);
+-	mipi_dsi_dcs_write_seq(dsi, 0xf0, 0xa5, 0xa5);
+-	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x20);
+-	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x00);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xf0, 0xa5, 0xa5);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xf0, 0x5a, 0x5a);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xb0, 0x07);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xb6, 0x12);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xf0, 0xa5, 0xa5);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x20);
++	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, MIPI_DCS_WRITE_POWER_SAVE, 0x00);
+ 
+-	ret = mipi_dsi_dcs_set_display_on(dsi);
+-	if (ret < 0) {
+-		dev_err(dev, "Failed to set display on: %d\n", ret);
+-		return ret;
+-	}
++	mipi_dsi_dcs_set_display_on_multi(&dsi_ctx);
+ 
+-	return 0;
++	return dsi_ctx.accum_err;
+ }
+ 
+ static int sofef00_panel_off(struct sofef00_panel *ctx)
+ {
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+-	struct device *dev = &dsi->dev;
+-	int ret;
++	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+ 	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+ 
+-	ret = mipi_dsi_dcs_set_display_off(dsi);
+-	if (ret < 0) {
+-		dev_err(dev, "Failed to set display off: %d\n", ret);
+-		return ret;
+-	}
+-	msleep(40);
++	mipi_dsi_dcs_set_display_off_multi(&dsi_ctx);
++	mipi_dsi_msleep(&dsi_ctx, 40);
+ 
+-	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+-	if (ret < 0) {
+-		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+-		return ret;
+-	}
+-	msleep(160);
++	mipi_dsi_dcs_enter_sleep_mode_multi(&dsi_ctx);
++	mipi_dsi_msleep(&dsi_ctx, 160);
+ 
+-	return 0;
++	return dsi_ctx.accum_err;
+ }
+ 
+ static int sofef00_panel_prepare(struct drm_panel *panel)
+@@ -121,7 +99,6 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 
+ 	ret = sofef00_panel_on(ctx);
+ 	if (ret < 0) {
+-		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+ 		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+ 		return ret;
+ 	}
+@@ -132,13 +109,8 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ static int sofef00_panel_unprepare(struct drm_panel *panel)
+ {
+ 	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+-	struct device *dev = &ctx->dsi->dev;
+-	int ret;
+-
+-	ret = sofef00_panel_off(ctx);
+-	if (ret < 0)
+-		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+ 
++	sofef00_panel_off(ctx);
+ 	regulator_disable(ctx->supply);
+ 
+ 	return 0;
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0002-drm-panel-sofef00-move-DSI-calls-to-disable.patch b/patches/linux-oneplus6/0002-drm-panel-sofef00-move-DSI-calls-to-disable.patch
new file mode 100644
index 000000000..dd26fcc76
--- /dev/null
+++ b/patches/linux-oneplus6/0002-drm-panel-sofef00-move-DSI-calls-to-disable.patch
@@ -0,0 +1,44 @@
+From 6048ffe6e0f1f2eae79ce1ba2e21fc86ae6bd32a Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Sat, 10 Dec 2022 02:50:18 +0000
+Subject: [PATCH 2/9] drm/panel: sofef00: move DSI calls to disable
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 5 +++--
+ 1 file changed, 3 insertions(+), 2 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 210a25afe82b..9853b8a7709d 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -67,8 +67,9 @@ static int sofef00_panel_on(struct sofef00_panel *ctx)
+ 	return dsi_ctx.accum_err;
+ }
+ 
+-static int sofef00_panel_off(struct sofef00_panel *ctx)
++static int sofef00_panel_disable(struct drm_panel *panel)
+ {
++	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+ 	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+@@ -110,7 +111,6 @@ static int sofef00_panel_unprepare(struct drm_panel *panel)
+ {
+ 	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 
+-	sofef00_panel_off(ctx);
+ 	regulator_disable(ctx->supply);
+ 
+ 	return 0;
+@@ -150,6 +150,7 @@ static int sofef00_panel_get_modes(struct drm_panel *panel, struct drm_connector
+ 
+ static const struct drm_panel_funcs sofef00_panel_panel_funcs = {
+ 	.prepare = sofef00_panel_prepare,
++	.disable = sofef00_panel_disable,
+ 	.unprepare = sofef00_panel_unprepare,
+ 	.get_modes = sofef00_panel_get_modes,
+ };
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0003-drm-panel-sofef00-prepare_prev_first.patch b/patches/linux-oneplus6/0003-drm-panel-sofef00-prepare_prev_first.patch
new file mode 100644
index 000000000..43529dbda
--- /dev/null
+++ b/patches/linux-oneplus6/0003-drm-panel-sofef00-prepare_prev_first.patch
@@ -0,0 +1,28 @@
+From 16892e441dc9a616cf2afe2f3abbf2128e95ca5d Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 16:11:31 +0100
+Subject: [PATCH 3/9] drm/panel: sofef00: prepare_prev_first
+
+This corrects the host initialisation sequence so that we can send
+DSI/DCS commands in prepare().
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 9853b8a7709d..1ae91504aeb9 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -214,6 +214,7 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 
+ 	drm_panel_init(&ctx->panel, dev, &sofef00_panel_panel_funcs,
+ 		       DRM_MODE_CONNECTOR_DSI);
++	ctx->panel.prepare_prev_first = true;
+ 
+ 	ctx->panel.backlight = sofef00_create_backlight(dsi);
+ 	if (IS_ERR(ctx->panel.backlight))
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0004-drm-panel-sofef00-initialise-at-50-brightness.patch b/patches/linux-oneplus6/0004-drm-panel-sofef00-initialise-at-50-brightness.patch
new file mode 100644
index 000000000..c45f60fdd
--- /dev/null
+++ b/patches/linux-oneplus6/0004-drm-panel-sofef00-initialise-at-50-brightness.patch
@@ -0,0 +1,30 @@
+From ef70d0d74a9a4aebc76e44d9f99a4ae7e05b16c4 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 14:20:35 +0100
+Subject: [PATCH 4/9] drm/panel: sofef00: initialise at 50% brightness
+
+Initialising at max brightness is no fun during those late night hacking
+sessions. Half brightness is much more comfortable in most settings so
+go with that instead.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 1ae91504aeb9..665388382cae 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -178,7 +178,7 @@ sofef00_create_backlight(struct mipi_dsi_device *dsi)
+ 	struct device *dev = &dsi->dev;
+ 	const struct backlight_properties props = {
+ 		.type = BACKLIGHT_PLATFORM,
+-		.brightness = 1023,
++		.brightness = 512,
+ 		.max_brightness = 1023,
+ 	};
+ 
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch b/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
new file mode 100644
index 000000000..35c932dbc
--- /dev/null
+++ b/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
@@ -0,0 +1,31 @@
+From 4d3689a1b04f493b03c23b8069461c24bf4312f6 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 14:23:39 +0100
+Subject: [PATCH 5/9] drm/panel: sofef00: don't initialise panel in reset
+
+During probe when we claim the panel reset GPIO, we currently fetch it
+with GPIOD_OUT_HIGH, this puts the panel into reset which blanks it.
+Instead let's set it OUT_LOW so that the bootloader splash image stays
+on the screen.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 665388382cae..6eeb1c9ab33b 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -201,7 +201,7 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 		return dev_err_probe(dev, PTR_ERR(ctx->supply),
+ 				     "Failed to get vddio regulator\n");
+ 
+-	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
++	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+ 	if (IS_ERR(ctx->reset_gpio))
+ 		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+ 				     "Failed to get reset-gpios\n");
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0006-drm-panel-sofef00-don-t-use-unprepare.patch b/patches/linux-oneplus6/0006-drm-panel-sofef00-don-t-use-unprepare.patch
new file mode 100644
index 000000000..a5e36955e
--- /dev/null
+++ b/patches/linux-oneplus6/0006-drm-panel-sofef00-don-t-use-unprepare.patch
@@ -0,0 +1,60 @@
+From e5d4a6ffc850fcab829fc06055d62e28a8b2272a Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:26:42 +0100
+Subject: [PATCH 6/9] drm/panel: sofef00: don't use unprepare
+
+We can't send DSI commands in unprepare, move panel power off handling
+to disable instead.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 15 +++++++++++----
+ 1 file changed, 11 insertions(+), 4 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 6eeb1c9ab33b..0e84ffb1acf8 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -67,9 +67,8 @@ static int sofef00_panel_on(struct sofef00_panel *ctx)
+ 	return dsi_ctx.accum_err;
+ }
+ 
+-static int sofef00_panel_disable(struct drm_panel *panel)
++static int sofef00_panel_off(struct sofef00_panel *ctx)
+ {
+-	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+ 	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+@@ -107,10 +106,19 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	return 0;
+ }
+ 
+-static int sofef00_panel_unprepare(struct drm_panel *panel)
++static int sofef00_panel_disable(struct drm_panel *panel)
+ {
+ 	struct sofef00_panel *ctx = to_sofef00_panel(panel);
++	struct device *dev = &ctx->dsi->dev;
++	int ret;
+ 
++	dev_dbg(dev, "%s\n", __func__);
++
++	ret = sofef00_panel_off(ctx);
++	if (ret < 0)
++		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
++
++	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+ 	regulator_disable(ctx->supply);
+ 
+ 	return 0;
+@@ -151,7 +159,6 @@ static int sofef00_panel_get_modes(struct drm_panel *panel, struct drm_connector
+ static const struct drm_panel_funcs sofef00_panel_panel_funcs = {
+ 	.prepare = sofef00_panel_prepare,
+ 	.disable = sofef00_panel_disable,
+-	.unprepare = sofef00_panel_unprepare,
+ 	.get_modes = sofef00_panel_get_modes,
+ };
+ 
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0007-drm-panel-sofef00-fix-panel-name.patch b/patches/linux-oneplus6/0007-drm-panel-sofef00-fix-panel-name.patch
new file mode 100644
index 000000000..c4d4fd27f
--- /dev/null
+++ b/patches/linux-oneplus6/0007-drm-panel-sofef00-fix-panel-name.patch
@@ -0,0 +1,28 @@
+From c81b388faf20d11ffbd2b9cb279a645aa3d12fea Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:29:11 +0100
+Subject: [PATCH 7/9] drm/panel: sofef00: fix panel name
+
+This isn't the OnePlus 6 panel driver... it's the sofef00 panel driver.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 0e84ffb1acf8..ac116434f2b3 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -262,7 +262,7 @@ static struct mipi_dsi_driver sofef00_panel_driver = {
+ 	.probe = sofef00_panel_probe,
+ 	.remove = sofef00_panel_remove,
+ 	.driver = {
+-		.name = "panel-oneplus6",
++		.name = "panel-samsung-sofef00",
+ 		.of_match_table = sofef00_panel_of_match,
+ 	},
+ };
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0008-drm-panel-sofef00-proper-power-sequencing.patch b/patches/linux-oneplus6/0008-drm-panel-sofef00-proper-power-sequencing.patch
new file mode 100644
index 000000000..1aa986122
--- /dev/null
+++ b/patches/linux-oneplus6/0008-drm-panel-sofef00-proper-power-sequencing.patch
@@ -0,0 +1,120 @@
+From 4b41a23246b982db694fe2a9e5abe353df21d034 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:31:06 +0100
+Subject: [PATCH 8/9] drm/panel: sofef00: proper power sequencing
+
+There are two additional regulators on this panel, vci and poc. Use the
+regulator bulk API to fetch and enable all regulators at once.
+
+In addition, let's also fix how we model the power sequencing of this
+panel. On the devices it's used on, the panel is powered up and
+configuring by the bootloader during boot to display a splash image.
+This makes the first .prepare() call totally redundant, as all the
+supplies are on and the panel has been programmed correctly.
+
+The hygenic thing to do would be to fully power sequence the panel to be
+super sure that it's initialised the way we expect. However, the only
+user of this panel (the OnePlus 6) isn't likely to get any breaking
+changes to the bootloader. So let's just skip the first prepare() if the
+regulators are already enabled.
+
+This gives us a fairly smooth transition, with only very minor visual
+artifacting (a while horizontal line) when the DSI engine starts up.
+
+For future reference, if we replace the "return 0" with a call to
+sofef00_panel_off() followed by regulator_bulk_disable() and a sleep, we
+can then continue the prepare as normal and the panel behaves just the
+same.
+
+Once the panel is powered off for the first time, we will then do a full
+power up during prepare.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 40 ++++++++++++++++---
+ 1 file changed, 34 insertions(+), 6 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index ac116434f2b3..199847ed508d 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -20,7 +20,8 @@
+ struct sofef00_panel {
+ 	struct drm_panel panel;
+ 	struct mipi_dsi_device *dsi;
+-	struct regulator *supply;
++	bool first_prepare;
++	struct regulator_bulk_data supplies[3];
+ 	struct gpio_desc *reset_gpio;
+ };
+ 
+@@ -89,7 +90,20 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	struct device *dev = &ctx->dsi->dev;
+ 	int ret;
+ 
+-	ret = regulator_enable(ctx->supply);
++	dev_dbg(dev, "%s\n", __func__);
++
++	/*
++	 * On boot the panel has already been initialised, if the regulators are
++	 * already enabled then we can safely assume that the panel is on and we
++	 * can skip the prepare.
++	 */
++	if (regulator_is_enabled(ctx->supplies[0].consumer) && ctx->first_prepare) {
++		ctx->first_prepare = false;
++		dev_dbg(dev, "First prepare!\n");
++		return 0;
++	}
++
++	ret = regulator_bulk_enable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 	if (ret < 0) {
+ 		dev_err(dev, "Failed to enable regulator: %d\n", ret);
+ 		return ret;
+@@ -100,6 +114,7 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	ret = sofef00_panel_on(ctx);
+ 	if (ret < 0) {
+ 		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
++		regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 		return ret;
+ 	}
+ 
+@@ -119,7 +134,7 @@ static int sofef00_panel_disable(struct drm_panel *panel)
+ 		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+ 
+ 	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+-	regulator_disable(ctx->supply);
++	regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 
+ 	return 0;
+ }
+@@ -203,11 +218,24 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 	if (!ctx)
+ 		return -ENOMEM;
+ 
+-	ctx->supply = devm_regulator_get(dev, "vddio");
+-	if (IS_ERR(ctx->supply))
+-		return dev_err_probe(dev, PTR_ERR(ctx->supply),
++	ctx->supplies[0].supply = "vddio";
++	ctx->supplies[1].supply = "vci";
++	ctx->supplies[2].supply = "poc";
++
++	ret = devm_regulator_bulk_get(dev, ARRAY_SIZE(ctx->supplies), ctx->supplies);
++	if (ret)
++		return dev_err_probe(dev, ret,
+ 				     "Failed to get vddio regulator\n");
+ 
++	/* Regulators are all boot-on, enable them to balance the refcounts so we can disable
++	 * them later in the first prepare() call */
++	ret = regulator_bulk_enable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
++	if (ret < 0)
++		return dev_err_probe(dev, ret,
++				     "Failed to enable regulators\n");
++
++	ctx->first_prepare = true;
++
+ 	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+ 	if (IS_ERR(ctx->reset_gpio))
+ 		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+-- 
+2.49.0
+
-- 
2.49.0

