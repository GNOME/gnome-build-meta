From de4793fc4063a26914c5be790829179122339cce Mon Sep 17 00:00:00 2001
From: Valentin David <me@valentindavid.com>
Date: Sun, 24 Aug 2025 23:39:36 +0100
Subject: [PATCH 3/6] linux: Backport patches for OnePlus 6's panel

Those patches come from either mainline or from the Linaro's branch for
sdm845 which should get mainlined soon.

These are required to have minimally functional OnePlus 6. For now, I
will not backport other fixes that does not make it impossible to
boot. And instead we can wait for mainlining.
---
 elements/include/linux.yml                    |   2 +
 files/linux/fdsdk-config.sh                   |   1 +
 ...el-sofef00-move-DSI-calls-to-disable.patch |  44 +++++++
 ...drm-panel-sofef00-prepare_prev_first.patch |  28 ++++
 ...-sofef00-initialise-at-50-brightness.patch |  30 +++++
 ...ef00-don-t-initialise-panel-in-reset.patch |  31 +++++
 ...rm-panel-sofef00-don-t-use-unprepare.patch |  60 +++++++++
 ...006-drm-panel-sofef00-fix-panel-name.patch |  28 ++++
 ...anel-sofef00-proper-power-sequencing.patch | 120 ++++++++++++++++++
 9 files changed, 344 insertions(+)
 create mode 100644 patches/linux-oneplus6/0001-drm-panel-sofef00-move-DSI-calls-to-disable.patch
 create mode 100644 patches/linux-oneplus6/0002-drm-panel-sofef00-prepare_prev_first.patch
 create mode 100644 patches/linux-oneplus6/0003-drm-panel-sofef00-initialise-at-50-brightness.patch
 create mode 100644 patches/linux-oneplus6/0004-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
 create mode 100644 patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-use-unprepare.patch
 create mode 100644 patches/linux-oneplus6/0006-drm-panel-sofef00-fix-panel-name.patch
 create mode 100644 patches/linux-oneplus6/0007-drm-panel-sofef00-proper-power-sequencing.patch

diff --git a/elements/include/linux.yml b/elements/include/linux.yml
index a90a2ab93..764894b42 100644
--- a/elements/include/linux.yml
+++ b/elements/include/linux.yml
@@ -7,3 +7,5 @@ sources:
   ref: v6.17.6-0-g371f1e070fa95c71356104a406855a361aad5668
 - kind: patch_queue
   path: patches/linux
+- kind: patch_queue
+  path: patches/linux-oneplus6
diff --git a/files/linux/fdsdk-config.sh b/files/linux/fdsdk-config.sh
index 0ce0061c4..7b603e488 100644
--- a/files/linux/fdsdk-config.sh
+++ b/files/linux/fdsdk-config.sh
@@ -676,6 +676,7 @@ case "$arch" in
     aarch64)
         module DRM_PANFROST
         module DRM_MSM
+        module DRM_PANEL_SAMSUNG_SOFEF00
     ;;
 esac
 
diff --git a/patches/linux-oneplus6/0001-drm-panel-sofef00-move-DSI-calls-to-disable.patch b/patches/linux-oneplus6/0001-drm-panel-sofef00-move-DSI-calls-to-disable.patch
new file mode 100644
index 000000000..4c9998d9c
--- /dev/null
+++ b/patches/linux-oneplus6/0001-drm-panel-sofef00-move-DSI-calls-to-disable.patch
@@ -0,0 +1,44 @@
+From 2360b48875a8f2814699698a694804144b4bb27e Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Sat, 10 Dec 2022 02:50:18 +0000
+Subject: [PATCH 1/7] drm/panel: sofef00: move DSI calls to disable
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 5 +++--
+ 1 file changed, 3 insertions(+), 2 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index d92ae6b6100f..cf7d0d27ab0f 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -67,8 +67,9 @@ static int sofef00_panel_on(struct sofef00_panel *ctx)
+ 	return dsi_ctx.accum_err;
+ }
+ 
+-static int sofef00_panel_off(struct sofef00_panel *ctx)
++static int sofef00_panel_disable(struct drm_panel *panel)
+ {
++	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+ 	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+@@ -110,7 +111,6 @@ static int sofef00_panel_unprepare(struct drm_panel *panel)
+ {
+ 	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 
+-	sofef00_panel_off(ctx);
+ 	regulator_disable(ctx->supply);
+ 
+ 	return 0;
+@@ -150,6 +150,7 @@ static int sofef00_panel_get_modes(struct drm_panel *panel, struct drm_connector
+ 
+ static const struct drm_panel_funcs sofef00_panel_panel_funcs = {
+ 	.prepare = sofef00_panel_prepare,
++	.disable = sofef00_panel_disable,
+ 	.unprepare = sofef00_panel_unprepare,
+ 	.get_modes = sofef00_panel_get_modes,
+ };
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0002-drm-panel-sofef00-prepare_prev_first.patch b/patches/linux-oneplus6/0002-drm-panel-sofef00-prepare_prev_first.patch
new file mode 100644
index 000000000..0c1459650
--- /dev/null
+++ b/patches/linux-oneplus6/0002-drm-panel-sofef00-prepare_prev_first.patch
@@ -0,0 +1,28 @@
+From 962884eba95fb7ad56521ae5da26e3b738c2f590 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 16:11:31 +0100
+Subject: [PATCH 2/7] drm/panel: sofef00: prepare_prev_first
+
+This corrects the host initialisation sequence so that we can send
+DSI/DCS commands in prepare().
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index cf7d0d27ab0f..1a4f0475a04a 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -214,6 +214,7 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 
+ 	drm_panel_init(&ctx->panel, dev, &sofef00_panel_panel_funcs,
+ 		       DRM_MODE_CONNECTOR_DSI);
++	ctx->panel.prepare_prev_first = true;
+ 
+ 	ctx->panel.backlight = sofef00_create_backlight(dsi);
+ 	if (IS_ERR(ctx->panel.backlight))
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0003-drm-panel-sofef00-initialise-at-50-brightness.patch b/patches/linux-oneplus6/0003-drm-panel-sofef00-initialise-at-50-brightness.patch
new file mode 100644
index 000000000..c4faf7c58
--- /dev/null
+++ b/patches/linux-oneplus6/0003-drm-panel-sofef00-initialise-at-50-brightness.patch
@@ -0,0 +1,30 @@
+From 45fd8dae418bae6a9ab68b402767032bbc7c6898 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 14:20:35 +0100
+Subject: [PATCH 3/7] drm/panel: sofef00: initialise at 50% brightness
+
+Initialising at max brightness is no fun during those late night hacking
+sessions. Half brightness is much more comfortable in most settings so
+go with that instead.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index 1a4f0475a04a..c5d6d4d1b095 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -178,7 +178,7 @@ sofef00_create_backlight(struct mipi_dsi_device *dsi)
+ 	struct device *dev = &dsi->dev;
+ 	const struct backlight_properties props = {
+ 		.type = BACKLIGHT_PLATFORM,
+-		.brightness = 1023,
++		.brightness = 512,
+ 		.max_brightness = 1023,
+ 	};
+ 
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0004-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch b/patches/linux-oneplus6/0004-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
new file mode 100644
index 000000000..39390c5b3
--- /dev/null
+++ b/patches/linux-oneplus6/0004-drm-panel-sofef00-don-t-initialise-panel-in-reset.patch
@@ -0,0 +1,31 @@
+From 6eedaaedd218bafe091214598696b143b4e9954e Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 14:23:39 +0100
+Subject: [PATCH 4/7] drm/panel: sofef00: don't initialise panel in reset
+
+During probe when we claim the panel reset GPIO, we currently fetch it
+with GPIOD_OUT_HIGH, this puts the panel into reset which blanks it.
+Instead let's set it OUT_LOW so that the bootloader splash image stays
+on the screen.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index c5d6d4d1b095..cb5a882e6d45 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -201,7 +201,7 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 		return dev_err_probe(dev, PTR_ERR(ctx->supply),
+ 				     "Failed to get vddio regulator\n");
+ 
+-	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
++	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+ 	if (IS_ERR(ctx->reset_gpio))
+ 		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+ 				     "Failed to get reset-gpios\n");
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-use-unprepare.patch b/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-use-unprepare.patch
new file mode 100644
index 000000000..1c17d4b2b
--- /dev/null
+++ b/patches/linux-oneplus6/0005-drm-panel-sofef00-don-t-use-unprepare.patch
@@ -0,0 +1,60 @@
+From cc6b4fe58e135f014270d6e8b5f1468cd2d1dc44 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:26:42 +0100
+Subject: [PATCH 5/7] drm/panel: sofef00: don't use unprepare
+
+We can't send DSI commands in unprepare, move panel power off handling
+to disable instead.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 15 +++++++++++----
+ 1 file changed, 11 insertions(+), 4 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index cb5a882e6d45..d3a746c8a6d7 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -67,9 +67,8 @@ static int sofef00_panel_on(struct sofef00_panel *ctx)
+ 	return dsi_ctx.accum_err;
+ }
+ 
+-static int sofef00_panel_disable(struct drm_panel *panel)
++static int sofef00_panel_off(struct sofef00_panel *ctx)
+ {
+-	struct sofef00_panel *ctx = to_sofef00_panel(panel);
+ 	struct mipi_dsi_device *dsi = ctx->dsi;
+ 	struct mipi_dsi_multi_context dsi_ctx = { .dsi = dsi };
+ 
+@@ -107,10 +106,19 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	return 0;
+ }
+ 
+-static int sofef00_panel_unprepare(struct drm_panel *panel)
++static int sofef00_panel_disable(struct drm_panel *panel)
+ {
+ 	struct sofef00_panel *ctx = to_sofef00_panel(panel);
++	struct device *dev = &ctx->dsi->dev;
++	int ret;
+ 
++	dev_dbg(dev, "%s\n", __func__);
++
++	ret = sofef00_panel_off(ctx);
++	if (ret < 0)
++		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
++
++	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+ 	regulator_disable(ctx->supply);
+ 
+ 	return 0;
+@@ -151,7 +159,6 @@ static int sofef00_panel_get_modes(struct drm_panel *panel, struct drm_connector
+ static const struct drm_panel_funcs sofef00_panel_panel_funcs = {
+ 	.prepare = sofef00_panel_prepare,
+ 	.disable = sofef00_panel_disable,
+-	.unprepare = sofef00_panel_unprepare,
+ 	.get_modes = sofef00_panel_get_modes,
+ };
+ 
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0006-drm-panel-sofef00-fix-panel-name.patch b/patches/linux-oneplus6/0006-drm-panel-sofef00-fix-panel-name.patch
new file mode 100644
index 000000000..2a82e8190
--- /dev/null
+++ b/patches/linux-oneplus6/0006-drm-panel-sofef00-fix-panel-name.patch
@@ -0,0 +1,28 @@
+From 3458d3afad762e530d4f675b79937978d918112f Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:29:11 +0100
+Subject: [PATCH 6/7] drm/panel: sofef00: fix panel name
+
+This isn't the OnePlus 6 panel driver... it's the sofef00 panel driver.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index d3a746c8a6d7..d781b8586d60 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -262,7 +262,7 @@ static struct mipi_dsi_driver sofef00_panel_driver = {
+ 	.probe = sofef00_panel_probe,
+ 	.remove = sofef00_panel_remove,
+ 	.driver = {
+-		.name = "panel-oneplus6",
++		.name = "panel-samsung-sofef00",
+ 		.of_match_table = sofef00_panel_of_match,
+ 	},
+ };
+-- 
+2.49.0
+
diff --git a/patches/linux-oneplus6/0007-drm-panel-sofef00-proper-power-sequencing.patch b/patches/linux-oneplus6/0007-drm-panel-sofef00-proper-power-sequencing.patch
new file mode 100644
index 000000000..22f21e935
--- /dev/null
+++ b/patches/linux-oneplus6/0007-drm-panel-sofef00-proper-power-sequencing.patch
@@ -0,0 +1,120 @@
+From de89e2d4104c17d707ab6e79fa37f9a2f6a12657 Mon Sep 17 00:00:00 2001
+From: Caleb Connolly <caleb.connolly@linaro.org>
+Date: Wed, 17 Apr 2024 15:31:06 +0100
+Subject: [PATCH 7/7] drm/panel: sofef00: proper power sequencing
+
+There are two additional regulators on this panel, vci and poc. Use the
+regulator bulk API to fetch and enable all regulators at once.
+
+In addition, let's also fix how we model the power sequencing of this
+panel. On the devices it's used on, the panel is powered up and
+configuring by the bootloader during boot to display a splash image.
+This makes the first .prepare() call totally redundant, as all the
+supplies are on and the panel has been programmed correctly.
+
+The hygenic thing to do would be to fully power sequence the panel to be
+super sure that it's initialised the way we expect. However, the only
+user of this panel (the OnePlus 6) isn't likely to get any breaking
+changes to the bootloader. So let's just skip the first prepare() if the
+regulators are already enabled.
+
+This gives us a fairly smooth transition, with only very minor visual
+artifacting (a while horizontal line) when the DSI engine starts up.
+
+For future reference, if we replace the "return 0" with a call to
+sofef00_panel_off() followed by regulator_bulk_disable() and a sleep, we
+can then continue the prepare as normal and the panel behaves just the
+same.
+
+Once the panel is powered off for the first time, we will then do a full
+power up during prepare.
+
+Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
+---
+ drivers/gpu/drm/panel/panel-samsung-sofef00.c | 40 ++++++++++++++++---
+ 1 file changed, 34 insertions(+), 6 deletions(-)
+
+diff --git a/drivers/gpu/drm/panel/panel-samsung-sofef00.c b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+index d781b8586d60..08c6da224055 100644
+--- a/drivers/gpu/drm/panel/panel-samsung-sofef00.c
++++ b/drivers/gpu/drm/panel/panel-samsung-sofef00.c
+@@ -20,7 +20,8 @@
+ struct sofef00_panel {
+ 	struct drm_panel panel;
+ 	struct mipi_dsi_device *dsi;
+-	struct regulator *supply;
++	bool first_prepare;
++	struct regulator_bulk_data supplies[3];
+ 	struct gpio_desc *reset_gpio;
+ };
+ 
+@@ -89,7 +90,20 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	struct device *dev = &ctx->dsi->dev;
+ 	int ret;
+ 
+-	ret = regulator_enable(ctx->supply);
++	dev_dbg(dev, "%s\n", __func__);
++
++	/*
++	 * On boot the panel has already been initialised, if the regulators are
++	 * already enabled then we can safely assume that the panel is on and we
++	 * can skip the prepare.
++	 */
++	if (regulator_is_enabled(ctx->supplies[0].consumer) && ctx->first_prepare) {
++		ctx->first_prepare = false;
++		dev_dbg(dev, "First prepare!\n");
++		return 0;
++	}
++
++	ret = regulator_bulk_enable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 	if (ret < 0) {
+ 		dev_err(dev, "Failed to enable regulator: %d\n", ret);
+ 		return ret;
+@@ -100,6 +114,7 @@ static int sofef00_panel_prepare(struct drm_panel *panel)
+ 	ret = sofef00_panel_on(ctx);
+ 	if (ret < 0) {
+ 		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
++		regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 		return ret;
+ 	}
+ 
+@@ -119,7 +134,7 @@ static int sofef00_panel_disable(struct drm_panel *panel)
+ 		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+ 
+ 	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+-	regulator_disable(ctx->supply);
++	regulator_bulk_disable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
+ 
+ 	return 0;
+ }
+@@ -203,11 +218,24 @@ static int sofef00_panel_probe(struct mipi_dsi_device *dsi)
+ 	if (!ctx)
+ 		return -ENOMEM;
+ 
+-	ctx->supply = devm_regulator_get(dev, "vddio");
+-	if (IS_ERR(ctx->supply))
+-		return dev_err_probe(dev, PTR_ERR(ctx->supply),
++	ctx->supplies[0].supply = "vddio";
++	ctx->supplies[1].supply = "vci";
++	ctx->supplies[2].supply = "poc";
++
++	ret = devm_regulator_bulk_get(dev, ARRAY_SIZE(ctx->supplies), ctx->supplies);
++	if (ret)
++		return dev_err_probe(dev, ret,
+ 				     "Failed to get vddio regulator\n");
+ 
++	/* Regulators are all boot-on, enable them to balance the refcounts so we can disable
++	 * them later in the first prepare() call */
++	ret = regulator_bulk_enable(ARRAY_SIZE(ctx->supplies), ctx->supplies);
++	if (ret < 0)
++		return dev_err_probe(dev, ret,
++				     "Failed to enable regulators\n");
++
++	ctx->first_prepare = true;
++
+ 	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+ 	if (IS_ERR(ctx->reset_gpio))
+ 		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+-- 
+2.49.0
+
-- 
2.51.0

