From bb8e6dd6e8e7319c2117b0de046f4c08e9989ae2 Mon Sep 17 00:00:00 2001
From: Adrian Vovk <adrianvovk@gmail.com>
Date: Thu, 22 Jun 2023 19:47:20 -0400
Subject: [PATCH 1/9] sysupdate: Report download progress via sd_notify

We set up a NOTIFY_SOCKET to get download progress notifications from
each individual import helper. Along with the number of import jobs we
have to run, this gives an overall progress value which we report using
sd_notify
---
 src/sysupdate/sysupdate-transfer.c | 206 +++++++++++++++++++++++++++--
 src/sysupdate/sysupdate-transfer.h |   4 +-
 src/sysupdate/sysupdate.c          |  36 ++++-
 3 files changed, 231 insertions(+), 15 deletions(-)

diff --git a/src/sysupdate/sysupdate-transfer.c b/src/sysupdate/sysupdate-transfer.c
index 435c38020e..b94f4bf8d6 100644
--- a/src/sysupdate/sysupdate-transfer.c
+++ b/src/sysupdate/sysupdate-transfer.c
@@ -8,6 +8,7 @@
 #include "chase.h"
 #include "conf-parser.h"
 #include "dirent-util.h"
+#include "event-util.h"
 #include "fd-util.h"
 #include "glyph-util.h"
 #include "gpt.h"
@@ -17,7 +18,10 @@
 #include "parse-helpers.h"
 #include "parse-util.h"
 #include "process-util.h"
+#include "random-util.h"
 #include "rm-rf.h"
+#include "signal-util.h"
+#include "socket-util.h"
 #include "specifier.h"
 #include "stat-util.h"
 #include "stdio-util.h"
@@ -784,30 +788,193 @@ static void compile_pattern_fields(
         memcpy(ret->sha256sum, i->metadata.sha256sum, sizeof(ret->sha256sum));
 }
 
+static int helper_on_exit(sd_event_source *s, const siginfo_t *si, void *userdata) {
+        const char *name = userdata;
+        int code;
+
+        assert(s);
+        assert(si);
+        assert(name);
+
+        if (si->si_code == CLD_EXITED) {
+                code = si->si_status;
+                if (code != EXIT_SUCCESS)
+                        log_error("%s failed with exit status %i.", name, code);
+                else
+                        log_debug("%s succeeded.", name);
+        } else {
+                code = -EPROTO;
+                if (IN_SET(si->si_code, CLD_KILLED, CLD_DUMPED))
+                        log_error("%s terminated by signal %s.", name, signal_to_string(si->si_status));
+                else
+                        log_error("%s failed due to unknown reason.", name);
+        }
+
+        return sd_event_exit(sd_event_source_get_event(s), code);
+}
+
+struct notify_userdata {
+        const Transfer *transfer;
+        const Instance *instance;
+        const TransferProgress callback;
+        PidRef pid;
+        void* userdata;
+};
+
+static int helper_on_notify(sd_event_source *s, int fd, uint32_t revents, void *userdata) {
+        char buf[NOTIFY_BUFFER_MAX+1];
+        struct iovec iovec = {
+                .iov_base = buf,
+                .iov_len = sizeof(buf)-1,
+        };
+        CMSG_BUFFER_TYPE(CMSG_SPACE(sizeof(struct ucred))) control;
+        struct msghdr msghdr = {
+                .msg_iov = &iovec,
+                .msg_iovlen = 1,
+                .msg_control = &control,
+                .msg_controllen = sizeof(control),
+        };
+        struct ucred *ucred;
+        struct notify_userdata *ctx = ASSERT_PTR(userdata);
+        char* progress_str;
+        unsigned progress;
+        ssize_t n;
+        int r;
+
+        n = recvmsg_safe(fd, &msghdr, MSG_DONTWAIT|MSG_CMSG_CLOEXEC);
+        if (n < 0) {
+                if (ERRNO_IS_TRANSIENT(n))
+                        return 0;
+                return (int) n;
+        }
+
+        cmsg_close_all(&msghdr);
+
+        if (msghdr.msg_flags & MSG_TRUNC) {
+                log_warning("Got overly long notification datagram, ignoring.");
+                return 0;
+        }
+
+        ucred = CMSG_FIND_DATA(&msghdr, SOL_SOCKET, SCM_CREDENTIALS, struct ucred);
+        if (!ucred || ucred->pid <= 0) {
+                log_warning("Got notification datagram lacking credential information, ignoring.");
+                return 0;
+        }
+        if (ucred->pid != ctx->pid.pid) {
+                log_warning("Got notification datagram from unexpected peer, ignoring.");
+                return 0;
+        }
+
+        buf[n] = 0;
+
+        progress_str = find_line_startswith(buf, "X_IMPORT_PROGRESS=");
+        if (!progress_str)
+                return 0;
+
+        truncate_nl(progress_str);
+        delete_trailing_chars(progress_str, "%");
+
+        r = safe_atou(progress_str, &progress);
+        if (r < 0 || progress > 100) {
+                log_warning("Got invalid percent value '%s', ignoring.", progress_str);
+                return 0;
+        }
+
+        return ctx->callback(ctx->transfer, ctx->instance, progress, ctx->userdata);
+}
+
 static int run_callout(
                 const char *name,
-                char *cmdline[]) {
-
+                char *cmdline[],
+                struct notify_userdata *userdata) {
+        _cleanup_(sd_event_unrefp) sd_event *event = NULL;
+        _cleanup_(sd_event_source_unrefp) sd_event_source *exit_source = NULL, *notify_source = NULL;
+        _cleanup_close_ int fd = -EBADF;
+        _cleanup_free_ char *bind_name = NULL;
+        _cleanup_(pidref_done) PidRef pid = PIDREF_NULL;
+        union sockaddr_union bsa;
         int r;
 
         assert(name);
         assert(cmdline);
         assert(cmdline[0]);
 
-        r = safe_fork(name, FORK_RESET_SIGNALS|FORK_DEATHSIG_SIGTERM|FORK_LOG|FORK_WAIT, NULL);
+        r = sd_event_new(&event);
+        if (r < 0)
+                return r;
+
+        /* Kill the helper & return an error if we get interrupted by a signal */
+        r = sd_event_add_signal(event, NULL, SIGINT | SD_EVENT_SIGNAL_PROCMASK, NULL, INT_TO_PTR(-ECANCELED));
+        if (r < 0)
+                return r;
+        r = sd_event_add_signal(event, NULL, SIGTERM | SD_EVENT_SIGNAL_PROCMASK, NULL, INT_TO_PTR(-ECANCELED));
+        if (r < 0)
+                return r;
+
+        fd = socket(AF_UNIX, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
+        if (fd < 0)
+                return -errno;
+
+        if (asprintf(&bind_name, "@%" PRIx64 "/sysupdate/" PID_FMT "/notify", random_u64(), getpid_cached()) < 0)
+                return log_oom();
+
+        r = sockaddr_un_set_path(&bsa.un, bind_name);
+        if (r < 0)
+                return r;
+
+        if (bind(fd, &bsa.sa, r) < 0)
+                return -errno;
+
+        r = setsockopt_int(fd, SOL_SOCKET, SO_PASSCRED, true);
+        if (r < 0)
+                return r;
+
+        r = pidref_safe_fork(name, FORK_RESET_SIGNALS|FORK_DEATHSIG_SIGTERM|FORK_LOG, &pid);
         if (r < 0)
                 return r;
         if (r == 0) {
                 /* Child */
+                if (setenv("NOTIFY_SOCKET", bind_name, 1) < 0) {
+                        log_error_errno(errno, "setenv() failed: %m");
+                        _exit(EXIT_FAILURE);
+                }
                 r = invoke_callout_binary(cmdline[0], (char *const*) cmdline);
                 log_error_errno(r, "Failed to execute %s tool: %m", cmdline[0]);
                 _exit(EXIT_FAILURE);
         }
 
-        return 0;
+        userdata->pid = pid;
+
+        /* Quit the loop w/ when child process exits */
+        r = event_add_child_pidref(event, &exit_source, &pid, WEXITED, helper_on_exit, (void*) name);
+        if (r < 0)
+                return r;
+
+        r = sd_event_source_set_child_process_own(exit_source, true);
+        if (r < 0)
+                return r;
+
+        /* Propagate sd_notify calls */
+        r = sd_event_add_io(event, &notify_source, fd, EPOLLIN, helper_on_notify, userdata);
+        if (r < 0)
+                return r;
+
+        (void) sd_event_source_set_description(notify_source, "notify-socket");
+
+        r = sd_event_source_set_priority(notify_source, SD_EVENT_PRIORITY_NORMAL - 5);
+        if (r < 0)
+                return r;
+
+        r = sd_event_source_set_io_fd_own(notify_source, true);
+        if (r < 0)
+                return r;
+        TAKE_FD(fd);
+
+        /* Process events until the helper quits */
+        return sd_event_loop(event);
 }
 
-int transfer_acquire_instance(Transfer *t, Instance *i) {
+int transfer_acquire_instance(Transfer *t, Instance *i, TransferProgress cb, void *userdata) {
         _cleanup_free_ char *formatted_pattern = NULL, *digest = NULL;
         char offset[DECIMAL_STR_MAX(uint64_t)+1], max_size[DECIMAL_STR_MAX(uint64_t)+1];
         const char *where = NULL;
@@ -819,6 +986,7 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
         assert(i);
         assert(i->resource);
         assert(t == container_of(i->resource, Transfer, source));
+        assert(cb);
 
         /* Does this instance already exist in the target? Then we don't need to acquire anything */
         existing = resource_find_instance(&t->target, i->metadata.version);
@@ -894,6 +1062,13 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                         return log_oom();
         }
 
+        struct notify_userdata notify_ctx = {
+                .transfer = t,
+                .instance = i,
+                .callback = cb,
+                .userdata = userdata,
+        };
+
         switch (i->resource->type) { /* Source */
 
         case RESOURCE_REGULAR_FILE:
@@ -914,7 +1089,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                                "--direct",          /* just copy/unpack the specified file, don't do anything else */
                                                arg_sync ? "--sync=yes" : "--sync=no",
                                                i->path,
-                                               t->temporary_path));
+                                               t->temporary_path),
+                                        &notify_ctx);
                         break;
 
                 case RESOURCE_PARTITION:
@@ -930,7 +1106,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                                "--size-max", max_size,
                                                arg_sync ? "--sync=yes" : "--sync=no",
                                                i->path,
-                                               t->target.path));
+                                               t->target.path),
+                                        &notify_ctx);
                         break;
 
                 default:
@@ -953,7 +1130,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                        arg_sync ? "--sync=yes" : "--sync=no",
                                        t->target.type == RESOURCE_SUBVOLUME ? "--btrfs-subvol=yes" : "--btrfs-subvol=no",
                                        i->path,
-                                       t->temporary_path));
+                                       t->temporary_path),
+                                &notify_ctx);
                 break;
 
         case RESOURCE_TAR:
@@ -969,7 +1147,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                        arg_sync ? "--sync=yes" : "--sync=no",
                                        t->target.type == RESOURCE_SUBVOLUME ? "--btrfs-subvol=yes" : "--btrfs-subvol=no",
                                        i->path,
-                                       t->temporary_path));
+                                       t->temporary_path),
+                                &notify_ctx);
                 break;
 
         case RESOURCE_URL_FILE:
@@ -988,7 +1167,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                                "--verify", digest,  /* validate by explicit SHA256 sum */
                                                arg_sync ? "--sync=yes" : "--sync=no",
                                                i->path,
-                                               t->temporary_path));
+                                               t->temporary_path),
+                                        &notify_ctx);
                         break;
 
                 case RESOURCE_PARTITION:
@@ -1005,7 +1185,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                                "--size-max", max_size,
                                                arg_sync ? "--sync=yes" : "--sync=no",
                                                i->path,
-                                               t->target.path));
+                                               t->target.path),
+                                        &notify_ctx);
                         break;
 
                 default:
@@ -1026,7 +1207,8 @@ int transfer_acquire_instance(Transfer *t, Instance *i) {
                                        t->target.type == RESOURCE_SUBVOLUME ? "--btrfs-subvol=yes" : "--btrfs-subvol=no",
                                        arg_sync ? "--sync=yes" : "--sync=no",
                                        i->path,
-                                       t->temporary_path));
+                                       t->temporary_path),
+                                &notify_ctx);
                 break;
 
         default:
diff --git a/src/sysupdate/sysupdate-transfer.h b/src/sysupdate/sysupdate-transfer.h
index b0c2a6e455..f613aef8cf 100644
--- a/src/sysupdate/sysupdate-transfer.h
+++ b/src/sysupdate/sysupdate-transfer.h
@@ -46,6 +46,8 @@ struct Transfer {
         PartitionChange partition_change;
 };
 
+typedef int (*TransferProgress)(const Transfer *, const Instance *, unsigned, void *);
+
 Transfer *transfer_new(void);
 
 Transfer *transfer_free(Transfer *t);
@@ -57,6 +59,6 @@ int transfer_resolve_paths(Transfer *t, const char *root, const char *node);
 
 int transfer_vacuum(Transfer *t, uint64_t space, const char *extra_protected_version);
 
-int transfer_acquire_instance(Transfer *t, Instance *i);
+int transfer_acquire_instance(Transfer *t, Instance *i, TransferProgress cb, void *userdata);
 
 int transfer_install_instance(Transfer *t, Instance *i, const char *root);
diff --git a/src/sysupdate/sysupdate.c b/src/sysupdate/sysupdate.c
index 9a8915c3fe..ef9253666a 100644
--- a/src/sysupdate/sysupdate.c
+++ b/src/sysupdate/sysupdate.c
@@ -25,6 +25,7 @@
 #include "path-util.h"
 #include "pretty-print.h"
 #include "set.h"
+#include "signal-util.h"
 #include "sort-util.h"
 #include "string-util.h"
 #include "strv.h"
@@ -744,6 +745,30 @@ static int context_make_online(Context **ret, const char *node) {
         return 0;
 }
 
+static int context_on_acquire_progress(const Transfer *t, const Instance *inst, unsigned percentage, void *userdata) {
+        const Context *c = ASSERT_PTR(userdata);
+        size_t i, n = c->n_transfers;
+        uint64_t base, scaled;
+        unsigned overall;
+
+        for (i = 0; i < n; i++)
+                if (c->transfers[i] == t)
+                        break;
+        assert(i < n); /* We should have found the index */
+
+        base = (100 * 100 * i) / n;
+        scaled = (100 * percentage) / n;
+        overall = (unsigned) (base + scaled) / 100;
+        assert(overall <= 100);
+
+        log_debug("Transfer %zu/%zu is %u%% complete (%u%% overall).", i+1, n, percentage, overall);
+        return sd_notifyf(false, "X_SYSUPDATE_PROGRESS=%u\n"
+                                 "X_SYSUPDATE_TRANSFERS_LEFT=%zu\n"
+                                 "X_SYSUPDATE_TRANSFERS_DONE=%zu\n"
+                                 "STATUS=Updating to '%s' (%u%% complete).",
+                                 overall, n - i, i, inst->metadata.version, overall);
+}
+
 static int context_apply(
                 Context *c,
                 const char *version,
@@ -810,13 +835,14 @@ static int context_apply(
                 sync();
 
         (void) sd_notifyf(false,
-                          "STATUS=Updating to '%s'.\n", us->version);
+                          "STATUS=Updating to '%s'.", us->version);
 
         /* There should now be one instance picked for each transfer, and the order is the same */
         assert(us->n_instances == c->n_transfers);
 
         for (size_t i = 0; i < c->n_transfers; i++) {
-                r = transfer_acquire_instance(c->transfers[i], us->instances[i]);
+                r = transfer_acquire_instance(c->transfers[i], us->instances[i],
+                                              context_on_acquire_progress, c);
                 if (r < 0)
                         return r;
         }
@@ -824,6 +850,9 @@ static int context_apply(
         if (arg_sync)
                 sync();
 
+        (void) sd_notifyf(false,
+                          "STATUS=Installing '%s'.\n", us->version);
+
         for (size_t i = 0; i < c->n_transfers; i++) {
                 r = transfer_install_instance(c->transfers[i], us->instances[i], arg_root);
                 if (r < 0)
@@ -1412,6 +1441,9 @@ static int run(int argc, char *argv[]) {
         if (r <= 0)
                 return r;
 
+        /* SIGCHLD signal must be blocked for sd_event_add_child to work */
+        assert_se(sigprocmask_many(SIG_BLOCK, NULL, SIGCHLD) >= 0);
+
         return sysupdate_main(argc, argv);
 }
 
-- 
2.39.2

