From 998630262892057782e45645b760b29e77c8bd40 Mon Sep 17 00:00:00 2001
From: Adrian Vovk <adrianvovk@gmail.com>
Date: Wed, 19 Jul 2023 14:43:58 -0400
Subject: [PATCH 4/9] sysupdate: Support changelogs & appstream metadata

Makes it possible to specify URLs to a changelog and an appstream
catalog XML in the sysupdate.d/*.conf files. This will be passed along
to the clients of systemd-sysupdated, which can then present this data.
---
 docs/APPSTREAM_BUNDLE.md           | 118 +++++++++++++++++++++++++++++
 man/sysupdate.d.xml                |  36 +++++++++
 src/sysupdate/sysupdate-transfer.c |  43 +++++++++++
 src/sysupdate/sysupdate-transfer.h |   3 +
 src/sysupdate/sysupdate.c          |  31 +++++++-
 5 files changed, 228 insertions(+), 3 deletions(-)
 create mode 100644 docs/APPSTREAM_BUNDLE.md

diff --git a/docs/APPSTREAM_BUNDLE.md b/docs/APPSTREAM_BUNDLE.md
new file mode 100644
index 0000000000..f953e169d0
--- /dev/null
+++ b/docs/APPSTREAM_BUNDLE.md
@@ -0,0 +1,118 @@
+---
+title: Appstream Bundle
+category: Interfaces
+layout: default
+SPDX-License-Identifier: LGPL-2.1-or-later
+---
+
+# Appstream Bundle
+
+NOTE: This document is a work-in-progress.
+
+NOTE: This isn't yet implemented in libappstream and the software centers.
+
+[Appstream catalogs](https://www.freedesktop.org/software/appstream/docs/chap-CatalogData.html)
+are a standardized way to expose metadata about system components, apps, and updates to software
+centers (i.e. GNOME Software and KDE Discover). The `<bundle/>` tag links an appstream component
+to a packaging format. This is used by the software centers to decide which code path (or plugin)
+should handle the component. For instance: components with a `<bundle type="package">...</bundle>`
+will be handled by [PackageKit](https://www.freedesktop.org/software/PackageKit/), and components
+with a `<bundle type="flatpak">...</bundle>` will be handled by [libflatpak](https://docs.flatpak.org/).
+This document will define how to format an appstream component's `<bundle>` tag such that software
+centers will know to manage it using systemd. The following syntax will be supported:
+
+A `type="systemd"` attribute. This tells the software center that it should treat the bundle tag
+as described in this document.
+
+A `class=""` attribute, with the following possible values: `sysupdate`, `extension`, `confext`,
+or `portable`. These correspond to sysupdate components, sysexts, confexts, and portable services
+respectively.
+
+The value of the tag will be used as the name of the image (corresponding to the `class=` attribute).
+So for instance, `<bundle type="systemd" class="extension">foobar</bundle>` corresponds to a sysext
+named "foobar". For `class="sysupdate"`, there is a special case: if the value is empty, then the
+bundle actually refers to the host system.
+
+## Examples
+
+```xml
+<component type="addon">
+	<id>com.example.Devel</id>
+	<extends>com.example.OS</extends>
+	<name>Development Tools</name>
+	<summary>Tools essential to develop Example OS</summary>
+	<provides>
+		<binary>gcc</binary>
+		<binary>g++</binary>
+		<binary>make</binary>
+		<binary>autoconf</binary>
+		<binary>cmake</binary>
+		<binary>meson</binary>
+		<binary>ninja</binary>
+	</provides>
+	<developer_name>Example, inc.</developer_name>
+	<releases>
+		<release version="45" date="2024-01-15" />
+		<release version="44" date="2023-12-08" />
+		<release version="43" date="2023-11-10" />
+	</releases>
+	<bundle type="systemd" class="extension">devel</bundle>
+</component>
+```
+
+defines a sysext named `devel` to be presented by the software center. It will be
+updated via `systemd-sysupdated`'s `extension:devel` target. It will be treated
+as a plugin for the operating system itself.
+
+```xml
+<component merge="append">
+	<id>com.example.OS</id>
+	<releases>
+		<release version="45" date="2024-01-15" urgency="high">
+			<description>
+				<p>This release includes various bug fixes and performance improvements</p>
+			</description>
+		</release>
+	</releases>
+	<bundle type="systemd" class="sysupdate" />
+</component>
+```
+
+extends existing appstream metadata for the host OS with a changelog. It also tells the software
+center that the host OS should be updated using the `host` target for `systemd-sysupdated`.
+
+```xml
+<component type="service">
+	<id>com.example.Foobar</id>
+	<name>Foobar Service</name>
+	<summary>Service that does foo to bar</summary>
+	<icon type="remote">https://example.com/products/foobar/logo.svg</icon>
+	<url type="homepage">https://example.com/products/foobar</url>
+	<provides>
+		<dbus type="system">com.example.Foobar</dbus>
+	</provides>
+	<developer_name>Example, inc.</developer_name>
+	<releases>
+		<release version="1.0.1" date="2024-02-16" urgency="critical">
+			<description>
+				<p>This release fixes a major security vulnerability. Please update ASAP.</p>
+			</description>
+			<issues>
+				<issue type="cve">CVE-2024-28153</issue>
+			</issues>
+		</release>
+		<release version="1.1-beta" date="2024-01-08" type="development" />
+		<release version="1.0" date="2023-11-23">
+			<description>
+				<p>Initial release!</p>
+			</description>
+		</release>
+	</releases>
+	<bundle type="systemd" class="portable">foobar</bundle>
+</component>
+```
+
+defines a portable service named `foobar` to be presented by the software center. It will be
+updated via `systemd-sysupdated`'s `portable:foobar` target. It will be marked as an
+urgent update. It will be presented to the user with a display name, a description, and
+a custom icon.
diff --git a/man/sysupdate.d.xml b/man/sysupdate.d.xml
index a9da9164ef..dd47f44aea 100644
--- a/man/sysupdate.d.xml
+++ b/man/sysupdate.d.xml
@@ -486,6 +486,42 @@
         <xi:include href="version-info.xml" xpointer="v251"/></listitem>
       </varlistentry>
 
+      <varlistentry>
+        <term><varname>Changelog=</varname></term>
+
+        <listitem><para>Optionally takes a human-presentable URL to a website containing a changelog of
+        the resource being updated.</para>
+
+        <para>At most one transfer definition (one <filename>*.conf</filename> file in the directory)
+        can include this setting. Thus, the website should describe all changes for all the transfer
+        definitions. For instance, in the foobarOS example above, any URL specified here should describe
+        changes in both the kernel UKI and in the rootfs.</para>
+
+        <para>This setting supports specifier expansion. See below for details on supported
+        specifiers. This setting will also expand the <literal>@v</literal> wildcard pattern. See above
+        for details.</para>
+
+        <xi:include href="version-info.xml" xpointer="v256"/></listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><varname>Appstream=</varname></term>
+
+        <listitem><para>Optionally takes a URL to an
+        <ulink url="https://www.freedesktop.org/software/appstream/docs/chap-CatalogData.html">appstream catalog</ulink>
+        XML file. This may be used by software centers (such as GNOME Software or KDE Discover) to present
+        rich metadata about the resources being updated. This includes display names, changelogs, icons,
+        and more. The specified catalog must include <ulink url="https://systemd.io/APPSTREAM_BUNDLE">special metadata</ulink>
+        to be correctly associated with <command>systemd-sysupdate</command> by the software centers.</para>
+
+        <para>At most one transfer definition (one <filename>*.conf</filename> file in the directory)
+        can include this setting.</para>
+
+        <para>This setting supports specifier expansion. See below for details on supported
+        specifiers.</para>
+
+        <xi:include href="version-info.xml" xpointer="v256"/></listitem>
+      </varlistentry>
     </variablelist>
   </refsect1>
 
diff --git a/src/sysupdate/sysupdate-transfer.c b/src/sysupdate/sysupdate-transfer.c
index f858f3d06a..306f79a7df 100644
--- a/src/sysupdate/sysupdate-transfer.c
+++ b/src/sysupdate/sysupdate-transfer.c
@@ -48,6 +48,9 @@ Transfer *transfer_free(Transfer *t) {
         free(t->current_symlink);
         free(t->final_path);
 
+        free(t->changelog);
+        free(t->appstream);
+
         partition_info_destroy(&t->partition_info);
 
         resource_destroy(&t->source);
@@ -164,6 +167,44 @@ static int config_parse_min_version(
         return free_and_replace(*version, resolved);
 }
 
+static int config_parse_url_specifiers(
+                const char *unit,
+                const char *filename,
+                unsigned line,
+                const char *section,
+                unsigned section_line,
+                const char *lvalue,
+                int ltype,
+                const char *rvalue,
+                void *data,
+                void *userdata) {
+        char **s = ASSERT_PTR(data);
+        _cleanup_free_ char *resolved = NULL;
+        int r;
+
+        assert(rvalue);
+
+        if (isempty(rvalue)) {
+                *s = mfree(*s);
+                return 0;
+        }
+
+        r = specifier_printf(rvalue, NAME_MAX, specifier_table, arg_root, NULL, &resolved);
+        if (r < 0) {
+                log_syntax(unit, LOG_WARNING, filename, line, r,
+                           "Failed to expand specifiers in %s=, ignoring: %s", lvalue, rvalue);
+                return 0;
+        }
+
+        if (!http_url_is_valid(resolved)) {
+                log_syntax(unit, LOG_WARNING, filename, line, 0,
+                           "%s= URL is not valid, ignoring: %s", lvalue, rvalue);
+                return 0;
+        }
+
+        return free_and_replace(*s, resolved);
+}
+
 static int config_parse_current_symlink(
                 const char *unit,
                 const char *filename,
@@ -427,6 +468,8 @@ int transfer_read_definition(Transfer *t, const char *path) {
                 { "Transfer",    "MinVersion",              config_parse_min_version,          0, &t->min_version             },
                 { "Transfer",    "ProtectVersion",          config_parse_protect_version,      0, &t->protected_versions      },
                 { "Transfer",    "Verify",                  config_parse_bool,                 0, &t->verify                  },
+                { "Transfer",    "Changelog",               config_parse_url_specifiers,       0, &t->changelog               },
+                { "Transfer",    "Appstream",               config_parse_url_specifiers,       0, &t->appstream               },
                 { "Source",      "Type",                    config_parse_resource_type,        0, &t->source.type             },
                 { "Source",      "Path",                    config_parse_resource_path,        0, &t->source                  },
                 { "Source",      "PathRelativeTo",          config_parse_resource_path_relto,  0, &t->source.path_relative_to },
diff --git a/src/sysupdate/sysupdate-transfer.h b/src/sysupdate/sysupdate-transfer.h
index f613aef8cf..71dc384629 100644
--- a/src/sysupdate/sysupdate-transfer.h
+++ b/src/sysupdate/sysupdate-transfer.h
@@ -25,6 +25,9 @@ struct Transfer {
         uint64_t instances_max;
         bool remove_temporary;
 
+        char *changelog;
+        char *appstream;
+
         /* When creating a new partition/file, optionally override these attributes explicitly */
         sd_id128_t partition_uuid;
         bool partition_uuid_set;
diff --git a/src/sysupdate/sysupdate.c b/src/sysupdate/sysupdate.c
index ad64ed7be2..ab8fa903d9 100644
--- a/src/sysupdate/sysupdate.c
+++ b/src/sysupdate/sysupdate.c
@@ -65,6 +65,8 @@ typedef struct Context {
 
         UpdateSet *newest_installed, *candidate;
 
+        char *changelog, *appstream;
+
         Hashmap *web_cache; /* Cache for downloaded resources, keyed by URL */
 } Context;
 
@@ -162,6 +164,15 @@ static int context_read_definitions(
         }
 
         for (size_t i = 0; i < c->n_transfers; i++) {
+                if (c->transfers[i]->changelog && c->changelog)
+                        return log_error_errno(SYNTHETIC_ERRNO(EINVAL),
+                                               "Only one transfer definition can have Changelog= set.");
+                if (c->transfers[i]->appstream && c->appstream)
+                        return log_error_errno(SYNTHETIC_ERRNO(EINVAL),
+                                               "Only one transfer definition can have Appstream= set.");
+                c->changelog = c->transfers[i]->changelog;
+                c->appstream = c->transfers[i]->appstream;
+
                 r = transfer_resolve_paths(c->transfers[i], root, node);
                 if (r < 0)
                         return r;
@@ -479,6 +490,7 @@ static int context_show_version(Context *c, const char *version) {
                 have_read_only = false, have_growfs = false, have_sha256 = false;
         _cleanup_(json_variant_unrefp) JsonVariant *json = NULL;
         _cleanup_(table_unrefp) Table *t = NULL;
+        _cleanup_free_ char *changelog_url = NULL, *changelog_link = NULL;
         UpdateSet *us;
         int r;
 
@@ -650,19 +662,30 @@ static int context_show_version(Context *c, const char *version) {
         if (!have_sha256)
                 (void) table_hide_column_from_display(t, 12);
 
+        if (c->changelog) {
+                changelog_url = strreplace(c->changelog, "@v", version);
+                if (!changelog_url)
+                        return log_oom();
+                r = terminal_urlify(changelog_url, NULL, &changelog_link);
+                if (r < 0)
+                        return log_oom();
+        }
+
         if (FLAGS_SET(arg_json_format_flags, JSON_FORMAT_OFF)) {
                 printf("%s%s%s Version: %s\n"
                        "    State: %s%s%s\n"
                        "Installed: %s%s\n"
                        "Available: %s%s\n"
                        "Protected: %s%s%s\n"
-                       " Obsolete: %s%s%s\n\n",
+                       " Obsolete: %s%s%s\n"
+                       "Changelog: %s\n\n",
                        strempty(update_set_flags_to_color(us->flags)), update_set_flags_to_glyph(us->flags), ansi_normal(), us->version,
                        strempty(update_set_flags_to_color(us->flags)), update_set_flags_to_string(us->flags), ansi_normal(),
                        yes_no(us->flags & UPDATE_INSTALLED), FLAGS_SET(us->flags, UPDATE_INSTALLED|UPDATE_NEWEST) ? " (newest)" : "",
                        yes_no(us->flags & UPDATE_AVAILABLE), (us->flags & (UPDATE_INSTALLED|UPDATE_AVAILABLE|UPDATE_NEWEST)) == (UPDATE_AVAILABLE|UPDATE_NEWEST) ? " (newest)" : "",
                        FLAGS_SET(us->flags, UPDATE_INSTALLED|UPDATE_PROTECTED) ? ansi_highlight() : "", yes_no(FLAGS_SET(us->flags, UPDATE_INSTALLED|UPDATE_PROTECTED)), ansi_normal(),
-                       us->flags & UPDATE_OBSOLETE ? ansi_highlight_red() : "", yes_no(us->flags & UPDATE_OBSOLETE), ansi_normal());
+                       us->flags & UPDATE_OBSOLETE ? ansi_highlight_red() : "", yes_no(us->flags & UPDATE_OBSOLETE), ansi_normal(),
+                       strna(changelog_link));
 
                 return table_print_with_pager(t, arg_json_format_flags, arg_pager_flags, arg_legend);
         } else {
@@ -679,6 +702,7 @@ static int context_show_version(Context *c, const char *version) {
                                         JSON_BUILD_PAIR_BOOLEAN("installed", FLAGS_SET(us->flags, UPDATE_INSTALLED)),
                                         JSON_BUILD_PAIR_BOOLEAN("obsolete", FLAGS_SET(us->flags, UPDATE_OBSOLETE)),
                                         JSON_BUILD_PAIR_BOOLEAN("protected", FLAGS_SET(us->flags, UPDATE_PROTECTED)),
+                                        JSON_BUILD_PAIR_STRING("changelog-url", changelog_url),
                                         JSON_BUILD_PAIR_VARIANT("contents", t_json)));
                 if (r < 0)
                         return log_error_errno(r, "Failed to create JSON: %m");
@@ -1011,7 +1035,8 @@ static int verb_list(int argc, char **argv, void *userdata) {
 
                 r = json_build(&json, JSON_BUILD_OBJECT(
                                         JSON_BUILD_PAIR_STRING("current", current),
-                                        JSON_BUILD_PAIR_STRV("all", versions)));
+                                        JSON_BUILD_PAIR_STRV("all", versions),
+                                        JSON_BUILD_PAIR_STRING("appstream-url", context->appstream)));
                 if (r < 0)
                         return log_error_errno(r, "Failed to create JSON: %m");
 
-- 
2.39.2

