From b552924d69a1d865ab807621246625cdac3fc5c2 Mon Sep 17 00:00:00 2001
From: Michael Catanzaro <mcatanzaro@redhat.com>
Date: Wed, 27 Nov 2024 17:56:03 -0600
Subject: [PATCH] SVGToOTFFontConversion.cpp:169:29: error: use of overloaded
 operator '[]' is ambiguous (with operand types 'ASCIILiteral' and 'int')
 https://bugs.webkit.org/show_bug.cgi?id=283768

Reviewed by NOBODY (OOPS!).

Specify the type of the integer literal to be size_t to disambiguate
which operator[] to use. I'm not actually sure where the built-in
operator[]s are coming from, but that probably doesn't matter since we
surely want to use the one defined in ASCIILiteral.

* Source/WebCore/svg/SVGToOTFFontConversion.cpp:
(WebCore::SVGToOTFFontConverter::append32BitCode):
(WebCore::SVGToOTFFontConverter::appendTable):
---
 Source/WebCore/svg/SVGToOTFFontConversion.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/Source/WebCore/svg/SVGToOTFFontConversion.cpp b/Source/WebCore/svg/SVGToOTFFontConversion.cpp
index 73bb3f90c3ec3..418067b1d93d7 100644
--- a/Source/WebCore/svg/SVGToOTFFontConversion.cpp
+++ b/Source/WebCore/svg/SVGToOTFFontConversion.cpp
@@ -166,10 +166,10 @@ class SVGToOTFFontConverter : public CanMakeWeakPtr<SVGToOTFFontConverter> {
 
     void append32BitCode(ASCIILiteral code)
     {
-        m_result.append(code[0]);
-        m_result.append(code[1]);
-        m_result.append(code[2]);
-        m_result.append(code[3]);
+        m_result.append(code[0UZ]);
+        m_result.append(code[1UZ]);
+        m_result.append(code[2UZ]);
+        m_result.append(code[3UZ]);
     }
 
     void append16(uint16_t value)
@@ -1505,10 +1505,10 @@ void SVGToOTFFontConverter::appendTable(ASCIILiteral identifier, FontAppendingFu
         m_result.append(0);
     ASSERT(isFourByteAligned(m_result.size()));
     size_t directoryEntryOffset = headerSize + m_tablesAppendedCount * directoryEntrySize;
-    m_result[directoryEntryOffset] = identifier[0];
-    m_result[directoryEntryOffset + 1] = identifier[1];
-    m_result[directoryEntryOffset + 2] = identifier[2];
-    m_result[directoryEntryOffset + 3] = identifier[3];
+    m_result[directoryEntryOffset] = identifier[0UZ];
+    m_result[directoryEntryOffset + 1] = identifier[1UZ];
+    m_result[directoryEntryOffset + 2] = identifier[2UZ];
+    m_result[directoryEntryOffset + 3] = identifier[3UZ];
     overwrite32(directoryEntryOffset + 4, calculateChecksum(offset, m_result.size()));
     overwrite32(directoryEntryOffset + 8, offset);
     overwrite32(directoryEntryOffset + 12, unpaddedSize);
