# Project name
name: gnome

# The minimum base BuildStream format
format-version: 14

# Where elements are stored
element-path: elements

# Store source refs in central project.refs file
ref-storage: project.refs

# The uri to download built artifacts from for this project
artifacts:
  url: https://m1-xlarge-x86.gnome.org:11001

fatal-warnings:
- overlaps

(@):
- freedesktop-sdk.bst:include/strip.yml

# Options to specify for the project, these provide
# command line switches which control the behavior of
# conditional directives in the element.bst files.
#
options:
  arch:
    type: arch
    description: Machine architecture
    variable: arch
    values:
    - arm
    - aarch64
    - i686
    - x86_64
    - ppc64le
    - riscv64
  toolbox:
    type: bool
    default: false
    description: mount host resources similar to toolbox


# Source aliases.
#
# These are used in the individual element.bst files in
# place of specifying full uris.
# 
# The location from where source code is downloaded can
# be changed without triggering a rebuild.
#
aliases:
  gnome_downloads: https://download.gnome.org/sources/
  cairo_org: https://cairographics.org/
  cdn_kernel_org: https://cdn.kernel.org/pub/
  downloads.sourceforge.net: https://downloads.sourceforge.net/
  ftp_gnu_org: https://ftp.gnu.org/gnu/
  git_code_sf_net: https://git.code.sf.net/
  git_freedesktop_org: https://gitlab.freedesktop.org/
  github_com: https://github.com/
  gitlab_com: https://gitlab.com/
  gitlab_gnome_org: https://gitlab.gnome.org/
  gnome_download: https://download.gnome.org/
  gstreamer: https://gstreamer.freedesktop.org/src/
  icon_theme_freedesktop_org: https://icon-theme.freedesktop.org/releases/
  iso_codes: https://pkg-isocodes.alioth.debian.org/downloads/
  libburnia: http://files.libburnia-project.org/releases/
  people_freedesktop_org: https://people.freedesktop.org/
  purism: https://source.puri.sm/
  qqwing: https://qqwing.com/
  sourceforge_net: https://sourceforge.net/projects/
  spice: https://www.spice-space.org/download/
  tarballs_needing_help: https://people.gnome.org/~mcatanzaro/tarballs-needing-help/
  webkitgtk_org: https://webkitgtk.org/releases/

mirrors:
- name: kernel_org
  aliases:
    ftp_gnu_org:
    - https://mirrors.kernel.org/gnu/

# Some overrides to the default sandbox execution environment
#
environment:
  LC_ALL: en_US.UTF-8
  LD_LIBRARY_PATH: '%{libdir}'
  PATH: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
  PKG_CONFIG_PATH: /usr/local/lib/pkgconfig:%{libdir}/pkgconfig
  (?):
  - arch == "x86_64":
      CFLAGS: "%{flags_x86_64}"
      CXXFLAGS: "%{flags_x86_64}"
      LDFLAGS: "%{ldflags_defaults}"
  - arch == "i686":
      CFLAGS: "%{flags_i686}"
      CXXFLAGS: "%{flags_i686}"
      LDFLAGS: "%{ldflags_defaults}"
  - arch == "arm":
      CFLAGS: "%{flags_arm}"
      CXXFLAGS: "%{flags_arm}"
      LDFLAGS: "%{ldflags_defaults}"
  - arch == "aarch64":
      CFLAGS: "%{flags_aarch64}"
      CXXFLAGS: "%{flags_aarch64}"
      LDFLAGS: "%{ldflags_defaults}"
      # Our aarch64 CI runner uses CentOS, which uses 64 KB page sizes, but we do not
      # want to support large pages in WebKit as this requires disabling both JIT and
      # bmalloc, including all heap security features. As a workaround until the CI
      # runner is switched from CentOS to a more-compatible OS, we can disable these
      # features only during the build process, so that gobject-introspection does not
      # crash during the build. This workaround is required in project.conf because
      # it's needed for every element that depends on WebKit, which is a lot. Remove
      # when the aarch64 CI no longer uses CentOS.
      JavaScriptCoreUseJIT: '0'
      Malloc: '1'
  - arch == "ppc64le":
      CFLAGS: "%{flags_ppc64le}"
      CXXFLAGS: "%{flags_ppc64le}"
      LDFLAGS: "%{ldflags_defaults}"
  - arch == "riscv64":
      CFLAGS: "%{flags_riscv64}"
      CXXFLAGS: "%{flags_riscv64}"
      LDFLAGS: "%{ldflags_defaults}"
      G_SLICE: always-malloc

(?):
- arch == "riscv64":
    environment-nocache:
    - G_SLICE

# Some overrides to element configuration based on type
#
# Here we can set a project wide options for various build systems,
# e.g. we can add --disable-gtk-doc to every `./configure` line.
elements:
  autotools:
    variables:
      conf-global: --disable-static --disable-Werror --host=%{triplet} --build=%{triplet}

  cmake:
    variables:
      cmake-global: -DCMAKE_BUILD_TYPE=RelWithDebInfo
      generator: Ninja
  distutils:
    variables:
      python-install: '%{python} setup.py install --root "%{install-root}"'
      fix-pyc-timestamps: ''
    config:
      install-commands:
        (>):
          # There's no way to get the setup.py to install this in the right place.
        - |
          if [ -d '%{install-root}/usr/lib/pkgconfig/' ]; then
            mkdir -p %{install-root}/usr/%{lib}/
            mv -f %{install-root}/usr/lib/pkgconfig/ %{install-root}/usr/%{lib}/
          fi
  meson:
    variables:
      meson-global: --buildtype=plain --auto-features=enabled

  filter:
    config:
      include-orphans: true

sources:
  git_tag:
    config:
      checkout-submodules: false
      track-tags: false

split-rules:
  devel:
    (>):
    - '%{indep-libdir}/**/include'
    - '%{indep-libdir}/**/include/**'
    - '%{bindir}/*-config'
    - '%{libdir}/cmake'
    - '%{libdir}/cmake/**'
    - '%{datadir}/cmake'
    - '%{datadir}/cmake/**'
    - '%{datadir}/gir-1.0'
    - '%{datadir}/gir-1.0/**'
    - '%{datadir}/vala*/vapi'
    - '%{datadir}/vala*/vapi/**'
    - '%{datadir}/installed-tests'
    - '%{datadir}/installed-tests/**'
    - '%{libexecdir}/installed-tests'
    - '%{libexecdir}/installed-tests/**'
  vm:
  - '%{datadir}/dbus-1/**'

# Define some behavior for `bst shell`
#
shell:

  # Default command for `bst shell`, we prefer bash, and disable
  # parsing of profile and rc files so that the prompt BuildStream
  # sets is not overwritten.
  command: ['bash', '--noprofile', '--norc', '-i']

  # Some environment variables to inherit from the host environment
  environment:
    LANG: '$LANG'
    DISPLAY: '$DISPLAY'
    DBUS_SESSION_BUS_ADDRESS: '$DBUS_SESSION_BUS_ADDRESS'
    XDG_RUNTIME_DIR: '$XDG_RUNTIME_DIR'

    # Inform applications which use pulseaudio of the server socket
    PULSE_SERVER: 'unix:${XDG_RUNTIME_DIR}/pulse/native'

    (?):
    - toolbox:
        COLORTERM: $COLORTERM
        COLUMNS: $COLUMNS
        DESKTOP_SESSION: $DESKTOP_SESSION
        HOME: $HOME
        LINES: $LINES
        SHELL: $SHELL
        SSH_AUTH_SOCK: $SSH_AUTH_SOCK
        TERM: $TERM
        VTE_VERSION: $VTE_VERSION
        WAYLAND_DISPLAY: $WAYLAND_DISPLAY
        XDG_CURRENT_DESKTOP: $XDG_CURRENT_DESKTOP
        XDG_DATA_DIRS: $XDG_DATA_DIRS
        XDG_MENU_PREFIX: $XDG_MENU_PREFIX
        XDG_SESSION_DESKTOP: $XDG_SESSION_DESKTOP
        XDG_SESSION_TYPE: $XDG_SESSION_TYPE

        # Those are some environment variables that aren't always present in a
        # stock GNOME, and so might be left unset but would be equal to literally
        # $FOO which could lead to problems (i.e. DBus's system bus is broken
        # doesn't work in most apps otherwise as it's not a valid dbus bus path).
        # If your system set-up is atypical, you can uncomment some of them.

        # DBUS_SYSTEM_BUS_ADDRESS: $DBUS_SYSTEM_BUS_ADDRESS
        # XDG_SESSION_ID: $XDG_SESSION_ID
        # XDG_SEAT: $XDG_SEAT
        # XDG_VTNR: $XDG_VTNR

  # Some things to mount into the sandbox
  host-files:
  # Understand user inherited uid/gid
  - '/etc/passwd'
  - '/etc/group'
  # Allow network resolution
  - '/etc/resolv.conf'

  # Allow access to plausible video devices,
  # declare these optional to avoid meaningless warnings
  - path: '/dev/dri'
    optional: true
  - path: '/dev/mali'
    optional: true
  - path: '/dev/mali0'
    optional: true
  - path: '/dev/umplock'
    optional: true
  - path: '/dev/nvidiactl'
    optional: true
  - path: '/dev/nvidia0'
    optional: true
  - path: '/dev/nvidia-modeset'
    optional: true

  # Allow access to sysfs, needed for local device discovery
  - '/sys'

  # Allow access to the user runtime directory, this
  # will include the pulseaudio socket along with some
  # other things.
  - '${XDG_RUNTIME_DIR}'
  - path: '/tmp/.X11-unix'
    optional: true

  (?):
  - toolbox:
      host-files:
        (>):
        - '/dev'
        - '$HOME'
        - /run/dbus/system_bus_socket

        - path: /media
          optional: true
        - path: /run/media
          optional: true
        - path: /mnt
          optional: true

        # The following have been copied from toolbox, but I'm not sure how useful
        # they are without the symlinks that toolbox puts at startup, but whatever
        - host_path: '$XDG_RUNTIME_DIR/.flatpak-helper/monitor'
          path: /run/host/monitor
          optional: true
        - host_path: /etc
          path: /run/host/etc
        - host_path: /run
          path: /run/host/run
        - host_path: /tmp
          path: /run/host/tmp
        - host_path: /usr
          path: /run/host/usr
        - host_path: /var
          path: /run/host/var

variables:
  branch: master
  branch-nice-name: Nightly #Should be %{branch} if not master
  installer-volume-id: "GNOME-OS-%{branch-nice-name}-%{arch}"
  qualifier: ''
  flatpak-branch: '%{branch}%{qualifier}'
  ostree-layer: user
  ostree-branch: "gnome-os/%{branch}/%{arch}-%{ostree-layer}"
  ostree-remote-url: "https://nightly.gnome.org/gnomeos/repo"
  gcc_arch: "%{arch}"
  abi: "gnu"
  gcc_triplet: "%{gcc_arch}-linux-%{abi}"
  triplet: "%{arch}-unknown-linux-%{abi}"
  lib: "lib/%{gcc_triplet}"
  sbindir: "%{bindir}"
  sysconfdir: "/etc"
  localstatedir: "/var"
  indep-libdir: "%{prefix}/lib"
  debugdir: "%{indep-libdir}/debug"
  runstatedir: "/run"
  common_flags: "-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches"
  flags_x86_64: "-march=x86-64 -mtune=generic %{common_flags} -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer %{local_flags}"
  flags_i686: "-march=i686 -mtune=generic -msse2 -mfpmath=sse -mstackrealign %{common_flags} -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection %{local_flags}"
  flags_aarch64: "%{common_flags} -fasynchronous-unwind-tables -fstack-clash-protection -fno-omit-frame-pointer %{local_flags}"
  flags_arm: "%{common_flags} %{local_flags}"
  flags_ppc64le: "%{common_flags} -mcpu=power9 -mtune=power9 -fno-omit-frame-pointer %{local_flags}"
  flags_riscv64: "%{common_flags} -fasynchronous-unwind-tables -fstack-clash-protection %{local_flags}"
  ldflags_defaults: "-Wl,-z,relro,-z,now -Wl,--as-needed -L%{libdir}"
  local_flags: ''

  (?):
  - arch == "x86_64":
      go-arch: "amd64"
  - arch == "i686":
      gcc_arch: "i386"
      go-arch: "386"
  - arch == "aarch64":
      go-arch: "arm64"
  - arch == "arm":
      abi: "gnueabihf"
      go-arch: "arm"
  - arch == "ppc64le":
      gcc_arch: "powerpc64le"
      go-arch: "ppc64le"
  - arch == "riscv64":
      go-arch: "riscv64"

plugins:
- origin: pip
  package-name: buildstream-external
  elements:
    flatpak_image: 0
    flatpak_repo: 0
    collect_manifest: 0
    x86image: 0
  sources:
    cargo: 0
    git_tag: 1
- origin: local
  path: plugins
  elements:
    collect_initial_scripts: 0
    ostree: 0
